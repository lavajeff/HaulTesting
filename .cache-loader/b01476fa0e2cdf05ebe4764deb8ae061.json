{"remainingRequest":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js??ref--5-2!/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/ReactNative/takeSnapshot.js","dependencies":[{"path":"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/ReactNative/takeSnapshot.js","mtime":1539700108130},{"path":"/Users/jeffrey/HaulTesting/node_modules/cache-loader/dist/cjs.js","mtime":1539652983212},{"path":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js","mtime":1539652983315},{"path":"/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js","mtime":1539615827828}],"contextDependencies":[],"result":["var ReactNative=require('ReactNative');var UIManager=require('UIManager');module.exports=function takeSnapshot(view,options){if(typeof view!=='number'&&view!=='window'){view=ReactNative.findNodeHandle(view)||'window';}return UIManager.__takeSnapshot(view,options);};",{"version":3,"sources":["/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/ReactNative/takeSnapshot.js"],"names":["ReactNative","require","UIManager","module","exports","takeSnapshot","view","options","findNodeHandle","__takeSnapshot"],"mappings":"AAUA,GAAMA,CAAAA,WAAW,CAAGC,OAAO,CAAC,aAAD,CAA3B,CACA,GAAMC,CAAAA,SAAS,CAAGD,OAAO,CAAC,WAAD,CAAzB,CAmBAE,MAAM,CAACC,OAAP,CAAiB,QAASC,CAAAA,YAAT,CACfC,IADe,CAEfC,OAFe,CAQD,CACd,GAAI,MAAOD,CAAAA,IAAP,GAAgB,QAAhB,EAA4BA,IAAI,GAAK,QAAzC,CAAmD,CACjDA,IAAI,CAAGN,WAAW,CAACQ,cAAZ,CAA2BF,IAA3B,GAAoC,QAA3C,CACD,CAID,MAAOJ,CAAAA,SAAS,CAACO,cAAV,CAAyBH,IAAzB,CAA+BC,OAA/B,CAAP,CACD,CAhBD","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\nconst ReactNative = require('ReactNative');\nconst UIManager = require('UIManager');\n\n/**\n * Capture an image of the screen, window or an individual view. The image\n * will be stored in a temporary file that will only exist for as long as the\n * app is running.\n *\n * The `view` argument can be the literal string `window` if you want to\n * capture the entire window, or it can be a reference to a specific\n * React Native component.\n *\n * The `options` argument may include:\n * - width/height (number) - the width and height of the image to capture.\n * - format (string) - either 'png' or 'jpeg'. Defaults to 'png'.\n * - quality (number) - the quality when using jpeg. 0.0 - 1.0 (default).\n *\n * Returns a Promise.\n * @platform ios\n */\nmodule.exports = function takeSnapshot(\n  view?: 'window' | React$Element<any> | number,\n  options?: {\n    width?: number,\n    height?: number,\n    format?: 'png' | 'jpeg',\n    quality?: number,\n  },\n): Promise<any> {\n  if (typeof view !== 'number' && view !== 'window') {\n    view = ReactNative.findNodeHandle(view) || 'window';\n  }\n\n  // Call the hidden '__takeSnapshot' method; the main one throws an error to\n  // prevent accidental backwards-incompatible usage.\n  return UIManager.__takeSnapshot(view, options);\n};\n"]}]}