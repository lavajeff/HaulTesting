{"remainingRequest":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js??ref--5-2!/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/WebView/WebViewShared.js","dependencies":[{"path":"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/WebView/WebViewShared.js","mtime":1539700108130},{"path":"/Users/jeffrey/HaulTesting/node_modules/cache-loader/dist/cjs.js","mtime":1539652983212},{"path":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js","mtime":1539652983315},{"path":"/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js","mtime":1539615827828}],"contextDependencies":[],"result":["'use strict';(function(){var enterModule=require('react-hot-loader').enterModule;enterModule&&enterModule(module);})();var escapeStringRegexp=require('escape-string-regexp');var WebViewShared={defaultOriginWhitelist:['http://*','https://*'],extractOrigin:function extractOrigin(url){var result=/^[A-Za-z0-9]+:(\\/\\/)?[^/]*/.exec(url);return result===null?null:result[0];},originWhitelistToRegex:function originWhitelistToRegex(originWhitelist){return escapeStringRegexp(originWhitelist).replace(/\\\\\\*/g,'.*');}};module.exports=WebViewShared;;(function(){var reactHotLoader=require('react-hot-loader').default;var leaveModule=require('react-hot-loader').leaveModule;if(!reactHotLoader){return;}reactHotLoader.register(WebViewShared,\"WebViewShared\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/WebView/WebViewShared.js\");leaveModule(module);})();;",{"version":3,"sources":["/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/WebView/WebViewShared.js"],"names":["escapeStringRegexp","require","WebViewShared","defaultOriginWhitelist","extractOrigin","url","result","exec","originWhitelistToRegex","originWhitelist","replace","module","exports"],"mappings":"AAUA,a,0GAEA,GAAMA,CAAAA,kBAAkB,CAAGC,OAAO,CAAC,sBAAD,CAAlC,CAEA,GAAMC,CAAAA,aAAa,CAAG,CACpBC,sBAAsB,CAAE,CAAC,UAAD,CAAa,WAAb,CADJ,CAEpBC,aAAa,CAAE,uBAACC,GAAD,CAA0B,CACvC,GAAMC,CAAAA,MAAM,CAAG,6BAA6BC,IAA7B,CAAkCF,GAAlC,CAAf,CACA,MAAOC,CAAAA,MAAM,GAAK,IAAX,CAAkB,IAAlB,CAAyBA,MAAM,CAAC,CAAD,CAAtC,CACD,CALmB,CAMpBE,sBAAsB,CAAE,gCAACC,eAAD,CAAqC,CAC3D,MAAOT,CAAAA,kBAAkB,CAACS,eAAD,CAAlB,CAAoCC,OAApC,CAA4C,OAA5C,CAAqD,IAArD,CAAP,CACD,CARmB,CAAtB,CAWAC,MAAM,CAACC,OAAP,CAAiBV,aAAjB,C,gLAXMA,a","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst escapeStringRegexp = require('escape-string-regexp');\n\nconst WebViewShared = {\n  defaultOriginWhitelist: ['http://*', 'https://*'],\n  extractOrigin: (url: string): ?string => {\n    const result = /^[A-Za-z0-9]+:(\\/\\/)?[^/]*/.exec(url);\n    return result === null ? null : result[0];\n  },\n  originWhitelistToRegex: (originWhitelist: string): string => {\n    return escapeStringRegexp(originWhitelist).replace(/\\\\\\*/g, '.*');\n  },\n};\n\nmodule.exports = WebViewShared;\n"]}]}