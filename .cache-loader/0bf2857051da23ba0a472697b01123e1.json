{"remainingRequest":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js??ref--5-2!/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Core/ReactNativeVersionCheck.js","dependencies":[{"path":"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Core/ReactNativeVersionCheck.js","mtime":1539700108130},{"path":"/Users/jeffrey/HaulTesting/node_modules/cache-loader/dist/cjs.js","mtime":1539652983212},{"path":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js","mtime":1539652983315},{"path":"/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js","mtime":1539615827828}],"contextDependencies":[],"result":["'use strict';(function(){var enterModule=require('react-hot-loader').enterModule;enterModule&&enterModule(module);})();var _require=require('NativeModules'),PlatformConstants=_require.PlatformConstants;var ReactNativeVersion=require('ReactNativeVersion');exports.checkVersions=function checkVersions(){if(!PlatformConstants){return;}var nativeVersion=PlatformConstants.reactNativeVersion;if(ReactNativeVersion.version.major!==nativeVersion.major||ReactNativeVersion.version.minor!==nativeVersion.minor){console.error(\"React Native version mismatch.\\n\\nJavaScript version: \"+_formatVersion(ReactNativeVersion.version)+\"\\n\"+(\"Native version: \"+_formatVersion(nativeVersion)+\"\\n\\n\")+'Make sure that you have rebuilt the native code. If the problem '+'persists try clearing the Watchman and packager caches with '+'`watchman watch-del-all && react-native start --reset-cache`.');}};function _formatVersion(version){return version.major+\".\"+version.minor+\".\"+version.patch+(version.prerelease!==null?\"-\"+version.prerelease:'');};(function(){var reactHotLoader=require('react-hot-loader').default;var leaveModule=require('react-hot-loader').leaveModule;if(!reactHotLoader){return;}reactHotLoader.register(_formatVersion,\"_formatVersion\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Core/ReactNativeVersionCheck.js\");leaveModule(module);})();;",{"version":3,"sources":["/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Core/ReactNativeVersionCheck.js"],"names":["require","PlatformConstants","ReactNativeVersion","exports","checkVersions","nativeVersion","reactNativeVersion","version","major","minor","console","error","_formatVersion","patch","prerelease"],"mappings":"AASA,a,uHAE4BA,OAAO,CAAC,eAAD,C,CAA5BC,iB,UAAAA,iB,CACP,GAAMC,CAAAA,kBAAkB,CAAGF,OAAO,CAAC,oBAAD,CAAlC,CAWAG,OAAO,CAACC,aAAR,CAAwB,QAASA,CAAAA,aAAT,EAA+B,CACrD,GAAI,CAACH,iBAAL,CAAwB,CACtB,OACD,CAED,GAAMI,CAAAA,aAAa,CAAGJ,iBAAiB,CAACK,kBAAxC,CACA,GACEJ,kBAAkB,CAACK,OAAnB,CAA2BC,KAA3B,GAAqCH,aAAa,CAACG,KAAnD,EACAN,kBAAkB,CAACK,OAAnB,CAA2BE,KAA3B,GAAqCJ,aAAa,CAACI,KAFrD,CAGE,CACAC,OAAO,CAACC,KAAR,CACE,yDAAyDC,cAAc,CACrEV,kBAAkB,CAACK,OADkD,CAAvE,0BAGqBK,cAAc,CAACP,aAAD,CAHnC,SAIE,kEAJF,CAKE,8DALF,CAME,+DAPJ,EASD,CACF,CApBD,CAsBA,QAASO,CAAAA,cAAT,CAAwBL,OAAxB,CAAyC,CACvC,MACKA,CAAAA,OAAO,CAACC,KAAX,KAAoBD,OAAO,CAACE,KAA5B,KAAqCF,OAAO,CAACM,KAA7C,EACCN,OAAO,CAACO,UAAR,GAAuB,IAAvB,KAAkCP,OAAO,CAACO,UAA1C,CAAyD,EAD1D,CADF,CAID,C,gLALQF,c","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n'use strict';\n\nconst {PlatformConstants} = require('NativeModules');\nconst ReactNativeVersion = require('ReactNativeVersion');\n\n/**\n * Checks that the version of this React Native JS is compatible with the native\n * code, throwing an error if it isn't.\n *\n * The existence of this module is part of the public interface of React Native\n * even though it is used only internally within React Native. React Native\n * implementations for other platforms (ex: Windows) may override this module\n * and rely on its existence as a separate module.\n */\nexports.checkVersions = function checkVersions(): void {\n  if (!PlatformConstants) {\n    return;\n  }\n\n  const nativeVersion = PlatformConstants.reactNativeVersion;\n  if (\n    ReactNativeVersion.version.major !== nativeVersion.major ||\n    ReactNativeVersion.version.minor !== nativeVersion.minor\n  ) {\n    console.error(\n      `React Native version mismatch.\\n\\nJavaScript version: ${_formatVersion(\n        ReactNativeVersion.version,\n      )}\\n` +\n        `Native version: ${_formatVersion(nativeVersion)}\\n\\n` +\n        'Make sure that you have rebuilt the native code. If the problem ' +\n        'persists try clearing the Watchman and packager caches with ' +\n        '`watchman watch-del-all && react-native start --reset-cache`.',\n    );\n  }\n};\n\nfunction _formatVersion(version): string {\n  return (\n    `${version.major}.${version.minor}.${version.patch}` +\n    (version.prerelease !== null ? `-${version.prerelease}` : '')\n  );\n}\n"]}]}