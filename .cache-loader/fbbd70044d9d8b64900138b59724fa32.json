{"remainingRequest":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js??ref--5-2!/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/SegmentedControlIOS/SegmentedControlIOS.ios.js","dependencies":[{"path":"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/SegmentedControlIOS/SegmentedControlIOS.ios.js","mtime":1539700108130},{"path":"/Users/jeffrey/HaulTesting/node_modules/cache-loader/dist/cjs.js","mtime":1539652983212},{"path":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js","mtime":1539652983315},{"path":"/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js","mtime":1539615827828}],"contextDependencies":[],"result":["'use strict';var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _objectSpread2=_interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));var _jsxFileName=\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/SegmentedControlIOS/SegmentedControlIOS.ios.js\";(function(){var enterModule=require('react-hot-loader').enterModule;enterModule&&enterModule(module);})();var NativeMethodsMixin=require('NativeMethodsMixin');var React=require('React');var ReactNative=require('ReactNative');var PropTypes=require('prop-types');var StyleSheet=require('StyleSheet');var ViewPropTypes=require('ViewPropTypes');var createReactClass=require('create-react-class');var requireNativeComponent=require('requireNativeComponent');var RCTSegmentedControl=requireNativeComponent('RCTSegmentedControl');var SEGMENTED_CONTROL_REFERENCE='segmentedcontrol';var SegmentedControlIOS=createReactClass({displayName:'SegmentedControlIOS',mixins:[NativeMethodsMixin],propTypes:(0,_objectSpread2.default)({},ViewPropTypes,{values:PropTypes.arrayOf(PropTypes.string),selectedIndex:PropTypes.number,onValueChange:PropTypes.func,onChange:PropTypes.func,enabled:PropTypes.bool,tintColor:PropTypes.string,momentary:PropTypes.bool}),getDefaultProps:function getDefaultProps(){return{values:[],enabled:true};},_onChange:function _onChange(event){this.props.onChange&&this.props.onChange(event);this.props.onValueChange&&this.props.onValueChange(event.nativeEvent.value);},render:function render(){return React.createElement(RCTSegmentedControl,(0,_extends2.default)({},this.props,{ref:SEGMENTED_CONTROL_REFERENCE,style:[styles.segmentedControl,this.props.style],onChange:this._onChange,__source:{fileName:_jsxFileName,lineNumber:128}}));}});var styles=StyleSheet.create({segmentedControl:{height:28}});module.exports=SegmentedControlIOS;;(function(){var reactHotLoader=require('react-hot-loader').default;var leaveModule=require('react-hot-loader').leaveModule;if(!reactHotLoader){return;}reactHotLoader.register(RCTSegmentedControl,\"RCTSegmentedControl\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/SegmentedControlIOS/SegmentedControlIOS.ios.js\");reactHotLoader.register(SEGMENTED_CONTROL_REFERENCE,\"SEGMENTED_CONTROL_REFERENCE\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/SegmentedControlIOS/SegmentedControlIOS.ios.js\");reactHotLoader.register(SegmentedControlIOS,\"SegmentedControlIOS\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/SegmentedControlIOS/SegmentedControlIOS.ios.js\");reactHotLoader.register(styles,\"styles\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/SegmentedControlIOS/SegmentedControlIOS.ios.js\");leaveModule(module);})();;",{"version":3,"sources":["/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/SegmentedControlIOS/SegmentedControlIOS.ios.js"],"names":["NativeMethodsMixin","require","React","ReactNative","PropTypes","StyleSheet","ViewPropTypes","createReactClass","requireNativeComponent","RCTSegmentedControl","SEGMENTED_CONTROL_REFERENCE","SegmentedControlIOS","displayName","mixins","propTypes","values","arrayOf","string","selectedIndex","number","onValueChange","func","onChange","enabled","bool","tintColor","momentary","getDefaultProps","_onChange","event","props","nativeEvent","value","render","styles","segmentedControl","style","create","height","module","exports"],"mappings":"AAUA,a,mfAEA,GAAMA,CAAAA,kBAAkB,CAAGC,OAAO,CAAC,oBAAD,CAAlC,CACA,GAAMC,CAAAA,KAAK,CAAGD,OAAO,CAAC,OAAD,CAArB,CACA,GAAME,CAAAA,WAAW,CAAGF,OAAO,CAAC,aAAD,CAA3B,CACA,GAAMG,CAAAA,SAAS,CAAGH,OAAO,CAAC,YAAD,CAAzB,CACA,GAAMI,CAAAA,UAAU,CAAGJ,OAAO,CAAC,YAAD,CAA1B,CACA,GAAMK,CAAAA,aAAa,CAAGL,OAAO,CAAC,eAAD,CAA7B,CAEA,GAAMM,CAAAA,gBAAgB,CAAGN,OAAO,CAAC,oBAAD,CAAhC,CACA,GAAMO,CAAAA,sBAAsB,CAAGP,OAAO,CAAC,wBAAD,CAAtC,CAIA,GAAMQ,CAAAA,mBAAmB,CAAGD,sBAAsB,CAAC,qBAAD,CAAlD,CAkBA,GAAME,CAAAA,2BAA2B,CAAG,kBAApC,CAwBA,GAAMC,CAAAA,mBAAmB,CAAGJ,gBAAgB,CAAC,CAC3CK,WAAW,CAAE,qBAD8B,CAE3CC,MAAM,CAAE,CAACb,kBAAD,CAFmC,CAI3Cc,SAAS,+BACJR,aADI,EAKPS,MAAM,CAAEX,SAAS,CAACY,OAAV,CAAkBZ,SAAS,CAACa,MAA5B,CALD,CAUPC,aAAa,CAAEd,SAAS,CAACe,MAVlB,CAgBPC,aAAa,CAAEhB,SAAS,CAACiB,IAhBlB,CAsBPC,QAAQ,CAAElB,SAAS,CAACiB,IAtBb,CA4BPE,OAAO,CAAEnB,SAAS,CAACoB,IA5BZ,CAiCPC,SAAS,CAAErB,SAAS,CAACa,MAjCd,CAuCPS,SAAS,CAAEtB,SAAS,CAACoB,IAvCd,EAJkC,CA8C3CG,eAAe,CAAE,0BAAyB,CACxC,MAAO,CACLZ,MAAM,CAAE,EADH,CAELQ,OAAO,CAAE,IAFJ,CAAP,CAID,CAnD0C,CAqD3CK,SAAS,CAAE,mBAASC,KAAT,CAAuB,CAChC,KAAKC,KAAL,CAAWR,QAAX,EAAuB,KAAKQ,KAAL,CAAWR,QAAX,CAAoBO,KAApB,CAAvB,CACA,KAAKC,KAAL,CAAWV,aAAX,EACE,KAAKU,KAAL,CAAWV,aAAX,CAAyBS,KAAK,CAACE,WAAN,CAAkBC,KAA3C,CADF,CAED,CAzD0C,CA2D3CC,MAAM,CAAE,iBAAW,CACjB,MACE,qBAAC,mBAAD,0BACM,KAAKH,KADX,EAEE,GAAG,CAAEpB,2BAFP,CAGE,KAAK,CAAE,CAACwB,MAAM,CAACC,gBAAR,CAA0B,KAAKL,KAAL,CAAWM,KAArC,CAHT,CAIE,QAAQ,CAAE,KAAKR,SAJjB,mDADF,CAQD,CApE0C,CAAD,CAA5C,CAuEA,GAAMM,CAAAA,MAAM,CAAG7B,UAAU,CAACgC,MAAX,CAAkB,CAC/BF,gBAAgB,CAAE,CAChBG,MAAM,CAAE,EADQ,CADa,CAAlB,CAAf,CAMAC,MAAM,CAACC,OAAP,CAAmB7B,mBAAnB,C,gLAvHMF,mB,2KAkBAC,2B,mLAwBAC,mB,2KAuEAuB,M","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst NativeMethodsMixin = require('NativeMethodsMixin');\nconst React = require('React');\nconst ReactNative = require('ReactNative');\nconst PropTypes = require('prop-types');\nconst StyleSheet = require('StyleSheet');\nconst ViewPropTypes = require('ViewPropTypes');\n\nconst createReactClass = require('create-react-class');\nconst requireNativeComponent = require('requireNativeComponent');\n\nimport type {ViewProps} from 'ViewPropTypes';\n\nconst RCTSegmentedControl = requireNativeComponent('RCTSegmentedControl');\n\ntype DefaultProps = {\n  values: $ReadOnlyArray<string>,\n  enabled: boolean,\n};\n\ntype Props = $ReadOnly<{|\n  ...ViewProps,\n  values?: ?$ReadOnlyArray<string>,\n  selectedIndex?: ?number,\n  onValueChange?: ?Function,\n  onChange?: ?Function,\n  enabled?: ?boolean,\n  tintColor?: ?string,\n  momentary?: ?boolean,\n|}>;\n\nconst SEGMENTED_CONTROL_REFERENCE = 'segmentedcontrol';\n\ntype Event = Object;\n\n/**\n * Use `SegmentedControlIOS` to render a UISegmentedControl iOS.\n *\n * #### Programmatically changing selected index\n *\n * The selected index can be changed on the fly by assigning the\n * selectedIndex prop to a state variable, then changing that variable.\n * Note that the state variable would need to be updated as the user\n * selects a value and changes the index, as shown in the example below.\n *\n * ````\n * <SegmentedControlIOS\n *   values={['One', 'Two']}\n *   selectedIndex={this.state.selectedIndex}\n *   onChange={(event) => {\n *     this.setState({selectedIndex: event.nativeEvent.selectedSegmentIndex});\n *   }}\n * />\n * ````\n */\nconst SegmentedControlIOS = createReactClass({\n  displayName: 'SegmentedControlIOS',\n  mixins: [NativeMethodsMixin],\n\n  propTypes: {\n    ...ViewPropTypes,\n    /**\n     * The labels for the control's segment buttons, in order.\n     */\n    values: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * The index in `props.values` of the segment to be (pre)selected.\n     */\n    selectedIndex: PropTypes.number,\n\n    /**\n     * Callback that is called when the user taps a segment;\n     * passes the segment's value as an argument\n     */\n    onValueChange: PropTypes.func,\n\n    /**\n     * Callback that is called when the user taps a segment;\n     * passes the event as an argument\n     */\n    onChange: PropTypes.func,\n\n    /**\n     * If false the user won't be able to interact with the control.\n     * Default value is true.\n     */\n    enabled: PropTypes.bool,\n\n    /**\n     * Accent color of the control.\n     */\n    tintColor: PropTypes.string,\n\n    /**\n     * If true, then selecting a segment won't persist visually.\n     * The `onValueChange` callback will still work as expected.\n     */\n    momentary: PropTypes.bool,\n  },\n\n  getDefaultProps: function(): DefaultProps {\n    return {\n      values: [],\n      enabled: true,\n    };\n  },\n\n  _onChange: function(event: Event) {\n    this.props.onChange && this.props.onChange(event);\n    this.props.onValueChange &&\n      this.props.onValueChange(event.nativeEvent.value);\n  },\n\n  render: function() {\n    return (\n      <RCTSegmentedControl\n        {...this.props}\n        ref={SEGMENTED_CONTROL_REFERENCE}\n        style={[styles.segmentedControl, this.props.style]}\n        onChange={this._onChange}\n      />\n    );\n  },\n});\n\nconst styles = StyleSheet.create({\n  segmentedControl: {\n    height: 28,\n  },\n});\n\nmodule.exports = ((SegmentedControlIOS: any): Class<\n  ReactNative.NativeComponent<Props>,\n>);\n"]}]}