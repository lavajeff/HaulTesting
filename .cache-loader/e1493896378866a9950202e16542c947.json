{"remainingRequest":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js??ref--5-2!/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Network/FormData.js","dependencies":[{"path":"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Network/FormData.js","mtime":1539700108130},{"path":"/Users/jeffrey/HaulTesting/node_modules/cache-loader/dist/cjs.js","mtime":1539652983212},{"path":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js","mtime":1539652983315},{"path":"/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js","mtime":1539615827828}],"contextDependencies":[],"result":["'use strict';var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _objectSpread2=_interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));var _slicedToArray2=_interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));(function(){var enterModule=require('react-hot-loader').enterModule;enterModule&&enterModule(module);})();var FormData=function(){function FormData(){(0,_classCallCheck2.default)(this,FormData);this._parts=[];}(0,_createClass2.default)(FormData,[{key:\"append\",value:function append(key,value){this._parts.push([key,value]);}},{key:\"getParts\",value:function getParts(){return this._parts.map(function(_ref){var _ref2=(0,_slicedToArray2.default)(_ref,2),name=_ref2[0],value=_ref2[1];var contentDisposition='form-data; name=\"'+name+'\"';var headers={'content-disposition':contentDisposition};if(typeof value==='object'&&value){if(typeof value.name==='string'){headers['content-disposition']+='; filename=\"'+value.name+'\"';}if(typeof value.type==='string'){headers['content-type']=value.type;}return(0,_objectSpread2.default)({},value,{headers:headers,fieldName:name});}return{string:String(value),headers:headers,fieldName:name};});}},{key:\"__reactstandin__regenerateByEval\",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code);}}]);return FormData;}();module.exports=FormData;;(function(){var reactHotLoader=require('react-hot-loader').default;var leaveModule=require('react-hot-loader').leaveModule;if(!reactHotLoader){return;}reactHotLoader.register(FormData,\"FormData\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Network/FormData.js\");leaveModule(module);})();;",{"version":3,"sources":["/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Network/FormData.js"],"names":["FormData","_parts","key","value","push","map","name","contentDisposition","headers","type","fieldName","string","String","module","exports"],"mappings":"AAUA,a,4iBAsCMA,CAAAA,Q,YAGJ,mBAAc,6CACZ,KAAKC,MAAL,CAAc,EAAd,CACD,C,wEAEMC,G,CAAaC,K,CAAsB,CAMxC,KAAKF,MAAL,CAAYG,IAAZ,CAAiB,CAACF,GAAD,CAAMC,KAAN,CAAjB,EACD,C,2CAE+B,CAC9B,MAAO,MAAKF,MAAL,CAAYI,GAAZ,CAAgB,cAAmB,+CAAjBC,IAAiB,UAAXH,KAAW,UACxC,GAAMI,CAAAA,kBAAkB,CAAG,oBAAsBD,IAAtB,CAA6B,GAAxD,CAEA,GAAME,CAAAA,OAAgB,CAAG,CAAC,sBAAuBD,kBAAxB,CAAzB,CAMA,GAAI,MAAOJ,CAAAA,KAAP,GAAiB,QAAjB,EAA6BA,KAAjC,CAAwC,CACtC,GAAI,MAAOA,CAAAA,KAAK,CAACG,IAAb,GAAsB,QAA1B,CAAoC,CAClCE,OAAO,CAAC,qBAAD,CAAP,EAAkC,eAAiBL,KAAK,CAACG,IAAvB,CAA8B,GAAhE,CACD,CACD,GAAI,MAAOH,CAAAA,KAAK,CAACM,IAAb,GAAsB,QAA1B,CAAoC,CAClCD,OAAO,CAAC,cAAD,CAAP,CAA0BL,KAAK,CAACM,IAAhC,CACD,CACD,oCAAWN,KAAX,EAAkBK,OAAO,CAAPA,OAAlB,CAA2BE,SAAS,CAAEJ,IAAtC,GACD,CAED,MAAO,CAACK,MAAM,CAAEC,MAAM,CAACT,KAAD,CAAf,CAAwBK,OAAO,CAAPA,OAAxB,CAAiCE,SAAS,CAAEJ,IAA5C,CAAP,CACD,CApBM,CAAP,CAqBD,C,kJAGHO,MAAM,CAACC,OAAP,CAAiBd,QAAjB,C,gLAzCMA,Q","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\ntype FormDataValue = any;\ntype FormDataNameValuePair = [string, FormDataValue];\n\ntype Headers = {[name: string]: string};\ntype FormDataPart =\n  | {\n      string: string,\n      headers: Headers,\n    }\n  | {\n      uri: string,\n      headers: Headers,\n      name?: string,\n      type?: string,\n    };\n\n/**\n * Polyfill for XMLHttpRequest2 FormData API, allowing multipart POST requests\n * with mixed data (string, native files) to be submitted via XMLHttpRequest.\n *\n * Example:\n *\n *   var photo = {\n *     uri: uriFromCameraRoll,\n *     type: 'image/jpeg',\n *     name: 'photo.jpg',\n *   };\n *\n *   var body = new FormData();\n *   body.append('authToken', 'secret');\n *   body.append('photo', photo);\n *   body.append('title', 'A beautiful photo!');\n *\n *   xhr.open('POST', serverURL);\n *   xhr.send(body);\n */\nclass FormData {\n  _parts: Array<FormDataNameValuePair>;\n\n  constructor() {\n    this._parts = [];\n  }\n\n  append(key: string, value: FormDataValue) {\n    // The XMLHttpRequest spec doesn't specify if duplicate keys are allowed.\n    // MDN says that any new values should be appended to existing values.\n    // In any case, major browsers allow duplicate keys, so that's what we'll do\n    // too. They'll simply get appended as additional form data parts in the\n    // request body, leaving the server to deal with them.\n    this._parts.push([key, value]);\n  }\n\n  getParts(): Array<FormDataPart> {\n    return this._parts.map(([name, value]) => {\n      const contentDisposition = 'form-data; name=\"' + name + '\"';\n\n      const headers: Headers = {'content-disposition': contentDisposition};\n\n      // The body part is a \"blob\", which in React Native just means\n      // an object with a `uri` attribute. Optionally, it can also\n      // have a `name` and `type` attribute to specify filename and\n      // content type (cf. web Blob interface.)\n      if (typeof value === 'object' && value) {\n        if (typeof value.name === 'string') {\n          headers['content-disposition'] += '; filename=\"' + value.name + '\"';\n        }\n        if (typeof value.type === 'string') {\n          headers['content-type'] = value.type;\n        }\n        return {...value, headers, fieldName: name};\n      }\n      // Convert non-object values to strings as per FormData.append() spec\n      return {string: String(value), headers, fieldName: name};\n    });\n  }\n}\n\nmodule.exports = FormData;\n"]}]}