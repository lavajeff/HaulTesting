{"remainingRequest":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js??ref--5-2!/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Animated/src/nodes/AnimatedInterpolation.js","dependencies":[{"path":"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Animated/src/nodes/AnimatedInterpolation.js","mtime":1539700108130},{"path":"/Users/jeffrey/HaulTesting/node_modules/cache-loader/dist/cjs.js","mtime":1539652983212},{"path":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js","mtime":1539652983315},{"path":"/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js","mtime":1539615827828}],"contextDependencies":[],"result":["'use strict';var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _possibleConstructorReturn2=_interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));var _getPrototypeOf2=_interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));var _get2=_interopRequireDefault(require(\"@babel/runtime/helpers/get\"));var _inherits2=_interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));var _objectSpread2=_interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));(function(){var enterModule=require('react-hot-loader').enterModule;enterModule&&enterModule(module);})();var AnimatedNode=require('./AnimatedNode');var AnimatedWithChildren=require('./AnimatedWithChildren');var NativeAnimatedHelper=require('../NativeAnimatedHelper');var invariant=require('fbjs/lib/invariant');var normalizeColor=require('normalizeColor');var linear=function linear(t){return t;};function createInterpolation(config){if(config.outputRange&&typeof config.outputRange[0]==='string'){return createInterpolationFromStringOutputRange(config);}var outputRange=config.outputRange;checkInfiniteRange('outputRange',outputRange);var inputRange=config.inputRange;checkInfiniteRange('inputRange',inputRange);checkValidInputRange(inputRange);invariant(inputRange.length===outputRange.length,'inputRange ('+inputRange.length+') and outputRange ('+outputRange.length+') must have the same length');var easing=config.easing||linear;var extrapolateLeft='extend';if(config.extrapolateLeft!==undefined){extrapolateLeft=config.extrapolateLeft;}else if(config.extrapolate!==undefined){extrapolateLeft=config.extrapolate;}var extrapolateRight='extend';if(config.extrapolateRight!==undefined){extrapolateRight=config.extrapolateRight;}else if(config.extrapolate!==undefined){extrapolateRight=config.extrapolate;}return function(input){invariant(typeof input==='number','Cannot interpolation an input which is not a number');var range=findRange(input,inputRange);return interpolate(input,inputRange[range],inputRange[range+1],outputRange[range],outputRange[range+1],easing,extrapolateLeft,extrapolateRight);};}function interpolate(input,inputMin,inputMax,outputMin,outputMax,easing,extrapolateLeft,extrapolateRight){var result=input;if(result<inputMin){if(extrapolateLeft==='identity'){return result;}else if(extrapolateLeft==='clamp'){result=inputMin;}else if(extrapolateLeft==='extend'){}}if(result>inputMax){if(extrapolateRight==='identity'){return result;}else if(extrapolateRight==='clamp'){result=inputMax;}else if(extrapolateRight==='extend'){}}if(outputMin===outputMax){return outputMin;}if(inputMin===inputMax){if(input<=inputMin){return outputMin;}return outputMax;}if(inputMin===-Infinity){result=-result;}else if(inputMax===Infinity){result=result-inputMin;}else{result=(result-inputMin)/(inputMax-inputMin);}result=easing(result);if(outputMin===-Infinity){result=-result;}else if(outputMax===Infinity){result=result+outputMin;}else{result=result*(outputMax-outputMin)+outputMin;}return result;}function colorToRgba(input){var int32Color=normalizeColor(input);if(int32Color===null){return input;}int32Color=int32Color||0;var r=(int32Color&0xff000000)>>>24;var g=(int32Color&0x00ff0000)>>>16;var b=(int32Color&0x0000ff00)>>>8;var a=(int32Color&0x000000ff)/255;return\"rgba(\"+r+\", \"+g+\", \"+b+\", \"+a+\")\";}var stringShapeRegex=/[0-9\\.-]+/g;function createInterpolationFromStringOutputRange(config){var outputRange=config.outputRange;invariant(outputRange.length>=2,'Bad output range');outputRange=outputRange.map(colorToRgba);checkPattern(outputRange);var outputRanges=outputRange[0].match(stringShapeRegex).map(function(){return[];});outputRange.forEach(function(value){value.match(stringShapeRegex).forEach(function(number,i){outputRanges[i].push(+number);});});var interpolations=outputRange[0].match(stringShapeRegex).map(function(value,i){return createInterpolation((0,_objectSpread2.default)({},config,{outputRange:outputRanges[i]}));});var shouldRound=isRgbOrRgba(outputRange[0]);return function(input){var i=0;return outputRange[0].replace(stringShapeRegex,function(){var val=+interpolations[i++](input);var rounded=shouldRound&&i<4?Math.round(val):Math.round(val*1000)/1000;return String(rounded);});};}function isRgbOrRgba(range){return typeof range==='string'&&range.startsWith('rgb');}function checkPattern(arr){var pattern=arr[0].replace(stringShapeRegex,'');for(var i=1;i<arr.length;++i){invariant(pattern===arr[i].replace(stringShapeRegex,''),'invalid pattern '+arr[0]+' and '+arr[i]);}}function findRange(input,inputRange){var i;for(i=1;i<inputRange.length-1;++i){if(inputRange[i]>=input){break;}}return i-1;}function checkValidInputRange(arr){invariant(arr.length>=2,'inputRange must have at least 2 elements');for(var i=1;i<arr.length;++i){invariant(arr[i]>=arr[i-1],'inputRange must be monotonically non-decreasing '+arr);}}function checkInfiniteRange(name,arr){invariant(arr.length>=2,name+' must have at least 2 elements');invariant(arr.length!==2||arr[0]!==-Infinity||arr[1]!==Infinity,name+'cannot be ]-infinity;+infinity[ '+arr);}var AnimatedInterpolation=function(_AnimatedWithChildren){(0,_inherits2.default)(AnimatedInterpolation,_AnimatedWithChildren);function AnimatedInterpolation(parent,config){var _this;(0,_classCallCheck2.default)(this,AnimatedInterpolation);_this=(0,_possibleConstructorReturn2.default)(this,(0,_getPrototypeOf2.default)(AnimatedInterpolation).call(this));_this._parent=parent;_this._config=config;_this._interpolation=createInterpolation(config);return _this;}(0,_createClass2.default)(AnimatedInterpolation,[{key:\"__makeNative\",value:function __makeNative(){this._parent.__makeNative();(0,_get2.default)((0,_getPrototypeOf2.default)(AnimatedInterpolation.prototype),\"__makeNative\",this).call(this);}},{key:\"__getValue\",value:function __getValue(){var parentValue=this._parent.__getValue();invariant(typeof parentValue==='number','Cannot interpolate an input which is not a number.');return this._interpolation(parentValue);}},{key:\"interpolate\",value:function interpolate(config){return new AnimatedInterpolation(this,config);}},{key:\"__attach\",value:function __attach(){this._parent.__addChild(this);}},{key:\"__detach\",value:function __detach(){this._parent.__removeChild(this);(0,_get2.default)((0,_getPrototypeOf2.default)(AnimatedInterpolation.prototype),\"__detach\",this).call(this);}},{key:\"__transformDataType\",value:function __transformDataType(range){return range.map(function(value){if(typeof value!=='string'){return value;}if(/deg$/.test(value)){var degrees=parseFloat(value)||0;var radians=degrees*Math.PI/180.0;return radians;}else{return parseFloat(value)||0;}});}},{key:\"__getNativeConfig\",value:function __getNativeConfig(){if(__DEV__){NativeAnimatedHelper.validateInterpolation(this._config);}return{inputRange:this._config.inputRange,outputRange:this.__transformDataType(this._config.outputRange),extrapolateLeft:this._config.extrapolateLeft||this._config.extrapolate||'extend',extrapolateRight:this._config.extrapolateRight||this._config.extrapolate||'extend',type:'interpolation'};}},{key:\"__reactstandin__regenerateByEval\",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code);}}]);return AnimatedInterpolation;}(AnimatedWithChildren);AnimatedInterpolation.__createInterpolation=createInterpolation;module.exports=AnimatedInterpolation;;(function(){var reactHotLoader=require('react-hot-loader').default;var leaveModule=require('react-hot-loader').leaveModule;if(!reactHotLoader){return;}reactHotLoader.register(linear,\"linear\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Animated/src/nodes/AnimatedInterpolation.js\");reactHotLoader.register(createInterpolation,\"createInterpolation\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Animated/src/nodes/AnimatedInterpolation.js\");reactHotLoader.register(interpolate,\"interpolate\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Animated/src/nodes/AnimatedInterpolation.js\");reactHotLoader.register(colorToRgba,\"colorToRgba\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Animated/src/nodes/AnimatedInterpolation.js\");reactHotLoader.register(stringShapeRegex,\"stringShapeRegex\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Animated/src/nodes/AnimatedInterpolation.js\");reactHotLoader.register(createInterpolationFromStringOutputRange,\"createInterpolationFromStringOutputRange\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Animated/src/nodes/AnimatedInterpolation.js\");reactHotLoader.register(isRgbOrRgba,\"isRgbOrRgba\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Animated/src/nodes/AnimatedInterpolation.js\");reactHotLoader.register(checkPattern,\"checkPattern\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Animated/src/nodes/AnimatedInterpolation.js\");reactHotLoader.register(findRange,\"findRange\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Animated/src/nodes/AnimatedInterpolation.js\");reactHotLoader.register(checkValidInputRange,\"checkValidInputRange\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Animated/src/nodes/AnimatedInterpolation.js\");reactHotLoader.register(checkInfiniteRange,\"checkInfiniteRange\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Animated/src/nodes/AnimatedInterpolation.js\");reactHotLoader.register(AnimatedInterpolation,\"AnimatedInterpolation\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Animated/src/nodes/AnimatedInterpolation.js\");leaveModule(module);})();;",{"version":3,"sources":["/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Animated/src/nodes/AnimatedInterpolation.js"],"names":["AnimatedNode","require","AnimatedWithChildren","NativeAnimatedHelper","invariant","normalizeColor","linear","t","createInterpolation","config","outputRange","createInterpolationFromStringOutputRange","checkInfiniteRange","inputRange","checkValidInputRange","length","easing","extrapolateLeft","undefined","extrapolate","extrapolateRight","input","range","findRange","interpolate","inputMin","inputMax","outputMin","outputMax","result","Infinity","colorToRgba","int32Color","r","g","b","a","stringShapeRegex","map","checkPattern","outputRanges","match","forEach","value","number","i","push","interpolations","shouldRound","isRgbOrRgba","replace","val","rounded","Math","round","String","startsWith","arr","pattern","name","AnimatedInterpolation","parent","_parent","_config","_interpolation","__makeNative","parentValue","__getValue","__addChild","__removeChild","test","degrees","parseFloat","radians","PI","__DEV__","validateInterpolation","__transformDataType","type","__createInterpolation","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n/* eslint no-bitwise: 0 */\n'use strict';\n\nconst AnimatedNode = require('./AnimatedNode');\nconst AnimatedWithChildren = require('./AnimatedWithChildren');\nconst NativeAnimatedHelper = require('../NativeAnimatedHelper');\n\nconst invariant = require('fbjs/lib/invariant');\nconst normalizeColor = require('normalizeColor');\n\ntype ExtrapolateType = 'extend' | 'identity' | 'clamp';\n\nexport type InterpolationConfigType = {\n  inputRange: Array<number>,\n  /* $FlowFixMe(>=0.38.0 site=react_native_fb,react_native_oss) - Flow error\n   * detected during the deployment of v0.38.0. To see the error, remove this\n   * comment and run flow\n   */\n  outputRange: Array<number> | Array<string>,\n  easing?: (input: number) => number,\n  extrapolate?: ExtrapolateType,\n  extrapolateLeft?: ExtrapolateType,\n  extrapolateRight?: ExtrapolateType,\n};\n\nconst linear = t => t;\n\n/**\n * Very handy helper to map input ranges to output ranges with an easing\n * function and custom behavior outside of the ranges.\n */\nfunction createInterpolation(\n  config: InterpolationConfigType,\n): (input: number) => number | string {\n  if (config.outputRange && typeof config.outputRange[0] === 'string') {\n    return createInterpolationFromStringOutputRange(config);\n  }\n\n  const outputRange: Array<number> = (config.outputRange: any);\n  checkInfiniteRange('outputRange', outputRange);\n\n  const inputRange = config.inputRange;\n  checkInfiniteRange('inputRange', inputRange);\n  checkValidInputRange(inputRange);\n\n  invariant(\n    inputRange.length === outputRange.length,\n    'inputRange (' +\n      inputRange.length +\n      ') and outputRange (' +\n      outputRange.length +\n      ') must have the same length',\n  );\n\n  const easing = config.easing || linear;\n\n  let extrapolateLeft: ExtrapolateType = 'extend';\n  if (config.extrapolateLeft !== undefined) {\n    extrapolateLeft = config.extrapolateLeft;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateLeft = config.extrapolate;\n  }\n\n  let extrapolateRight: ExtrapolateType = 'extend';\n  if (config.extrapolateRight !== undefined) {\n    extrapolateRight = config.extrapolateRight;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateRight = config.extrapolate;\n  }\n\n  return input => {\n    invariant(\n      typeof input === 'number',\n      'Cannot interpolation an input which is not a number',\n    );\n\n    const range = findRange(input, inputRange);\n    return interpolate(\n      input,\n      inputRange[range],\n      inputRange[range + 1],\n      outputRange[range],\n      outputRange[range + 1],\n      easing,\n      extrapolateLeft,\n      extrapolateRight,\n    );\n  };\n}\n\nfunction interpolate(\n  input: number,\n  inputMin: number,\n  inputMax: number,\n  outputMin: number,\n  outputMax: number,\n  easing: (input: number) => number,\n  extrapolateLeft: ExtrapolateType,\n  extrapolateRight: ExtrapolateType,\n) {\n  let result = input;\n\n  // Extrapolate\n  if (result < inputMin) {\n    if (extrapolateLeft === 'identity') {\n      return result;\n    } else if (extrapolateLeft === 'clamp') {\n      result = inputMin;\n    } else if (extrapolateLeft === 'extend') {\n      // noop\n    }\n  }\n\n  if (result > inputMax) {\n    if (extrapolateRight === 'identity') {\n      return result;\n    } else if (extrapolateRight === 'clamp') {\n      result = inputMax;\n    } else if (extrapolateRight === 'extend') {\n      // noop\n    }\n  }\n\n  if (outputMin === outputMax) {\n    return outputMin;\n  }\n\n  if (inputMin === inputMax) {\n    if (input <= inputMin) {\n      return outputMin;\n    }\n    return outputMax;\n  }\n\n  // Input Range\n  if (inputMin === -Infinity) {\n    result = -result;\n  } else if (inputMax === Infinity) {\n    result = result - inputMin;\n  } else {\n    result = (result - inputMin) / (inputMax - inputMin);\n  }\n\n  // Easing\n  result = easing(result);\n\n  // Output Range\n  if (outputMin === -Infinity) {\n    result = -result;\n  } else if (outputMax === Infinity) {\n    result = result + outputMin;\n  } else {\n    result = result * (outputMax - outputMin) + outputMin;\n  }\n\n  return result;\n}\n\nfunction colorToRgba(input: string): string {\n  let int32Color = normalizeColor(input);\n  if (int32Color === null) {\n    return input;\n  }\n\n  int32Color = int32Color || 0;\n\n  const r = (int32Color & 0xff000000) >>> 24;\n  const g = (int32Color & 0x00ff0000) >>> 16;\n  const b = (int32Color & 0x0000ff00) >>> 8;\n  const a = (int32Color & 0x000000ff) / 255;\n\n  return `rgba(${r}, ${g}, ${b}, ${a})`;\n}\n\nconst stringShapeRegex = /[0-9\\.-]+/g;\n\n/**\n * Supports string shapes by extracting numbers so new values can be computed,\n * and recombines those values into new strings of the same shape.  Supports\n * things like:\n *\n *   rgba(123, 42, 99, 0.36) // colors\n *   -45deg                  // values with units\n */\nfunction createInterpolationFromStringOutputRange(\n  config: InterpolationConfigType,\n): (input: number) => string {\n  let outputRange: Array<string> = (config.outputRange: any);\n  invariant(outputRange.length >= 2, 'Bad output range');\n  outputRange = outputRange.map(colorToRgba);\n  checkPattern(outputRange);\n\n  // ['rgba(0, 100, 200, 0)', 'rgba(50, 150, 250, 0.5)']\n  // ->\n  // [\n  //   [0, 50],\n  //   [100, 150],\n  //   [200, 250],\n  //   [0, 0.5],\n  // ]\n  /* $FlowFixMe(>=0.18.0): `outputRange[0].match()` can return `null`. Need to\n   * guard against this possibility.\n   */\n  const outputRanges = outputRange[0].match(stringShapeRegex).map(() => []);\n  outputRange.forEach(value => {\n    /* $FlowFixMe(>=0.18.0): `value.match()` can return `null`. Need to guard\n     * against this possibility.\n     */\n    value.match(stringShapeRegex).forEach((number, i) => {\n      outputRanges[i].push(+number);\n    });\n  });\n\n  /* $FlowFixMe(>=0.18.0): `outputRange[0].match()` can return `null`. Need to\n   * guard against this possibility.\n   */\n  const interpolations = outputRange[0]\n    .match(stringShapeRegex)\n    .map((value, i) => {\n      return createInterpolation({\n        ...config,\n        outputRange: outputRanges[i],\n      });\n    });\n\n  // rgba requires that the r,g,b are integers.... so we want to round them, but we *dont* want to\n  // round the opacity (4th column).\n  const shouldRound = isRgbOrRgba(outputRange[0]);\n\n  return input => {\n    let i = 0;\n    // 'rgba(0, 100, 200, 0)'\n    // ->\n    // 'rgba(${interpolations[0](input)}, ${interpolations[1](input)}, ...'\n    return outputRange[0].replace(stringShapeRegex, () => {\n      const val = +interpolations[i++](input);\n      const rounded =\n        shouldRound && i < 4 ? Math.round(val) : Math.round(val * 1000) / 1000;\n      return String(rounded);\n    });\n  };\n}\n\nfunction isRgbOrRgba(range) {\n  return typeof range === 'string' && range.startsWith('rgb');\n}\n\nfunction checkPattern(arr: Array<string>) {\n  const pattern = arr[0].replace(stringShapeRegex, '');\n  for (let i = 1; i < arr.length; ++i) {\n    invariant(\n      pattern === arr[i].replace(stringShapeRegex, ''),\n      'invalid pattern ' + arr[0] + ' and ' + arr[i],\n    );\n  }\n}\n\nfunction findRange(input: number, inputRange: Array<number>) {\n  let i;\n  for (i = 1; i < inputRange.length - 1; ++i) {\n    if (inputRange[i] >= input) {\n      break;\n    }\n  }\n  return i - 1;\n}\n\nfunction checkValidInputRange(arr: Array<number>) {\n  invariant(arr.length >= 2, 'inputRange must have at least 2 elements');\n  for (let i = 1; i < arr.length; ++i) {\n    invariant(\n      arr[i] >= arr[i - 1],\n      /* $FlowFixMe(>=0.13.0) - In the addition expression below this comment,\n       * one or both of the operands may be something that doesn't cleanly\n       * convert to a string, like undefined, null, and object, etc. If you really\n       * mean this implicit string conversion, you can do something like\n       * String(myThing)\n       */\n      'inputRange must be monotonically non-decreasing ' + arr,\n    );\n  }\n}\n\nfunction checkInfiniteRange(name: string, arr: Array<number>) {\n  invariant(arr.length >= 2, name + ' must have at least 2 elements');\n  invariant(\n    arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity,\n    /* $FlowFixMe(>=0.13.0) - In the addition expression below this comment,\n     * one or both of the operands may be something that doesn't cleanly convert\n     * to a string, like undefined, null, and object, etc. If you really mean\n     * this implicit string conversion, you can do something like\n     * String(myThing)\n     */\n    name + 'cannot be ]-infinity;+infinity[ ' + arr,\n  );\n}\n\nclass AnimatedInterpolation extends AnimatedWithChildren {\n  // Export for testing.\n  static __createInterpolation = createInterpolation;\n\n  _parent: AnimatedNode;\n  _config: InterpolationConfigType;\n  _interpolation: (input: number) => number | string;\n\n  constructor(parent: AnimatedNode, config: InterpolationConfigType) {\n    super();\n    this._parent = parent;\n    this._config = config;\n    this._interpolation = createInterpolation(config);\n  }\n\n  __makeNative() {\n    this._parent.__makeNative();\n    super.__makeNative();\n  }\n\n  __getValue(): number | string {\n    const parentValue: number = this._parent.__getValue();\n    invariant(\n      typeof parentValue === 'number',\n      'Cannot interpolate an input which is not a number.',\n    );\n    return this._interpolation(parentValue);\n  }\n\n  interpolate(config: InterpolationConfigType): AnimatedInterpolation {\n    return new AnimatedInterpolation(this, config);\n  }\n\n  __attach(): void {\n    this._parent.__addChild(this);\n  }\n\n  __detach(): void {\n    this._parent.__removeChild(this);\n    super.__detach();\n  }\n\n  __transformDataType(range: Array<any>) {\n    // Change the string array type to number array\n    // So we can reuse the same logic in iOS and Android platform\n    /* $FlowFixMe(>=0.70.0 site=react_native_fb) This comment suppresses an\n     * error found when Flow v0.70 was deployed. To see the error delete this\n     * comment and run Flow. */\n    return range.map(function(value) {\n      if (typeof value !== 'string') {\n        return value;\n      }\n      if (/deg$/.test(value)) {\n        const degrees = parseFloat(value) || 0;\n        const radians = (degrees * Math.PI) / 180.0;\n        return radians;\n      } else {\n        // Assume radians\n        return parseFloat(value) || 0;\n      }\n    });\n  }\n\n  __getNativeConfig(): any {\n    if (__DEV__) {\n      NativeAnimatedHelper.validateInterpolation(this._config);\n    }\n\n    return {\n      inputRange: this._config.inputRange,\n      // Only the `outputRange` can contain strings so we don't need to transform `inputRange` here\n      outputRange: this.__transformDataType(this._config.outputRange),\n      extrapolateLeft:\n        this._config.extrapolateLeft || this._config.extrapolate || 'extend',\n      extrapolateRight:\n        this._config.extrapolateRight || this._config.extrapolate || 'extend',\n      type: 'interpolation',\n    };\n  }\n}\n\nmodule.exports = AnimatedInterpolation;\n"]}]}