{"remainingRequest":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js??ref--5-2!/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Network/XHRInterceptor.js","dependencies":[{"path":"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Network/XHRInterceptor.js","mtime":1539700108130},{"path":"/Users/jeffrey/HaulTesting/node_modules/cache-loader/dist/cjs.js","mtime":1539652983212},{"path":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js","mtime":1539652983315},{"path":"/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js","mtime":1539615827828}],"contextDependencies":[],"result":["'use strict';(function(){var enterModule=require('react-hot-loader').enterModule;enterModule&&enterModule(module);})();var XMLHttpRequest=require('XMLHttpRequest');var originalXHROpen=XMLHttpRequest.prototype.open;var originalXHRSend=XMLHttpRequest.prototype.send;var originalXHRSetRequestHeader=XMLHttpRequest.prototype.setRequestHeader;var openCallback;var sendCallback;var requestHeaderCallback;var headerReceivedCallback;var responseCallback;var _isInterceptorEnabled=false;var XHRInterceptor={setOpenCallback:function setOpenCallback(callback){openCallback=callback;},setSendCallback:function setSendCallback(callback){sendCallback=callback;},setHeaderReceivedCallback:function setHeaderReceivedCallback(callback){headerReceivedCallback=callback;},setResponseCallback:function setResponseCallback(callback){responseCallback=callback;},setRequestHeaderCallback:function setRequestHeaderCallback(callback){requestHeaderCallback=callback;},isInterceptorEnabled:function isInterceptorEnabled(){return _isInterceptorEnabled;},enableInterception:function enableInterception(){if(_isInterceptorEnabled){return;}XMLHttpRequest.prototype.open=function(method,url){if(openCallback){openCallback(method,url,this);}originalXHROpen.apply(this,arguments);};XMLHttpRequest.prototype.setRequestHeader=function(header,value){if(requestHeaderCallback){requestHeaderCallback(header,value,this);}originalXHRSetRequestHeader.apply(this,arguments);};XMLHttpRequest.prototype.send=function(data){var _this=this;if(sendCallback){sendCallback(data,this);}if(this.addEventListener){this.addEventListener('readystatechange',function(){if(!_isInterceptorEnabled){return;}if(_this.readyState===_this.HEADERS_RECEIVED){var contentTypeString=_this.getResponseHeader('Content-Type');var contentLengthString=_this.getResponseHeader('Content-Length');var responseContentType,responseSize;if(contentTypeString){responseContentType=contentTypeString.split(';')[0];}if(contentLengthString){responseSize=parseInt(contentLengthString,10);}if(headerReceivedCallback){headerReceivedCallback(responseContentType,responseSize,_this.getAllResponseHeaders(),_this);}}if(_this.readyState===_this.DONE){if(responseCallback){responseCallback(_this.status,_this.timeout,_this.response,_this.responseURL,_this.responseType,_this);}}},false);}originalXHRSend.apply(this,arguments);};_isInterceptorEnabled=true;},disableInterception:function disableInterception(){if(!_isInterceptorEnabled){return;}_isInterceptorEnabled=false;XMLHttpRequest.prototype.send=originalXHRSend;XMLHttpRequest.prototype.open=originalXHROpen;XMLHttpRequest.prototype.setRequestHeader=originalXHRSetRequestHeader;responseCallback=null;openCallback=null;sendCallback=null;headerReceivedCallback=null;requestHeaderCallback=null;}};module.exports=XHRInterceptor;;(function(){var reactHotLoader=require('react-hot-loader').default;var leaveModule=require('react-hot-loader').leaveModule;if(!reactHotLoader){return;}reactHotLoader.register(originalXHROpen,\"originalXHROpen\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Network/XHRInterceptor.js\");reactHotLoader.register(originalXHRSend,\"originalXHRSend\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Network/XHRInterceptor.js\");reactHotLoader.register(originalXHRSetRequestHeader,\"originalXHRSetRequestHeader\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Network/XHRInterceptor.js\");reactHotLoader.register(openCallback,\"openCallback\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Network/XHRInterceptor.js\");reactHotLoader.register(sendCallback,\"sendCallback\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Network/XHRInterceptor.js\");reactHotLoader.register(requestHeaderCallback,\"requestHeaderCallback\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Network/XHRInterceptor.js\");reactHotLoader.register(headerReceivedCallback,\"headerReceivedCallback\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Network/XHRInterceptor.js\");reactHotLoader.register(responseCallback,\"responseCallback\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Network/XHRInterceptor.js\");reactHotLoader.register(_isInterceptorEnabled,\"isInterceptorEnabled\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Network/XHRInterceptor.js\");reactHotLoader.register(XHRInterceptor,\"XHRInterceptor\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Network/XHRInterceptor.js\");leaveModule(module);})();;",{"version":3,"sources":["/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Network/XHRInterceptor.js"],"names":["XMLHttpRequest","require","originalXHROpen","prototype","open","originalXHRSend","send","originalXHRSetRequestHeader","setRequestHeader","openCallback","sendCallback","requestHeaderCallback","headerReceivedCallback","responseCallback","isInterceptorEnabled","XHRInterceptor","setOpenCallback","callback","setSendCallback","setHeaderReceivedCallback","setResponseCallback","setRequestHeaderCallback","enableInterception","method","url","apply","arguments","header","value","data","addEventListener","readyState","HEADERS_RECEIVED","contentTypeString","getResponseHeader","contentLengthString","responseContentType","responseSize","split","parseInt","getAllResponseHeaders","DONE","status","timeout","response","responseURL","responseType","disableInterception","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\n'use strict';\n\nconst XMLHttpRequest = require('XMLHttpRequest');\nconst originalXHROpen = XMLHttpRequest.prototype.open;\nconst originalXHRSend = XMLHttpRequest.prototype.send;\nconst originalXHRSetRequestHeader = XMLHttpRequest.prototype.setRequestHeader;\n\nlet openCallback;\nlet sendCallback;\nlet requestHeaderCallback;\nlet headerReceivedCallback;\nlet responseCallback;\n\nlet isInterceptorEnabled = false;\n\n/**\n * A network interceptor which monkey-patches XMLHttpRequest methods\n * to gather all network requests/responses, in order to show their\n * information in the React Native inspector development tool.\n * This supports interception with XMLHttpRequest API, including Fetch API\n * and any other third party libraries that depend on XMLHttpRequest.\n */\nconst XHRInterceptor = {\n  /**\n   * Invoked before XMLHttpRequest.open(...) is called.\n   */\n  setOpenCallback(callback) {\n    openCallback = callback;\n  },\n\n  /**\n   * Invoked before XMLHttpRequest.send(...) is called.\n   */\n  setSendCallback(callback) {\n    sendCallback = callback;\n  },\n\n  /**\n   * Invoked after xhr's readyState becomes xhr.HEADERS_RECEIVED.\n   */\n  setHeaderReceivedCallback(callback) {\n    headerReceivedCallback = callback;\n  },\n\n  /**\n   * Invoked after xhr's readyState becomes xhr.DONE.\n   */\n  setResponseCallback(callback) {\n    responseCallback = callback;\n  },\n\n  /**\n   * Invoked before XMLHttpRequest.setRequestHeader(...) is called.\n   */\n  setRequestHeaderCallback(callback) {\n    requestHeaderCallback = callback;\n  },\n\n  isInterceptorEnabled() {\n    return isInterceptorEnabled;\n  },\n\n  enableInterception() {\n    if (isInterceptorEnabled) {\n      return;\n    }\n    // Override `open` method for all XHR requests to intercept the request\n    // method and url, then pass them through the `openCallback`.\n    XMLHttpRequest.prototype.open = function(method, url) {\n      if (openCallback) {\n        openCallback(method, url, this);\n      }\n      originalXHROpen.apply(this, arguments);\n    };\n\n    // Override `setRequestHeader` method for all XHR requests to intercept\n    // the request headers, then pass them through the `requestHeaderCallback`.\n    XMLHttpRequest.prototype.setRequestHeader = function(header, value) {\n      if (requestHeaderCallback) {\n        requestHeaderCallback(header, value, this);\n      }\n      originalXHRSetRequestHeader.apply(this, arguments);\n    };\n\n    // Override `send` method of all XHR requests to intercept the data sent,\n    // register listeners to intercept the response, and invoke the callbacks.\n    XMLHttpRequest.prototype.send = function(data) {\n      if (sendCallback) {\n        sendCallback(data, this);\n      }\n      if (this.addEventListener) {\n        this.addEventListener(\n          'readystatechange',\n          () => {\n            if (!isInterceptorEnabled) {\n              return;\n            }\n            if (this.readyState === this.HEADERS_RECEIVED) {\n              const contentTypeString = this.getResponseHeader('Content-Type');\n              const contentLengthString = this.getResponseHeader(\n                'Content-Length',\n              );\n              let responseContentType, responseSize;\n              if (contentTypeString) {\n                responseContentType = contentTypeString.split(';')[0];\n              }\n              if (contentLengthString) {\n                responseSize = parseInt(contentLengthString, 10);\n              }\n              if (headerReceivedCallback) {\n                headerReceivedCallback(\n                  responseContentType,\n                  responseSize,\n                  this.getAllResponseHeaders(),\n                  this,\n                );\n              }\n            }\n            if (this.readyState === this.DONE) {\n              if (responseCallback) {\n                responseCallback(\n                  this.status,\n                  this.timeout,\n                  this.response,\n                  this.responseURL,\n                  this.responseType,\n                  this,\n                );\n              }\n            }\n          },\n          false,\n        );\n      }\n      originalXHRSend.apply(this, arguments);\n    };\n    isInterceptorEnabled = true;\n  },\n\n  // Unpatch XMLHttpRequest methods and remove the callbacks.\n  disableInterception() {\n    if (!isInterceptorEnabled) {\n      return;\n    }\n    isInterceptorEnabled = false;\n    XMLHttpRequest.prototype.send = originalXHRSend;\n    XMLHttpRequest.prototype.open = originalXHROpen;\n    XMLHttpRequest.prototype.setRequestHeader = originalXHRSetRequestHeader;\n    responseCallback = null;\n    openCallback = null;\n    sendCallback = null;\n    headerReceivedCallback = null;\n    requestHeaderCallback = null;\n  },\n};\n\nmodule.exports = XHRInterceptor;\n"]}]}