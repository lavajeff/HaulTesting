{"remainingRequest":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js??ref--5-2!/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/AppState/AppState.js","dependencies":[{"path":"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/AppState/AppState.js","mtime":1539700108130},{"path":"/Users/jeffrey/HaulTesting/node_modules/cache-loader/dist/cjs.js","mtime":1539652983212},{"path":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js","mtime":1539652983315},{"path":"/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js","mtime":1539615827828}],"contextDependencies":[],"result":["'use strict';var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _possibleConstructorReturn2=_interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));var _getPrototypeOf2=_interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));var _inherits2=_interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));(function(){var enterModule=require('react-hot-loader').enterModule;enterModule&&enterModule(module);})();var MissingNativeEventEmitterShim=require('MissingNativeEventEmitterShim');var NativeEventEmitter=require('NativeEventEmitter');var NativeModules=require('NativeModules');var RCTAppState=NativeModules.AppState;var logError=require('logError');var invariant=require('fbjs/lib/invariant');var AppState=function(_NativeEventEmitter){(0,_inherits2.default)(AppState,_NativeEventEmitter);function AppState(){var _this;(0,_classCallCheck2.default)(this,AppState);_this=(0,_possibleConstructorReturn2.default)(this,(0,_getPrototypeOf2.default)(AppState).call(this,RCTAppState));_this.isAvailable=true;_this.isAvailable=true;_this._eventHandlers={change:new Map(),memoryWarning:new Map()};_this.currentState=RCTAppState.initialAppState||'active';var eventUpdated=false;_this.addListener('appStateDidChange',function(appStateData){eventUpdated=true;_this.currentState=appStateData.app_state;});RCTAppState.getCurrentAppState(function(appStateData){if(!eventUpdated&&_this.currentState!==appStateData.app_state){_this.currentState=appStateData.app_state;_this.emit('appStateDidChange',appStateData);}},logError);return _this;}(0,_createClass2.default)(AppState,[{key:\"addEventListener\",value:function addEventListener(type,handler){invariant(['change','memoryWarning'].indexOf(type)!==-1,'Trying to subscribe to unknown event: \"%s\"',type);if(type==='change'){this._eventHandlers[type].set(handler,this.addListener('appStateDidChange',function(appStateData){handler(appStateData.app_state);}));}else if(type==='memoryWarning'){this._eventHandlers[type].set(handler,this.addListener('memoryWarning',handler));}}},{key:\"removeEventListener\",value:function removeEventListener(type,handler){invariant(['change','memoryWarning'].indexOf(type)!==-1,'Trying to remove listener for unknown event: \"%s\"',type);if(!this._eventHandlers[type].has(handler)){return;}this._eventHandlers[type].get(handler).remove();this._eventHandlers[type].delete(handler);}},{key:\"__reactstandin__regenerateByEval\",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code);}}]);return AppState;}(NativeEventEmitter);if(__DEV__&&!RCTAppState){var MissingNativeAppStateShim=function(_MissingNativeEventEm){(0,_inherits2.default)(MissingNativeAppStateShim,_MissingNativeEventEm);function MissingNativeAppStateShim(){(0,_classCallCheck2.default)(this,MissingNativeAppStateShim);return(0,_possibleConstructorReturn2.default)(this,(0,_getPrototypeOf2.default)(MissingNativeAppStateShim).call(this,'RCTAppState','AppState'));}(0,_createClass2.default)(MissingNativeAppStateShim,[{key:\"addEventListener\",value:function addEventListener(){this.throwMissingNativeModule();}},{key:\"removeEventListener\",value:function removeEventListener(){this.throwMissingNativeModule();}},{key:\"__reactstandin__regenerateByEval\",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code);}},{key:\"currentState\",get:function get(){this.throwMissingNativeModule();}}]);return MissingNativeAppStateShim;}(MissingNativeEventEmitterShim);AppState=new MissingNativeAppStateShim();}else{AppState=new AppState();}module.exports=AppState;;(function(){var reactHotLoader=require('react-hot-loader').default;var leaveModule=require('react-hot-loader').leaveModule;if(!reactHotLoader){return;}reactHotLoader.register(RCTAppState,\"RCTAppState\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/AppState/AppState.js\");reactHotLoader.register(AppState,\"AppState\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/AppState/AppState.js\");leaveModule(module);})();;",{"version":3,"sources":["/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/AppState/AppState.js"],"names":["MissingNativeEventEmitterShim","require","NativeEventEmitter","NativeModules","RCTAppState","AppState","logError","invariant","isAvailable","_eventHandlers","change","Map","memoryWarning","currentState","initialAppState","eventUpdated","addListener","appStateData","app_state","getCurrentAppState","emit","type","handler","indexOf","set","has","get","remove","delete","__DEV__","MissingNativeAppStateShim","throwMissingNativeModule","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst MissingNativeEventEmitterShim = require('MissingNativeEventEmitterShim');\nconst NativeEventEmitter = require('NativeEventEmitter');\nconst NativeModules = require('NativeModules');\nconst RCTAppState = NativeModules.AppState;\n\nconst logError = require('logError');\nconst invariant = require('fbjs/lib/invariant');\n\n/**\n * `AppState` can tell you if the app is in the foreground or background,\n * and notify you when the state changes.\n *\n * See http://facebook.github.io/react-native/docs/appstate.html\n */\nclass AppState extends NativeEventEmitter {\n  _eventHandlers: Object;\n  currentState: ?string;\n  isAvailable: boolean = true;\n\n  constructor() {\n    super(RCTAppState);\n\n    this.isAvailable = true;\n    this._eventHandlers = {\n      change: new Map(),\n      memoryWarning: new Map(),\n    };\n\n    // TODO: Remove the 'active' fallback after `initialAppState` is exported by\n    // the Android implementation.\n    this.currentState = RCTAppState.initialAppState || 'active';\n\n    let eventUpdated = false;\n\n    // TODO: this is a terrible solution - in order to ensure `currentState`\n    // prop is up to date, we have to register an observer that updates it\n    // whenever the state changes, even if nobody cares. We should just\n    // deprecate the `currentState` property and get rid of this.\n    this.addListener('appStateDidChange', appStateData => {\n      eventUpdated = true;\n      this.currentState = appStateData.app_state;\n    });\n\n    // TODO: see above - this request just populates the value of `currentState`\n    // when the module is first initialized. Would be better to get rid of the\n    // prop and expose `getCurrentAppState` method directly.\n    RCTAppState.getCurrentAppState(appStateData => {\n      // It's possible that the state will have changed here & listeners need to be notified\n      if (!eventUpdated && this.currentState !== appStateData.app_state) {\n        this.currentState = appStateData.app_state;\n        this.emit('appStateDidChange', appStateData);\n      }\n    }, logError);\n  }\n\n  // TODO: now that AppState is a subclass of NativeEventEmitter, we could\n  // deprecate `addEventListener` and `removeEventListener` and just use\n  // addListener` and `listener.remove()` directly. That will be a breaking\n  // change though, as both the method and event names are different\n  // (addListener events are currently required to be globally unique).\n  /**\n   * Add a handler to AppState changes by listening to the `change` event type\n   * and providing the handler.\n   *\n   * See http://facebook.github.io/react-native/docs/appstate.html#addeventlistener\n   */\n  addEventListener(type: string, handler: Function) {\n    invariant(\n      ['change', 'memoryWarning'].indexOf(type) !== -1,\n      'Trying to subscribe to unknown event: \"%s\"',\n      type,\n    );\n    if (type === 'change') {\n      this._eventHandlers[type].set(\n        handler,\n        this.addListener('appStateDidChange', appStateData => {\n          handler(appStateData.app_state);\n        }),\n      );\n    } else if (type === 'memoryWarning') {\n      this._eventHandlers[type].set(\n        handler,\n        this.addListener('memoryWarning', handler),\n      );\n    }\n  }\n\n  /**\n   * Remove a handler by passing the `change` event type and the handler.\n   *\n   * See http://facebook.github.io/react-native/docs/appstate.html#removeeventlistener\n   */\n  removeEventListener(type: string, handler: Function) {\n    invariant(\n      ['change', 'memoryWarning'].indexOf(type) !== -1,\n      'Trying to remove listener for unknown event: \"%s\"',\n      type,\n    );\n    if (!this._eventHandlers[type].has(handler)) {\n      return;\n    }\n    this._eventHandlers[type].get(handler).remove();\n    this._eventHandlers[type].delete(handler);\n  }\n}\n\nif (__DEV__ && !RCTAppState) {\n  class MissingNativeAppStateShim extends MissingNativeEventEmitterShim {\n    constructor() {\n      super('RCTAppState', 'AppState');\n    }\n\n    get currentState(): ?string {\n      this.throwMissingNativeModule();\n    }\n\n    addEventListener(...args: Array<any>) {\n      this.throwMissingNativeModule();\n    }\n\n    removeEventListener(...args: Array<any>) {\n      this.throwMissingNativeModule();\n    }\n  }\n\n  // This module depends on the native `RCTAppState` module. If you don't\n  // include it, `AppState.isAvailable` will return `false`, and any method\n  // calls will throw. We reassign the class variable to keep the autodoc\n  // generator happy.\n  AppState = new MissingNativeAppStateShim();\n} else {\n  AppState = new AppState();\n}\n\nmodule.exports = AppState;\n"]}]}