{"remainingRequest":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js??ref--5-2!/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Interaction/PanResponder.js","dependencies":[{"path":"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Interaction/PanResponder.js","mtime":1539700108130},{"path":"/Users/jeffrey/HaulTesting/node_modules/cache-loader/dist/cjs.js","mtime":1539652983212},{"path":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js","mtime":1539652983315},{"path":"/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js","mtime":1539615827828}],"contextDependencies":[],"result":["'use strict';(function(){var enterModule=require('react-hot-loader').enterModule;enterModule&&enterModule(module);})();var InteractionManager=require('./InteractionManager');var TouchHistoryMath=require('./TouchHistoryMath');var currentCentroidXOfTouchesChangedAfter=TouchHistoryMath.currentCentroidXOfTouchesChangedAfter;var currentCentroidYOfTouchesChangedAfter=TouchHistoryMath.currentCentroidYOfTouchesChangedAfter;var previousCentroidXOfTouchesChangedAfter=TouchHistoryMath.previousCentroidXOfTouchesChangedAfter;var previousCentroidYOfTouchesChangedAfter=TouchHistoryMath.previousCentroidYOfTouchesChangedAfter;var currentCentroidX=TouchHistoryMath.currentCentroidX;var currentCentroidY=TouchHistoryMath.currentCentroidY;var PanResponder={_initializeGestureState:function _initializeGestureState(gestureState){gestureState.moveX=0;gestureState.moveY=0;gestureState.x0=0;gestureState.y0=0;gestureState.dx=0;gestureState.dy=0;gestureState.vx=0;gestureState.vy=0;gestureState.numberActiveTouches=0;gestureState._accountsForMovesUpTo=0;},_updateGestureStateOnMove:function _updateGestureStateOnMove(gestureState,touchHistory){gestureState.numberActiveTouches=touchHistory.numberActiveTouches;gestureState.moveX=currentCentroidXOfTouchesChangedAfter(touchHistory,gestureState._accountsForMovesUpTo);gestureState.moveY=currentCentroidYOfTouchesChangedAfter(touchHistory,gestureState._accountsForMovesUpTo);var movedAfter=gestureState._accountsForMovesUpTo;var prevX=previousCentroidXOfTouchesChangedAfter(touchHistory,movedAfter);var x=currentCentroidXOfTouchesChangedAfter(touchHistory,movedAfter);var prevY=previousCentroidYOfTouchesChangedAfter(touchHistory,movedAfter);var y=currentCentroidYOfTouchesChangedAfter(touchHistory,movedAfter);var nextDX=gestureState.dx+(x-prevX);var nextDY=gestureState.dy+(y-prevY);var dt=touchHistory.mostRecentTimeStamp-gestureState._accountsForMovesUpTo;gestureState.vx=(nextDX-gestureState.dx)/dt;gestureState.vy=(nextDY-gestureState.dy)/dt;gestureState.dx=nextDX;gestureState.dy=nextDY;gestureState._accountsForMovesUpTo=touchHistory.mostRecentTimeStamp;},create:function create(config){var interactionState={handle:null};var gestureState={stateID:Math.random()};PanResponder._initializeGestureState(gestureState);var panHandlers={onStartShouldSetResponder:function onStartShouldSetResponder(e){return config.onStartShouldSetPanResponder===undefined?false:config.onStartShouldSetPanResponder(e,gestureState);},onMoveShouldSetResponder:function onMoveShouldSetResponder(e){return config.onMoveShouldSetPanResponder===undefined?false:config.onMoveShouldSetPanResponder(e,gestureState);},onStartShouldSetResponderCapture:function onStartShouldSetResponderCapture(e){if(e.nativeEvent.touches.length===1){PanResponder._initializeGestureState(gestureState);}gestureState.numberActiveTouches=e.touchHistory.numberActiveTouches;return config.onStartShouldSetPanResponderCapture!==undefined?config.onStartShouldSetPanResponderCapture(e,gestureState):false;},onMoveShouldSetResponderCapture:function onMoveShouldSetResponderCapture(e){var touchHistory=e.touchHistory;if(gestureState._accountsForMovesUpTo===touchHistory.mostRecentTimeStamp){return false;}PanResponder._updateGestureStateOnMove(gestureState,touchHistory);return config.onMoveShouldSetPanResponderCapture?config.onMoveShouldSetPanResponderCapture(e,gestureState):false;},onResponderGrant:function onResponderGrant(e){if(!interactionState.handle){interactionState.handle=InteractionManager.createInteractionHandle();}gestureState.x0=currentCentroidX(e.touchHistory);gestureState.y0=currentCentroidY(e.touchHistory);gestureState.dx=0;gestureState.dy=0;if(config.onPanResponderGrant){config.onPanResponderGrant(e,gestureState);}return config.onShouldBlockNativeResponder===undefined?true:config.onShouldBlockNativeResponder();},onResponderReject:function onResponderReject(e){clearInteractionHandle(interactionState,config.onPanResponderReject,e,gestureState);},onResponderRelease:function onResponderRelease(e){clearInteractionHandle(interactionState,config.onPanResponderRelease,e,gestureState);PanResponder._initializeGestureState(gestureState);},onResponderStart:function onResponderStart(e){var touchHistory=e.touchHistory;gestureState.numberActiveTouches=touchHistory.numberActiveTouches;if(config.onPanResponderStart){config.onPanResponderStart(e,gestureState);}},onResponderMove:function onResponderMove(e){var touchHistory=e.touchHistory;if(gestureState._accountsForMovesUpTo===touchHistory.mostRecentTimeStamp){return;}PanResponder._updateGestureStateOnMove(gestureState,touchHistory);if(config.onPanResponderMove){config.onPanResponderMove(e,gestureState);}},onResponderEnd:function onResponderEnd(e){var touchHistory=e.touchHistory;gestureState.numberActiveTouches=touchHistory.numberActiveTouches;clearInteractionHandle(interactionState,config.onPanResponderEnd,e,gestureState);},onResponderTerminate:function onResponderTerminate(e){clearInteractionHandle(interactionState,config.onPanResponderTerminate,e,gestureState);PanResponder._initializeGestureState(gestureState);},onResponderTerminationRequest:function onResponderTerminationRequest(e){return config.onPanResponderTerminationRequest===undefined?true:config.onPanResponderTerminationRequest(e,gestureState);}};return{panHandlers:panHandlers,getInteractionHandle:function getInteractionHandle(){return interactionState.handle;}};}};function clearInteractionHandle(interactionState,callback,event,gestureState){if(interactionState.handle){InteractionManager.clearInteractionHandle(interactionState.handle);interactionState.handle=null;}if(callback){callback(event,gestureState);}}module.exports=PanResponder;;(function(){var reactHotLoader=require('react-hot-loader').default;var leaveModule=require('react-hot-loader').leaveModule;if(!reactHotLoader){return;}reactHotLoader.register(currentCentroidXOfTouchesChangedAfter,\"currentCentroidXOfTouchesChangedAfter\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Interaction/PanResponder.js\");reactHotLoader.register(currentCentroidYOfTouchesChangedAfter,\"currentCentroidYOfTouchesChangedAfter\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Interaction/PanResponder.js\");reactHotLoader.register(previousCentroidXOfTouchesChangedAfter,\"previousCentroidXOfTouchesChangedAfter\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Interaction/PanResponder.js\");reactHotLoader.register(previousCentroidYOfTouchesChangedAfter,\"previousCentroidYOfTouchesChangedAfter\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Interaction/PanResponder.js\");reactHotLoader.register(currentCentroidX,\"currentCentroidX\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Interaction/PanResponder.js\");reactHotLoader.register(currentCentroidY,\"currentCentroidY\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Interaction/PanResponder.js\");reactHotLoader.register(PanResponder,\"PanResponder\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Interaction/PanResponder.js\");reactHotLoader.register(clearInteractionHandle,\"clearInteractionHandle\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Interaction/PanResponder.js\");leaveModule(module);})();;",{"version":3,"sources":["/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Interaction/PanResponder.js"],"names":["InteractionManager","require","TouchHistoryMath","currentCentroidXOfTouchesChangedAfter","currentCentroidYOfTouchesChangedAfter","previousCentroidXOfTouchesChangedAfter","previousCentroidYOfTouchesChangedAfter","currentCentroidX","currentCentroidY","PanResponder","_initializeGestureState","gestureState","moveX","moveY","x0","y0","dx","dy","vx","vy","numberActiveTouches","_accountsForMovesUpTo","_updateGestureStateOnMove","touchHistory","movedAfter","prevX","x","prevY","y","nextDX","nextDY","dt","mostRecentTimeStamp","create","config","interactionState","handle","stateID","Math","random","panHandlers","onStartShouldSetResponder","e","onStartShouldSetPanResponder","undefined","onMoveShouldSetResponder","onMoveShouldSetPanResponder","onStartShouldSetResponderCapture","nativeEvent","touches","length","onStartShouldSetPanResponderCapture","onMoveShouldSetResponderCapture","onMoveShouldSetPanResponderCapture","onResponderGrant","createInteractionHandle","onPanResponderGrant","onShouldBlockNativeResponder","onResponderReject","clearInteractionHandle","onPanResponderReject","onResponderRelease","onPanResponderRelease","onResponderStart","onPanResponderStart","onResponderMove","onPanResponderMove","onResponderEnd","onPanResponderEnd","onResponderTerminate","onPanResponderTerminate","onResponderTerminationRequest","onPanResponderTerminationRequest","getInteractionHandle","callback","event","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\n'use strict';\n\nconst InteractionManager = require('./InteractionManager');\nconst TouchHistoryMath = require('./TouchHistoryMath');\n\nconst currentCentroidXOfTouchesChangedAfter =\n  TouchHistoryMath.currentCentroidXOfTouchesChangedAfter;\nconst currentCentroidYOfTouchesChangedAfter =\n  TouchHistoryMath.currentCentroidYOfTouchesChangedAfter;\nconst previousCentroidXOfTouchesChangedAfter =\n  TouchHistoryMath.previousCentroidXOfTouchesChangedAfter;\nconst previousCentroidYOfTouchesChangedAfter =\n  TouchHistoryMath.previousCentroidYOfTouchesChangedAfter;\nconst currentCentroidX = TouchHistoryMath.currentCentroidX;\nconst currentCentroidY = TouchHistoryMath.currentCentroidY;\n\n/**\n * `PanResponder` reconciles several touches into a single gesture. It makes\n * single-touch gestures resilient to extra touches, and can be used to\n * recognize simple multi-touch gestures.\n *\n * By default, `PanResponder` holds an `InteractionManager` handle to block\n * long-running JS events from interrupting active gestures.\n *\n * It provides a predictable wrapper of the responder handlers provided by the\n * [gesture responder system](docs/gesture-responder-system.html).\n * For each handler, it provides a new `gestureState` object alongside the\n * native event object:\n *\n * ```\n * onPanResponderMove: (event, gestureState) => {}\n * ```\n *\n * A native event is a synthetic touch event with the following form:\n *\n *  - `nativeEvent`\n *      + `changedTouches` - Array of all touch events that have changed since the last event\n *      + `identifier` - The ID of the touch\n *      + `locationX` - The X position of the touch, relative to the element\n *      + `locationY` - The Y position of the touch, relative to the element\n *      + `pageX` - The X position of the touch, relative to the root element\n *      + `pageY` - The Y position of the touch, relative to the root element\n *      + `target` - The node id of the element receiving the touch event\n *      + `timestamp` - A time identifier for the touch, useful for velocity calculation\n *      + `touches` - Array of all current touches on the screen\n *\n * A `gestureState` object has the following:\n *\n *  - `stateID` - ID of the gestureState- persisted as long as there at least\n *     one touch on screen\n *  - `moveX` - the latest screen coordinates of the recently-moved touch\n *  - `moveY` - the latest screen coordinates of the recently-moved touch\n *  - `x0` - the screen coordinates of the responder grant\n *  - `y0` - the screen coordinates of the responder grant\n *  - `dx` - accumulated distance of the gesture since the touch started\n *  - `dy` - accumulated distance of the gesture since the touch started\n *  - `vx` - current velocity of the gesture\n *  - `vy` - current velocity of the gesture\n *  - `numberActiveTouches` - Number of touches currently on screen\n *\n * ### Basic Usage\n *\n * ```\n *   componentWillMount: function() {\n *     this._panResponder = PanResponder.create({\n *       // Ask to be the responder:\n *       onStartShouldSetPanResponder: (evt, gestureState) => true,\n *       onStartShouldSetPanResponderCapture: (evt, gestureState) => true,\n *       onMoveShouldSetPanResponder: (evt, gestureState) => true,\n *       onMoveShouldSetPanResponderCapture: (evt, gestureState) => true,\n *\n *       onPanResponderGrant: (evt, gestureState) => {\n *         // The gesture has started. Show visual feedback so the user knows\n *         // what is happening!\n *\n *         // gestureState.d{x,y} will be set to zero now\n *       },\n *       onPanResponderMove: (evt, gestureState) => {\n *         // The most recent move distance is gestureState.move{X,Y}\n *\n *         // The accumulated gesture distance since becoming responder is\n *         // gestureState.d{x,y}\n *       },\n *       onPanResponderTerminationRequest: (evt, gestureState) => true,\n *       onPanResponderRelease: (evt, gestureState) => {\n *         // The user has released all touches while this view is the\n *         // responder. This typically means a gesture has succeeded\n *       },\n *       onPanResponderTerminate: (evt, gestureState) => {\n *         // Another component has become the responder, so this gesture\n *         // should be cancelled\n *       },\n *       onShouldBlockNativeResponder: (evt, gestureState) => {\n *         // Returns whether this component should block native components from becoming the JS\n *         // responder. Returns true by default. Is currently only supported on android.\n *         return true;\n *       },\n *     });\n *   },\n *\n *   render: function() {\n *     return (\n *       <View {...this._panResponder.panHandlers} />\n *     );\n *   },\n *\n * ```\n *\n * ### Working Example\n *\n * To see it in action, try the\n * [PanResponder example in RNTester](https://github.com/facebook/react-native/blob/master/RNTester/js/PanResponderExample.js)\n */\n\nconst PanResponder = {\n  /**\n   *\n   * A graphical explanation of the touch data flow:\n   *\n   * +----------------------------+             +--------------------------------+\n   * | ResponderTouchHistoryStore |             |TouchHistoryMath                |\n   * +----------------------------+             +----------+---------------------+\n   * |Global store of touchHistory|             |Allocation-less math util       |\n   * |including activeness, start |             |on touch history (centroids     |\n   * |position, prev/cur position.|             |and multitouch movement etc)    |\n   * |                            |             |                                |\n   * +----^-----------------------+             +----^---------------------------+\n   *      |                                          |\n   *      | (records relevant history                |\n   *      |  of touches relevant for                 |\n   *      |  implementing higher level               |\n   *      |  gestures)                               |\n   *      |                                          |\n   * +----+-----------------------+             +----|---------------------------+\n   * | ResponderEventPlugin       |             |    |   Your App/Component      |\n   * +----------------------------+             +----|---------------------------+\n   * |Negotiates which view gets  | Low level   |    |             High level    |\n   * |onResponderMove events.     | events w/   |  +-+-------+     events w/     |\n   * |Also records history into   | touchHistory|  |   Pan   |     multitouch +  |\n   * |ResponderTouchHistoryStore. +---------------->Responder+-----> accumulative|\n   * +----------------------------+ attached to |  |         |     distance and  |\n   *                                 each event |  +---------+     velocity.     |\n   *                                            |                                |\n   *                                            |                                |\n   *                                            +--------------------------------+\n   *\n   *\n   *\n   * Gesture that calculates cumulative movement over time in a way that just\n   * \"does the right thing\" for multiple touches. The \"right thing\" is very\n   * nuanced. When moving two touches in opposite directions, the cumulative\n   * distance is zero in each dimension. When two touches move in parallel five\n   * pixels in the same direction, the cumulative distance is five, not ten. If\n   * two touches start, one moves five in a direction, then stops and the other\n   * touch moves fives in the same direction, the cumulative distance is ten.\n   *\n   * This logic requires a kind of processing of time \"clusters\" of touch events\n   * so that two touch moves that essentially occur in parallel but move every\n   * other frame respectively, are considered part of the same movement.\n   *\n   * Explanation of some of the non-obvious fields:\n   *\n   * - moveX/moveY: If no move event has been observed, then `(moveX, moveY)` is\n   *   invalid. If a move event has been observed, `(moveX, moveY)` is the\n   *   centroid of the most recently moved \"cluster\" of active touches.\n   *   (Currently all move have the same timeStamp, but later we should add some\n   *   threshold for what is considered to be \"moving\"). If a palm is\n   *   accidentally counted as a touch, but a finger is moving greatly, the palm\n   *   will move slightly, but we only want to count the single moving touch.\n   * - x0/y0: Centroid location (non-cumulative) at the time of becoming\n   *   responder.\n   * - dx/dy: Cumulative touch distance - not the same thing as sum of each touch\n   *   distance. Accounts for touch moves that are clustered together in time,\n   *   moving the same direction. Only valid when currently responder (otherwise,\n   *   it only represents the drag distance below the threshold).\n   * - vx/vy: Velocity.\n   */\n\n  _initializeGestureState: function(gestureState) {\n    gestureState.moveX = 0;\n    gestureState.moveY = 0;\n    gestureState.x0 = 0;\n    gestureState.y0 = 0;\n    gestureState.dx = 0;\n    gestureState.dy = 0;\n    gestureState.vx = 0;\n    gestureState.vy = 0;\n    gestureState.numberActiveTouches = 0;\n    // All `gestureState` accounts for timeStamps up until:\n    gestureState._accountsForMovesUpTo = 0;\n  },\n\n  /**\n   * This is nuanced and is necessary. It is incorrect to continuously take all\n   * active *and* recently moved touches, find the centroid, and track how that\n   * result changes over time. Instead, we must take all recently moved\n   * touches, and calculate how the centroid has changed just for those\n   * recently moved touches, and append that change to an accumulator. This is\n   * to (at least) handle the case where the user is moving three fingers, and\n   * then one of the fingers stops but the other two continue.\n   *\n   * This is very different than taking all of the recently moved touches and\n   * storing their centroid as `dx/dy`. For correctness, we must *accumulate\n   * changes* in the centroid of recently moved touches.\n   *\n   * There is also some nuance with how we handle multiple moved touches in a\n   * single event. With the way `ReactNativeEventEmitter` dispatches touches as\n   * individual events, multiple touches generate two 'move' events, each of\n   * them triggering `onResponderMove`. But with the way `PanResponder` works,\n   * all of the gesture inference is performed on the first dispatch, since it\n   * looks at all of the touches (even the ones for which there hasn't been a\n   * native dispatch yet). Therefore, `PanResponder` does not call\n   * `onResponderMove` passed the first dispatch. This diverges from the\n   * typical responder callback pattern (without using `PanResponder`), but\n   * avoids more dispatches than necessary.\n   */\n  _updateGestureStateOnMove: function(gestureState, touchHistory) {\n    gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n    gestureState.moveX = currentCentroidXOfTouchesChangedAfter(\n      touchHistory,\n      gestureState._accountsForMovesUpTo,\n    );\n    gestureState.moveY = currentCentroidYOfTouchesChangedAfter(\n      touchHistory,\n      gestureState._accountsForMovesUpTo,\n    );\n    const movedAfter = gestureState._accountsForMovesUpTo;\n    const prevX = previousCentroidXOfTouchesChangedAfter(\n      touchHistory,\n      movedAfter,\n    );\n    const x = currentCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);\n    const prevY = previousCentroidYOfTouchesChangedAfter(\n      touchHistory,\n      movedAfter,\n    );\n    const y = currentCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);\n    const nextDX = gestureState.dx + (x - prevX);\n    const nextDY = gestureState.dy + (y - prevY);\n\n    // TODO: This must be filtered intelligently.\n    const dt =\n      touchHistory.mostRecentTimeStamp - gestureState._accountsForMovesUpTo;\n    gestureState.vx = (nextDX - gestureState.dx) / dt;\n    gestureState.vy = (nextDY - gestureState.dy) / dt;\n\n    gestureState.dx = nextDX;\n    gestureState.dy = nextDY;\n    gestureState._accountsForMovesUpTo = touchHistory.mostRecentTimeStamp;\n  },\n\n  /**\n   * @param {object} config Enhanced versions of all of the responder callbacks\n   * that provide not only the typical `ResponderSyntheticEvent`, but also the\n   * `PanResponder` gesture state.  Simply replace the word `Responder` with\n   * `PanResponder` in each of the typical `onResponder*` callbacks. For\n   * example, the `config` object would look like:\n   *\n   *  - `onMoveShouldSetPanResponder: (e, gestureState) => {...}`\n   *  - `onMoveShouldSetPanResponderCapture: (e, gestureState) => {...}`\n   *  - `onStartShouldSetPanResponder: (e, gestureState) => {...}`\n   *  - `onStartShouldSetPanResponderCapture: (e, gestureState) => {...}`\n   *  - `onPanResponderReject: (e, gestureState) => {...}`\n   *  - `onPanResponderGrant: (e, gestureState) => {...}`\n   *  - `onPanResponderStart: (e, gestureState) => {...}`\n   *  - `onPanResponderEnd: (e, gestureState) => {...}`\n   *  - `onPanResponderRelease: (e, gestureState) => {...}`\n   *  - `onPanResponderMove: (e, gestureState) => {...}`\n   *  - `onPanResponderTerminate: (e, gestureState) => {...}`\n   *  - `onPanResponderTerminationRequest: (e, gestureState) => {...}`\n   *  - `onShouldBlockNativeResponder: (e, gestureState) => {...}`\n   *\n   *  In general, for events that have capture equivalents, we update the\n   *  gestureState once in the capture phase and can use it in the bubble phase\n   *  as well.\n   *\n   *  Be careful with onStartShould* callbacks. They only reflect updated\n   *  `gestureState` for start/end events that bubble/capture to the Node.\n   *  Once the node is the responder, you can rely on every start/end event\n   *  being processed by the gesture and `gestureState` being updated\n   *  accordingly. (numberActiveTouches) may not be totally accurate unless you\n   *  are the responder.\n   */\n  create: function(config) {\n    const interactionState = {\n      handle: (null: ?number),\n    };\n    const gestureState = {\n      // Useful for debugging\n      stateID: Math.random(),\n    };\n    PanResponder._initializeGestureState(gestureState);\n    const panHandlers = {\n      onStartShouldSetResponder: function(e) {\n        return config.onStartShouldSetPanResponder === undefined\n          ? false\n          : config.onStartShouldSetPanResponder(e, gestureState);\n      },\n      onMoveShouldSetResponder: function(e) {\n        return config.onMoveShouldSetPanResponder === undefined\n          ? false\n          : config.onMoveShouldSetPanResponder(e, gestureState);\n      },\n      onStartShouldSetResponderCapture: function(e) {\n        // TODO: Actually, we should reinitialize the state any time\n        // touches.length increases from 0 active to > 0 active.\n        if (e.nativeEvent.touches.length === 1) {\n          PanResponder._initializeGestureState(gestureState);\n        }\n        gestureState.numberActiveTouches = e.touchHistory.numberActiveTouches;\n        return config.onStartShouldSetPanResponderCapture !== undefined\n          ? config.onStartShouldSetPanResponderCapture(e, gestureState)\n          : false;\n      },\n\n      onMoveShouldSetResponderCapture: function(e) {\n        const touchHistory = e.touchHistory;\n        // Responder system incorrectly dispatches should* to current responder\n        // Filter out any touch moves past the first one - we would have\n        // already processed multi-touch geometry during the first event.\n        if (\n          gestureState._accountsForMovesUpTo ===\n          touchHistory.mostRecentTimeStamp\n        ) {\n          return false;\n        }\n        PanResponder._updateGestureStateOnMove(gestureState, touchHistory);\n        return config.onMoveShouldSetPanResponderCapture\n          ? config.onMoveShouldSetPanResponderCapture(e, gestureState)\n          : false;\n      },\n\n      onResponderGrant: function(e) {\n        if (!interactionState.handle) {\n          interactionState.handle = InteractionManager.createInteractionHandle();\n        }\n        gestureState.x0 = currentCentroidX(e.touchHistory);\n        gestureState.y0 = currentCentroidY(e.touchHistory);\n        gestureState.dx = 0;\n        gestureState.dy = 0;\n        if (config.onPanResponderGrant) {\n          config.onPanResponderGrant(e, gestureState);\n        }\n        // TODO: t7467124 investigate if this can be removed\n        return config.onShouldBlockNativeResponder === undefined\n          ? true\n          : config.onShouldBlockNativeResponder();\n      },\n\n      onResponderReject: function(e) {\n        clearInteractionHandle(\n          interactionState,\n          config.onPanResponderReject,\n          e,\n          gestureState,\n        );\n      },\n\n      onResponderRelease: function(e) {\n        clearInteractionHandle(\n          interactionState,\n          config.onPanResponderRelease,\n          e,\n          gestureState,\n        );\n        PanResponder._initializeGestureState(gestureState);\n      },\n\n      onResponderStart: function(e) {\n        const touchHistory = e.touchHistory;\n        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n        if (config.onPanResponderStart) {\n          config.onPanResponderStart(e, gestureState);\n        }\n      },\n\n      onResponderMove: function(e) {\n        const touchHistory = e.touchHistory;\n        // Guard against the dispatch of two touch moves when there are two\n        // simultaneously changed touches.\n        if (\n          gestureState._accountsForMovesUpTo ===\n          touchHistory.mostRecentTimeStamp\n        ) {\n          return;\n        }\n        // Filter out any touch moves past the first one - we would have\n        // already processed multi-touch geometry during the first event.\n        PanResponder._updateGestureStateOnMove(gestureState, touchHistory);\n        if (config.onPanResponderMove) {\n          config.onPanResponderMove(e, gestureState);\n        }\n      },\n\n      onResponderEnd: function(e) {\n        const touchHistory = e.touchHistory;\n        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n        clearInteractionHandle(\n          interactionState,\n          config.onPanResponderEnd,\n          e,\n          gestureState,\n        );\n      },\n\n      onResponderTerminate: function(e) {\n        clearInteractionHandle(\n          interactionState,\n          config.onPanResponderTerminate,\n          e,\n          gestureState,\n        );\n        PanResponder._initializeGestureState(gestureState);\n      },\n\n      onResponderTerminationRequest: function(e) {\n        return config.onPanResponderTerminationRequest === undefined\n          ? true\n          : config.onPanResponderTerminationRequest(e, gestureState);\n      },\n    };\n    return {\n      panHandlers,\n      getInteractionHandle(): ?number {\n        return interactionState.handle;\n      },\n    };\n  },\n};\n\nfunction clearInteractionHandle(\n  interactionState: {handle: ?number},\n  callback: Function,\n  event: Object,\n  gestureState: Object,\n) {\n  if (interactionState.handle) {\n    InteractionManager.clearInteractionHandle(interactionState.handle);\n    interactionState.handle = null;\n  }\n  if (callback) {\n    callback(event, gestureState);\n  }\n}\n\nmodule.exports = PanResponder;\n"]}]}