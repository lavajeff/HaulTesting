{"remainingRequest":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js??ref--5-2!/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/AccessibilityInfo/AccessibilityInfo.ios.js","dependencies":[{"path":"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/AccessibilityInfo/AccessibilityInfo.ios.js","mtime":1539700108130},{"path":"/Users/jeffrey/HaulTesting/node_modules/cache-loader/dist/cjs.js","mtime":1539652983212},{"path":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js","mtime":1539652983315},{"path":"/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js","mtime":1539615827828}],"contextDependencies":[],"result":["'use strict';(function(){var enterModule=require('react-hot-loader').enterModule;enterModule&&enterModule(module);})();var NativeModules=require('NativeModules');var Promise=require('Promise');var RCTDeviceEventEmitter=require('RCTDeviceEventEmitter');var AccessibilityManager=NativeModules.AccessibilityManager;var VOICE_OVER_EVENT='voiceOverDidChange';var ANNOUNCEMENT_DID_FINISH_EVENT='announcementDidFinish';var _subscriptions=new Map();var AccessibilityInfo={fetch:function fetch(){return new Promise(function(resolve,reject){AccessibilityManager.getCurrentVoiceOverState(resolve,reject);});},addEventListener:function addEventListener(eventName,handler){var listener;if(eventName==='change'){listener=RCTDeviceEventEmitter.addListener(VOICE_OVER_EVENT,handler);}else if(eventName==='announcementFinished'){listener=RCTDeviceEventEmitter.addListener(ANNOUNCEMENT_DID_FINISH_EVENT,handler);}_subscriptions.set(handler,listener);return{remove:AccessibilityInfo.removeEventListener.bind(null,eventName,handler)};},setAccessibilityFocus:function setAccessibilityFocus(reactTag){AccessibilityManager.setAccessibilityFocus(reactTag);},announceForAccessibility:function announceForAccessibility(announcement){AccessibilityManager.announceForAccessibility(announcement);},removeEventListener:function removeEventListener(eventName,handler){var listener=_subscriptions.get(handler);if(!listener){return;}listener.remove();_subscriptions.delete(handler);}};module.exports=AccessibilityInfo;;(function(){var reactHotLoader=require('react-hot-loader').default;var leaveModule=require('react-hot-loader').leaveModule;if(!reactHotLoader){return;}reactHotLoader.register(AccessibilityManager,\"AccessibilityManager\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/AccessibilityInfo/AccessibilityInfo.ios.js\");reactHotLoader.register(VOICE_OVER_EVENT,\"VOICE_OVER_EVENT\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/AccessibilityInfo/AccessibilityInfo.ios.js\");reactHotLoader.register(ANNOUNCEMENT_DID_FINISH_EVENT,\"ANNOUNCEMENT_DID_FINISH_EVENT\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/AccessibilityInfo/AccessibilityInfo.ios.js\");reactHotLoader.register(_subscriptions,\"_subscriptions\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/AccessibilityInfo/AccessibilityInfo.ios.js\");reactHotLoader.register(AccessibilityInfo,\"AccessibilityInfo\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/AccessibilityInfo/AccessibilityInfo.ios.js\");leaveModule(module);})();;",{"version":3,"sources":["/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/AccessibilityInfo/AccessibilityInfo.ios.js"],"names":["NativeModules","require","Promise","RCTDeviceEventEmitter","AccessibilityManager","VOICE_OVER_EVENT","ANNOUNCEMENT_DID_FINISH_EVENT","_subscriptions","Map","AccessibilityInfo","fetch","resolve","reject","getCurrentVoiceOverState","addEventListener","eventName","handler","listener","addListener","set","remove","removeEventListener","bind","setAccessibilityFocus","reactTag","announceForAccessibility","announcement","get","delete","module","exports"],"mappings":"AAUA,a,0GAEA,GAAMA,CAAAA,aAAa,CAAGC,OAAO,CAAC,eAAD,CAA7B,CACA,GAAMC,CAAAA,OAAO,CAAGD,OAAO,CAAC,SAAD,CAAvB,CACA,GAAME,CAAAA,qBAAqB,CAAGF,OAAO,CAAC,uBAAD,CAArC,CAEA,GAAMG,CAAAA,oBAAoB,CAAGJ,aAAa,CAACI,oBAA3C,CAEA,GAAMC,CAAAA,gBAAgB,CAAG,oBAAzB,CACA,GAAMC,CAAAA,6BAA6B,CAAG,uBAAtC,CAOA,GAAMC,CAAAA,cAAc,CAAG,GAAIC,CAAAA,GAAJ,EAAvB,CAWA,GAAMC,CAAAA,iBAAiB,CAAG,CASxBC,KAAK,CAAE,gBAAoB,CACzB,MAAO,IAAIR,CAAAA,OAAJ,CAAY,SAACS,OAAD,CAAUC,MAAV,CAAqB,CACtCR,oBAAoB,CAACS,wBAArB,CAA8CF,OAA9C,CAAuDC,MAAvD,EACD,CAFM,CAAP,CAGD,CAbuB,CA8BxBE,gBAAgB,CAAE,0BAChBC,SADgB,CAEhBC,OAFgB,CAGR,CACR,GAAIC,CAAAA,QAAJ,CAEA,GAAIF,SAAS,GAAK,QAAlB,CAA4B,CAC1BE,QAAQ,CAAGd,qBAAqB,CAACe,WAAtB,CAAkCb,gBAAlC,CAAoDW,OAApD,CAAX,CACD,CAFD,IAEO,IAAID,SAAS,GAAK,sBAAlB,CAA0C,CAC/CE,QAAQ,CAAGd,qBAAqB,CAACe,WAAtB,CACTZ,6BADS,CAETU,OAFS,CAAX,CAID,CAEDT,cAAc,CAACY,GAAf,CAAmBH,OAAnB,CAA4BC,QAA5B,EACA,MAAO,CACLG,MAAM,CAAEX,iBAAiB,CAACY,mBAAlB,CAAsCC,IAAtC,CACN,IADM,CAENP,SAFM,CAGNC,OAHM,CADH,CAAP,CAOD,CArDuB,CA4DxBO,qBAAqB,CAAE,+BAASC,QAAT,CAAiC,CACtDpB,oBAAoB,CAACmB,qBAArB,CAA2CC,QAA3C,EACD,CA9DuB,CAuExBC,wBAAwB,CAAE,kCAASC,YAAT,CAAqC,CAC7DtB,oBAAoB,CAACqB,wBAArB,CAA8CC,YAA9C,EACD,CAzEuB,CAgFxBL,mBAAmB,CAAE,6BACnBN,SADmB,CAEnBC,OAFmB,CAGb,CACN,GAAMC,CAAAA,QAAQ,CAAGV,cAAc,CAACoB,GAAf,CAAmBX,OAAnB,CAAjB,CACA,GAAI,CAACC,QAAL,CAAe,CACb,OACD,CACDA,QAAQ,CAACG,MAAT,GACAb,cAAc,CAACqB,MAAf,CAAsBZ,OAAtB,EACD,CA1FuB,CAA1B,CA6FAa,MAAM,CAACC,OAAP,CAAiBrB,iBAAjB,C,gLAlHML,oB,wKAEAC,gB,oKACAC,6B,iLAOAC,c,kKAWAE,iB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst NativeModules = require('NativeModules');\nconst Promise = require('Promise');\nconst RCTDeviceEventEmitter = require('RCTDeviceEventEmitter');\n\nconst AccessibilityManager = NativeModules.AccessibilityManager;\n\nconst VOICE_OVER_EVENT = 'voiceOverDidChange';\nconst ANNOUNCEMENT_DID_FINISH_EVENT = 'announcementDidFinish';\n\ntype ChangeEventName = $Enum<{\n  change: string,\n  announcementFinished: string,\n}>;\n\nconst _subscriptions = new Map();\n\n/**\n * Sometimes it's useful to know whether or not the device has a screen reader\n * that is currently active. The `AccessibilityInfo` API is designed for this\n * purpose. You can use it to query the current state of the screen reader as\n * well as to register to be notified when the state of the screen reader\n * changes.\n *\n * See http://facebook.github.io/react-native/docs/accessibilityinfo.html\n */\nconst AccessibilityInfo = {\n  /**\n   * Query whether a screen reader is currently enabled.\n   *\n   * Returns a promise which resolves to a boolean.\n   * The result is `true` when a screen reader is enabledand `false` otherwise.\n   *\n   * See http://facebook.github.io/react-native/docs/accessibilityinfo.html#fetch\n   */\n  fetch: function(): Promise {\n    return new Promise((resolve, reject) => {\n      AccessibilityManager.getCurrentVoiceOverState(resolve, reject);\n    });\n  },\n\n  /**\n   * Add an event handler. Supported events:\n   *\n   * - `change`: Fires when the state of the screen reader changes. The argument\n   *   to the event handler is a boolean. The boolean is `true` when a screen\n   *   reader is enabled and `false` otherwise.\n   * - `announcementFinished`: iOS-only event. Fires when the screen reader has\n   *   finished making an announcement. The argument to the event handler is a\n   *   dictionary with these keys:\n   *     - `announcement`: The string announced by the screen reader.\n   *     - `success`: A boolean indicating whether the announcement was\n   *       successfully made.\n   *\n   * See http://facebook.github.io/react-native/docs/accessibilityinfo.html#addeventlistener\n   */\n  addEventListener: function(\n    eventName: ChangeEventName,\n    handler: Function,\n  ): Object {\n    let listener;\n\n    if (eventName === 'change') {\n      listener = RCTDeviceEventEmitter.addListener(VOICE_OVER_EVENT, handler);\n    } else if (eventName === 'announcementFinished') {\n      listener = RCTDeviceEventEmitter.addListener(\n        ANNOUNCEMENT_DID_FINISH_EVENT,\n        handler,\n      );\n    }\n\n    _subscriptions.set(handler, listener);\n    return {\n      remove: AccessibilityInfo.removeEventListener.bind(\n        null,\n        eventName,\n        handler,\n      ),\n    };\n  },\n\n  /**\n   * Set accessibility focus to a react component.\n   *\n   * See http://facebook.github.io/react-native/docs/accessibilityinfo.html#setaccessibilityfocus\n   */\n  setAccessibilityFocus: function(reactTag: number): void {\n    AccessibilityManager.setAccessibilityFocus(reactTag);\n  },\n\n  /**\n   * Post a string to be announced by the screen reader.\n   *\n   * @platform ios\n   *\n   * See http://facebook.github.io/react-native/docs/accessibilityinfo.html#announceforaccessibility\n   */\n  announceForAccessibility: function(announcement: string): void {\n    AccessibilityManager.announceForAccessibility(announcement);\n  },\n\n  /**\n   * Remove an event handler.\n   *\n   * See http://facebook.github.io/react-native/docs/accessibilityinfo.html#removeeventlistener\n   */\n  removeEventListener: function(\n    eventName: ChangeEventName,\n    handler: Function,\n  ): void {\n    const listener = _subscriptions.get(handler);\n    if (!listener) {\n      return;\n    }\n    listener.remove();\n    _subscriptions.delete(handler);\n  },\n};\n\nmodule.exports = AccessibilityInfo;\n"]}]}