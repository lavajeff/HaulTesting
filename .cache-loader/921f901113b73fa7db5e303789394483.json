{"remainingRequest":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js??ref--5-2!/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Storage/AsyncStorage.js","dependencies":[{"path":"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Storage/AsyncStorage.js","mtime":1539700108130},{"path":"/Users/jeffrey/HaulTesting/node_modules/cache-loader/dist/cjs.js","mtime":1539652983212},{"path":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js","mtime":1539652983315},{"path":"/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js","mtime":1539615827828}],"contextDependencies":[],"result":["'use strict';var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _slicedToArray2=_interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));(function(){var enterModule=require('react-hot-loader').enterModule;enterModule&&enterModule(module);})();var NativeModules=require('NativeModules');var RCTAsyncStorage=NativeModules.AsyncRocksDBStorage||NativeModules.AsyncSQLiteDBStorage||NativeModules.AsyncLocalStorage;var AsyncStorage={_getRequests:[],_getKeys:[],_immediate:null,getItem:function getItem(key,callback){return new Promise(function(resolve,reject){RCTAsyncStorage.multiGet([key],function(errors,result){var value=result&&result[0]&&result[0][1]?result[0][1]:null;var errs=convertErrors(errors);callback&&callback(errs&&errs[0],value);if(errs){reject(errs[0]);}else{resolve(value);}});});},setItem:function setItem(key,value,callback){return new Promise(function(resolve,reject){RCTAsyncStorage.multiSet([[key,value]],function(errors){var errs=convertErrors(errors);callback&&callback(errs&&errs[0]);if(errs){reject(errs[0]);}else{resolve(null);}});});},removeItem:function removeItem(key,callback){return new Promise(function(resolve,reject){RCTAsyncStorage.multiRemove([key],function(errors){var errs=convertErrors(errors);callback&&callback(errs&&errs[0]);if(errs){reject(errs[0]);}else{resolve(null);}});});},mergeItem:function mergeItem(key,value,callback){return new Promise(function(resolve,reject){RCTAsyncStorage.multiMerge([[key,value]],function(errors){var errs=convertErrors(errors);callback&&callback(errs&&errs[0]);if(errs){reject(errs[0]);}else{resolve(null);}});});},clear:function clear(callback){return new Promise(function(resolve,reject){RCTAsyncStorage.clear(function(error){callback&&callback(convertError(error));if(error&&convertError(error)){reject(convertError(error));}else{resolve(null);}});});},getAllKeys:function getAllKeys(callback){return new Promise(function(resolve,reject){RCTAsyncStorage.getAllKeys(function(error,keys){callback&&callback(convertError(error),keys);if(error){reject(convertError(error));}else{resolve(keys);}});});},flushGetRequests:function flushGetRequests(){var getRequests=this._getRequests;var getKeys=this._getKeys;this._getRequests=[];this._getKeys=[];RCTAsyncStorage.multiGet(getKeys,function(errors,result){var map={};result&&result.forEach(function(_ref){var _ref2=(0,_slicedToArray2.default)(_ref,2),key=_ref2[0],value=_ref2[1];map[key]=value;return value;});var reqLength=getRequests.length;for(var i=0;i<reqLength;i++){var request=getRequests[i];var requestKeys=request.keys;var requestResult=requestKeys.map(function(key){return[key,map[key]];});request.callback&&request.callback(null,requestResult);request.resolve&&request.resolve(requestResult);}});},multiGet:function multiGet(keys,callback){var _this=this;if(!this._immediate){this._immediate=setImmediate(function(){_this._immediate=null;_this.flushGetRequests();});}var getRequest={keys:keys,callback:callback,keyIndex:this._getKeys.length,resolve:null,reject:null};var promiseResult=new Promise(function(resolve,reject){getRequest.resolve=resolve;getRequest.reject=reject;});this._getRequests.push(getRequest);keys.forEach(function(key){if(_this._getKeys.indexOf(key)===-1){_this._getKeys.push(key);}});return promiseResult;},multiSet:function multiSet(keyValuePairs,callback){return new Promise(function(resolve,reject){RCTAsyncStorage.multiSet(keyValuePairs,function(errors){var error=convertErrors(errors);callback&&callback(error);if(error){reject(error);}else{resolve(null);}});});},multiRemove:function multiRemove(keys,callback){return new Promise(function(resolve,reject){RCTAsyncStorage.multiRemove(keys,function(errors){var error=convertErrors(errors);callback&&callback(error);if(error){reject(error);}else{resolve(null);}});});},multiMerge:function multiMerge(keyValuePairs,callback){return new Promise(function(resolve,reject){RCTAsyncStorage.multiMerge(keyValuePairs,function(errors){var error=convertErrors(errors);callback&&callback(error);if(error){reject(error);}else{resolve(null);}});});}};if(!RCTAsyncStorage.multiMerge){delete AsyncStorage.mergeItem;delete AsyncStorage.multiMerge;}function convertErrors(errs){if(!errs){return null;}return(Array.isArray(errs)?errs:[errs]).map(function(e){return convertError(e);});}function convertError(error){if(!error){return null;}var out=new Error(error.message);out.key=error.key;return out;}module.exports=AsyncStorage;;(function(){var reactHotLoader=require('react-hot-loader').default;var leaveModule=require('react-hot-loader').leaveModule;if(!reactHotLoader){return;}reactHotLoader.register(RCTAsyncStorage,\"RCTAsyncStorage\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Storage/AsyncStorage.js\");reactHotLoader.register(AsyncStorage,\"AsyncStorage\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Storage/AsyncStorage.js\");reactHotLoader.register(convertErrors,\"convertErrors\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Storage/AsyncStorage.js\");reactHotLoader.register(convertError,\"convertError\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Storage/AsyncStorage.js\");leaveModule(module);})();;",{"version":3,"sources":["/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Storage/AsyncStorage.js"],"names":["NativeModules","require","RCTAsyncStorage","AsyncRocksDBStorage","AsyncSQLiteDBStorage","AsyncLocalStorage","AsyncStorage","_getRequests","_getKeys","_immediate","getItem","key","callback","Promise","resolve","reject","multiGet","errors","result","value","errs","convertErrors","setItem","multiSet","removeItem","multiRemove","mergeItem","multiMerge","clear","error","convertError","getAllKeys","keys","flushGetRequests","getRequests","getKeys","map","forEach","reqLength","length","i","request","requestKeys","requestResult","setImmediate","getRequest","keyIndex","promiseResult","push","indexOf","keyValuePairs","Array","isArray","e","out","Error","message","module","exports"],"mappings":"AAYA,a,yRAEA,GAAMA,CAAAA,aAAa,CAAGC,OAAO,CAAC,eAAD,CAA7B,CAGA,GAAMC,CAAAA,eAAe,CACnBF,aAAa,CAACG,mBAAd,EACAH,aAAa,CAACI,oBADd,EAEAJ,aAAa,CAACK,iBAHhB,CAYA,GAAMC,CAAAA,YAAY,CAAG,CACnBC,YAAY,CAAG,EADI,CAEnBC,QAAQ,CAAG,EAFQ,CAGnBC,UAAU,CAAG,IAHM,CAUnBC,OAAO,CAAE,iBACPC,GADO,CAEPC,QAFO,CAGE,CACT,MAAO,IAAIC,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB,CACtCb,eAAe,CAACc,QAAhB,CAAyB,CAACL,GAAD,CAAzB,CAAgC,SAASM,MAAT,CAAiBC,MAAjB,CAAyB,CAEvD,GAAMC,CAAAA,KAAK,CAAGD,MAAM,EAAIA,MAAM,CAAC,CAAD,CAAhB,EAAuBA,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAAvB,CAAsCA,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAAtC,CAAqD,IAAnE,CACA,GAAME,CAAAA,IAAI,CAAGC,aAAa,CAACJ,MAAD,CAA1B,CACAL,QAAQ,EAAIA,QAAQ,CAACQ,IAAI,EAAIA,IAAI,CAAC,CAAD,CAAb,CAAkBD,KAAlB,CAApB,CACA,GAAIC,IAAJ,CAAU,CACRL,MAAM,CAACK,IAAI,CAAC,CAAD,CAAL,CAAN,CACD,CAFD,IAEO,CACLN,OAAO,CAACK,KAAD,CAAP,CACD,CACF,CAVD,EAWD,CAZM,CAAP,CAaD,CA3BkB,CAkCnBG,OAAO,CAAE,iBACPX,GADO,CAEPQ,KAFO,CAGPP,QAHO,CAIE,CACT,MAAO,IAAIC,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB,CACtCb,eAAe,CAACqB,QAAhB,CAAyB,CAAC,CAACZ,GAAD,CAAMQ,KAAN,CAAD,CAAzB,CAAyC,SAASF,MAAT,CAAiB,CACxD,GAAMG,CAAAA,IAAI,CAAGC,aAAa,CAACJ,MAAD,CAA1B,CACAL,QAAQ,EAAIA,QAAQ,CAACQ,IAAI,EAAIA,IAAI,CAAC,CAAD,CAAb,CAApB,CACA,GAAIA,IAAJ,CAAU,CACRL,MAAM,CAACK,IAAI,CAAC,CAAD,CAAL,CAAN,CACD,CAFD,IAEO,CACLN,OAAO,CAAC,IAAD,CAAP,CACD,CACF,CARD,EASD,CAVM,CAAP,CAWD,CAlDkB,CAyDnBU,UAAU,CAAE,oBACVb,GADU,CAEVC,QAFU,CAGD,CACT,MAAO,IAAIC,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB,CACtCb,eAAe,CAACuB,WAAhB,CAA4B,CAACd,GAAD,CAA5B,CAAmC,SAASM,MAAT,CAAiB,CAClD,GAAMG,CAAAA,IAAI,CAAGC,aAAa,CAACJ,MAAD,CAA1B,CACAL,QAAQ,EAAIA,QAAQ,CAACQ,IAAI,EAAIA,IAAI,CAAC,CAAD,CAAb,CAApB,CACA,GAAIA,IAAJ,CAAU,CACRL,MAAM,CAACK,IAAI,CAAC,CAAD,CAAL,CAAN,CACD,CAFD,IAEO,CACLN,OAAO,CAAC,IAAD,CAAP,CACD,CACF,CARD,EASD,CAVM,CAAP,CAWD,CAxEkB,CAkFnBY,SAAS,CAAE,mBACTf,GADS,CAETQ,KAFS,CAGTP,QAHS,CAIA,CACT,MAAO,IAAIC,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB,CACtCb,eAAe,CAACyB,UAAhB,CAA2B,CAAC,CAAChB,GAAD,CAAMQ,KAAN,CAAD,CAA3B,CAA2C,SAASF,MAAT,CAAiB,CAC1D,GAAMG,CAAAA,IAAI,CAAGC,aAAa,CAACJ,MAAD,CAA1B,CACAL,QAAQ,EAAIA,QAAQ,CAACQ,IAAI,EAAIA,IAAI,CAAC,CAAD,CAAb,CAApB,CACA,GAAIA,IAAJ,CAAU,CACRL,MAAM,CAACK,IAAI,CAAC,CAAD,CAAL,CAAN,CACD,CAFD,IAEO,CACLN,OAAO,CAAC,IAAD,CAAP,CACD,CACF,CARD,EASD,CAVM,CAAP,CAWD,CAlGkB,CA2GnBc,KAAK,CAAE,eAAShB,QAAT,CAAuD,CAC5D,MAAO,IAAIC,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB,CACtCb,eAAe,CAAC0B,KAAhB,CAAsB,SAASC,KAAT,CAAgB,CACpCjB,QAAQ,EAAIA,QAAQ,CAACkB,YAAY,CAACD,KAAD,CAAb,CAApB,CACA,GAAIA,KAAK,EAAIC,YAAY,CAACD,KAAD,CAAzB,CAAkC,CAChCd,MAAM,CAACe,YAAY,CAACD,KAAD,CAAb,CAAN,CACD,CAFD,IAEO,CACLf,OAAO,CAAC,IAAD,CAAP,CACD,CACF,CAPD,EAQD,CATM,CAAP,CAUD,CAtHkB,CA6HnBiB,UAAU,CAAE,oBACVnB,QADU,CAED,CACT,MAAO,IAAIC,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB,CACtCb,eAAe,CAAC6B,UAAhB,CAA2B,SAASF,KAAT,CAAgBG,IAAhB,CAAsB,CAC/CpB,QAAQ,EAAIA,QAAQ,CAACkB,YAAY,CAACD,KAAD,CAAb,CAAsBG,IAAtB,CAApB,CACA,GAAIH,KAAJ,CAAW,CACTd,MAAM,CAACe,YAAY,CAACD,KAAD,CAAb,CAAN,CACD,CAFD,IAEO,CACLf,OAAO,CAACkB,IAAD,CAAP,CACD,CACF,CAPD,EAQD,CATM,CAAP,CAUD,CA1IkB,CA2JnBC,gBAAgB,CAAE,2BAAiB,CACjC,GAAMC,CAAAA,WAAW,CAAG,KAAK3B,YAAzB,CACA,GAAM4B,CAAAA,OAAO,CAAG,KAAK3B,QAArB,CAEA,KAAKD,YAAL,CAAoB,EAApB,CACA,KAAKC,QAAL,CAAgB,EAAhB,CAEAN,eAAe,CAACc,QAAhB,CAAyBmB,OAAzB,CAAkC,SAASlB,MAAT,CAAiBC,MAAjB,CAAyB,CAOzD,GAAMkB,CAAAA,GAAG,CAAG,EAAZ,CACAlB,MAAM,EACJA,MAAM,CAACmB,OAAP,CAAe,cAAkB,+CAAhB1B,GAAgB,UAAXQ,KAAW,UAC/BiB,GAAG,CAACzB,GAAD,CAAH,CAAWQ,KAAX,CACA,MAAOA,CAAAA,KAAP,CACD,CAHD,CADF,CAKA,GAAMmB,CAAAA,SAAS,CAAGJ,WAAW,CAACK,MAA9B,CACA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGF,SAApB,CAA+BE,CAAC,EAAhC,CAAoC,CAClC,GAAMC,CAAAA,OAAO,CAAGP,WAAW,CAACM,CAAD,CAA3B,CACA,GAAME,CAAAA,WAAW,CAAGD,OAAO,CAACT,IAA5B,CACA,GAAMW,CAAAA,aAAa,CAAGD,WAAW,CAACN,GAAZ,CAAgB,SAAAzB,GAAG,QAAI,CAACA,GAAD,CAAMyB,GAAG,CAACzB,GAAD,CAAT,CAAJ,EAAnB,CAAtB,CACA8B,OAAO,CAAC7B,QAAR,EAAoB6B,OAAO,CAAC7B,QAAR,CAAiB,IAAjB,CAAuB+B,aAAvB,CAApB,CACAF,OAAO,CAAC3B,OAAR,EAAmB2B,OAAO,CAAC3B,OAAR,CAAgB6B,aAAhB,CAAnB,CACD,CACF,CArBD,EAsBD,CAxLkB,CAiMnB3B,QAAQ,CAAE,kBACRgB,IADQ,CAERpB,QAFQ,CAGC,gBACT,GAAI,CAAC,KAAKH,UAAV,CAAsB,CACpB,KAAKA,UAAL,CAAkBmC,YAAY,CAAC,UAAM,CACnC,KAAI,CAACnC,UAAL,CAAkB,IAAlB,CACA,KAAI,CAACwB,gBAAL,GACD,CAH6B,CAA9B,CAID,CAED,GAAMY,CAAAA,UAAU,CAAG,CACjBb,IAAI,CAAEA,IADW,CAEjBpB,QAAQ,CAAEA,QAFO,CAIjBkC,QAAQ,CAAE,KAAKtC,QAAL,CAAc+B,MAJP,CAKjBzB,OAAO,CAAE,IALQ,CAMjBC,MAAM,CAAE,IANS,CAAnB,CASA,GAAMgC,CAAAA,aAAa,CAAG,GAAIlC,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB,CACrD8B,UAAU,CAAC/B,OAAX,CAAqBA,OAArB,CACA+B,UAAU,CAAC9B,MAAX,CAAoBA,MAApB,CACD,CAHqB,CAAtB,CAKA,KAAKR,YAAL,CAAkByC,IAAlB,CAAuBH,UAAvB,EAEAb,IAAI,CAACK,OAAL,CAAa,SAAA1B,GAAG,CAAI,CAClB,GAAI,KAAI,CAACH,QAAL,CAAcyC,OAAd,CAAsBtC,GAAtB,IAA+B,CAAC,CAApC,CAAuC,CACrC,KAAI,CAACH,QAAL,CAAcwC,IAAd,CAAmBrC,GAAnB,EACD,CACF,CAJD,EAMA,MAAOoC,CAAAA,aAAP,CACD,CAnOkB,CA2OnBxB,QAAQ,CAAE,kBACR2B,aADQ,CAERtC,QAFQ,CAGC,CACT,MAAO,IAAIC,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB,CACtCb,eAAe,CAACqB,QAAhB,CAAyB2B,aAAzB,CAAwC,SAASjC,MAAT,CAAiB,CACvD,GAAMY,CAAAA,KAAK,CAAGR,aAAa,CAACJ,MAAD,CAA3B,CACAL,QAAQ,EAAIA,QAAQ,CAACiB,KAAD,CAApB,CACA,GAAIA,KAAJ,CAAW,CACTd,MAAM,CAACc,KAAD,CAAN,CACD,CAFD,IAEO,CACLf,OAAO,CAAC,IAAD,CAAP,CACD,CACF,CARD,EASD,CAVM,CAAP,CAWD,CA1PkB,CAiQnBW,WAAW,CAAE,qBACXO,IADW,CAEXpB,QAFW,CAGF,CACT,MAAO,IAAIC,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB,CACtCb,eAAe,CAACuB,WAAhB,CAA4BO,IAA5B,CAAkC,SAASf,MAAT,CAAiB,CACjD,GAAMY,CAAAA,KAAK,CAAGR,aAAa,CAACJ,MAAD,CAA3B,CACAL,QAAQ,EAAIA,QAAQ,CAACiB,KAAD,CAApB,CACA,GAAIA,KAAJ,CAAW,CACTd,MAAM,CAACc,KAAD,CAAN,CACD,CAFD,IAEO,CACLf,OAAO,CAAC,IAAD,CAAP,CACD,CACF,CARD,EASD,CAVM,CAAP,CAWD,CAhRkB,CA0RnBa,UAAU,CAAE,oBACVuB,aADU,CAEVtC,QAFU,CAGD,CACT,MAAO,IAAIC,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB,CACtCb,eAAe,CAACyB,UAAhB,CAA2BuB,aAA3B,CAA0C,SAASjC,MAAT,CAAiB,CACzD,GAAMY,CAAAA,KAAK,CAAGR,aAAa,CAACJ,MAAD,CAA3B,CACAL,QAAQ,EAAIA,QAAQ,CAACiB,KAAD,CAApB,CACA,GAAIA,KAAJ,CAAW,CACTd,MAAM,CAACc,KAAD,CAAN,CACD,CAFD,IAEO,CACLf,OAAO,CAAC,IAAD,CAAP,CACD,CACF,CARD,EASD,CAVM,CAAP,CAWD,CAzSkB,CAArB,CA6SA,GAAI,CAACZ,eAAe,CAACyB,UAArB,CAAiC,CAC/B,MAAOrB,CAAAA,YAAY,CAACoB,SAApB,CACA,MAAOpB,CAAAA,YAAY,CAACqB,UAApB,CACD,CAED,QAASN,CAAAA,aAAT,CAAuBD,IAAvB,CAA6B,CAC3B,GAAI,CAACA,IAAL,CAAW,CACT,MAAO,KAAP,CACD,CACD,MAAO,CAAC+B,KAAK,CAACC,OAAN,CAAchC,IAAd,EAAsBA,IAAtB,CAA6B,CAACA,IAAD,CAA9B,EAAsCgB,GAAtC,CAA0C,SAAAiB,CAAC,QAAIvB,CAAAA,YAAY,CAACuB,CAAD,CAAhB,EAA3C,CAAP,CACD,CAED,QAASvB,CAAAA,YAAT,CAAsBD,KAAtB,CAA6B,CAC3B,GAAI,CAACA,KAAL,CAAY,CACV,MAAO,KAAP,CACD,CACD,GAAMyB,CAAAA,GAAG,CAAG,GAAIC,CAAAA,KAAJ,CAAU1B,KAAK,CAAC2B,OAAhB,CAAZ,CACAF,GAAG,CAAC3C,GAAJ,CAAUkB,KAAK,CAAClB,GAAhB,CACA,MAAO2C,CAAAA,GAAP,CACD,CAEDG,MAAM,CAACC,OAAP,CAAiBpD,YAAjB,C,gLA9UMJ,e,qIAYAI,Y,kIAkTGe,a,mIAOAS,Y","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @noflow\n * @flow-weak\n * @jsdoc\n */\n\n'use strict';\n\nconst NativeModules = require('NativeModules');\n\n// Use RocksDB if available, then SQLite, then file storage.\nconst RCTAsyncStorage =\n  NativeModules.AsyncRocksDBStorage ||\n  NativeModules.AsyncSQLiteDBStorage ||\n  NativeModules.AsyncLocalStorage;\n\n/**\n * `AsyncStorage` is a simple, unencrypted, asynchronous, persistent, key-value\n * storage system that is global to the app.  It should be used instead of\n * LocalStorage.\n *\n * See http://facebook.github.io/react-native/docs/asyncstorage.html\n */\nconst AsyncStorage = {\n  _getRequests: ([]: Array<any>),\n  _getKeys: ([]: Array<string>),\n  _immediate: (null: ?number),\n\n  /**\n   * Fetches an item for a `key` and invokes a callback upon completion.\n   *\n   * See http://facebook.github.io/react-native/docs/asyncstorage.html#getitem\n   */\n  getItem: function(\n    key: string,\n    callback?: ?(error: ?Error, result: ?string) => void,\n  ): Promise {\n    return new Promise((resolve, reject) => {\n      RCTAsyncStorage.multiGet([key], function(errors, result) {\n        // Unpack result to get value from [[key,value]]\n        const value = result && result[0] && result[0][1] ? result[0][1] : null;\n        const errs = convertErrors(errors);\n        callback && callback(errs && errs[0], value);\n        if (errs) {\n          reject(errs[0]);\n        } else {\n          resolve(value);\n        }\n      });\n    });\n  },\n\n  /**\n   * Sets the value for a `key` and invokes a callback upon completion.\n   *\n   * See http://facebook.github.io/react-native/docs/asyncstorage.html#setitem\n   */\n  setItem: function(\n    key: string,\n    value: string,\n    callback?: ?(error: ?Error) => void,\n  ): Promise {\n    return new Promise((resolve, reject) => {\n      RCTAsyncStorage.multiSet([[key, value]], function(errors) {\n        const errs = convertErrors(errors);\n        callback && callback(errs && errs[0]);\n        if (errs) {\n          reject(errs[0]);\n        } else {\n          resolve(null);\n        }\n      });\n    });\n  },\n\n  /**\n   * Removes an item for a `key` and invokes a callback upon completion.\n   *\n   * See http://facebook.github.io/react-native/docs/asyncstorage.html#removeitem\n   */\n  removeItem: function(\n    key: string,\n    callback?: ?(error: ?Error) => void,\n  ): Promise {\n    return new Promise((resolve, reject) => {\n      RCTAsyncStorage.multiRemove([key], function(errors) {\n        const errs = convertErrors(errors);\n        callback && callback(errs && errs[0]);\n        if (errs) {\n          reject(errs[0]);\n        } else {\n          resolve(null);\n        }\n      });\n    });\n  },\n\n  /**\n   * Merges an existing `key` value with an input value, assuming both values\n   * are stringified JSON.\n   *\n   * **NOTE:** This is not supported by all native implementations.\n   *\n   * See http://facebook.github.io/react-native/docs/asyncstorage.html#mergeitem\n   */\n  mergeItem: function(\n    key: string,\n    value: string,\n    callback?: ?(error: ?Error) => void,\n  ): Promise {\n    return new Promise((resolve, reject) => {\n      RCTAsyncStorage.multiMerge([[key, value]], function(errors) {\n        const errs = convertErrors(errors);\n        callback && callback(errs && errs[0]);\n        if (errs) {\n          reject(errs[0]);\n        } else {\n          resolve(null);\n        }\n      });\n    });\n  },\n\n  /**\n   * Erases *all* `AsyncStorage` for all clients, libraries, etc. You probably\n   * don't want to call this; use `removeItem` or `multiRemove` to clear only\n   * your app's keys.\n   *\n   * See http://facebook.github.io/react-native/docs/asyncstorage.html#clear\n   */\n  clear: function(callback?: ?(error: ?Error) => void): Promise {\n    return new Promise((resolve, reject) => {\n      RCTAsyncStorage.clear(function(error) {\n        callback && callback(convertError(error));\n        if (error && convertError(error)) {\n          reject(convertError(error));\n        } else {\n          resolve(null);\n        }\n      });\n    });\n  },\n\n  /**\n   * Gets *all* keys known to your app; for all callers, libraries, etc.\n   *\n   * See http://facebook.github.io/react-native/docs/asyncstorage.html#getallkeys\n   */\n  getAllKeys: function(\n    callback?: ?(error: ?Error, keys: ?Array<string>) => void,\n  ): Promise {\n    return new Promise((resolve, reject) => {\n      RCTAsyncStorage.getAllKeys(function(error, keys) {\n        callback && callback(convertError(error), keys);\n        if (error) {\n          reject(convertError(error));\n        } else {\n          resolve(keys);\n        }\n      });\n    });\n  },\n\n  /**\n   * The following batched functions are useful for executing a lot of\n   * operations at once, allowing for native optimizations and provide the\n   * convenience of a single callback after all operations are complete.\n   *\n   * These functions return arrays of errors, potentially one for every key.\n   * For key-specific errors, the Error object will have a key property to\n   * indicate which key caused the error.\n   */\n\n  /**\n   * Flushes any pending requests using a single batch call to get the data.\n   *\n   * See http://facebook.github.io/react-native/docs/asyncstorage.html#flushgetrequests\n   * */\n  flushGetRequests: function(): void {\n    const getRequests = this._getRequests;\n    const getKeys = this._getKeys;\n\n    this._getRequests = [];\n    this._getKeys = [];\n\n    RCTAsyncStorage.multiGet(getKeys, function(errors, result) {\n      // Even though the runtime complexity of this is theoretically worse vs if we used a map,\n      // it's much, much faster in practice for the data sets we deal with (we avoid\n      // allocating result pair arrays). This was heavily benchmarked.\n      //\n      // Is there a way to avoid using the map but fix the bug in this breaking test?\n      // https://github.com/facebook/react-native/commit/8dd8ad76579d7feef34c014d387bf02065692264\n      const map = {};\n      result &&\n        result.forEach(([key, value]) => {\n          map[key] = value;\n          return value;\n        });\n      const reqLength = getRequests.length;\n      for (let i = 0; i < reqLength; i++) {\n        const request = getRequests[i];\n        const requestKeys = request.keys;\n        const requestResult = requestKeys.map(key => [key, map[key]]);\n        request.callback && request.callback(null, requestResult);\n        request.resolve && request.resolve(requestResult);\n      }\n    });\n  },\n\n  /**\n   * This allows you to batch the fetching of items given an array of `key`\n   * inputs. Your callback will be invoked with an array of corresponding\n   * key-value pairs found.\n   *\n   * See http://facebook.github.io/react-native/docs/asyncstorage.html#multiget\n   */\n  multiGet: function(\n    keys: Array<string>,\n    callback?: ?(errors: ?Array<Error>, result: ?Array<Array<string>>) => void,\n  ): Promise {\n    if (!this._immediate) {\n      this._immediate = setImmediate(() => {\n        this._immediate = null;\n        this.flushGetRequests();\n      });\n    }\n\n    const getRequest = {\n      keys: keys,\n      callback: callback,\n      // do we need this?\n      keyIndex: this._getKeys.length,\n      resolve: null,\n      reject: null,\n    };\n\n    const promiseResult = new Promise((resolve, reject) => {\n      getRequest.resolve = resolve;\n      getRequest.reject = reject;\n    });\n\n    this._getRequests.push(getRequest);\n    // avoid fetching duplicates\n    keys.forEach(key => {\n      if (this._getKeys.indexOf(key) === -1) {\n        this._getKeys.push(key);\n      }\n    });\n\n    return promiseResult;\n  },\n\n  /**\n   * Use this as a batch operation for storing multiple key-value pairs. When\n   * the operation completes you'll get a single callback with any errors.\n   *\n   * See http://facebook.github.io/react-native/docs/asyncstorage.html#multiset\n   */\n  multiSet: function(\n    keyValuePairs: Array<Array<string>>,\n    callback?: ?(errors: ?Array<Error>) => void,\n  ): Promise {\n    return new Promise((resolve, reject) => {\n      RCTAsyncStorage.multiSet(keyValuePairs, function(errors) {\n        const error = convertErrors(errors);\n        callback && callback(error);\n        if (error) {\n          reject(error);\n        } else {\n          resolve(null);\n        }\n      });\n    });\n  },\n\n  /**\n   * Call this to batch the deletion of all keys in the `keys` array.\n   *\n   * See http://facebook.github.io/react-native/docs/asyncstorage.html#multiremove\n   */\n  multiRemove: function(\n    keys: Array<string>,\n    callback?: ?(errors: ?Array<Error>) => void,\n  ): Promise {\n    return new Promise((resolve, reject) => {\n      RCTAsyncStorage.multiRemove(keys, function(errors) {\n        const error = convertErrors(errors);\n        callback && callback(error);\n        if (error) {\n          reject(error);\n        } else {\n          resolve(null);\n        }\n      });\n    });\n  },\n\n  /**\n   * Batch operation to merge in existing and new values for a given set of\n   * keys. This assumes that the values are stringified JSON.\n   *\n   * **NOTE**: This is not supported by all native implementations.\n   *\n   * See http://facebook.github.io/react-native/docs/asyncstorage.html#multimerge\n   */\n  multiMerge: function(\n    keyValuePairs: Array<Array<string>>,\n    callback?: ?(errors: ?Array<Error>) => void,\n  ): Promise {\n    return new Promise((resolve, reject) => {\n      RCTAsyncStorage.multiMerge(keyValuePairs, function(errors) {\n        const error = convertErrors(errors);\n        callback && callback(error);\n        if (error) {\n          reject(error);\n        } else {\n          resolve(null);\n        }\n      });\n    });\n  },\n};\n\n// Not all native implementations support merge.\nif (!RCTAsyncStorage.multiMerge) {\n  delete AsyncStorage.mergeItem;\n  delete AsyncStorage.multiMerge;\n}\n\nfunction convertErrors(errs) {\n  if (!errs) {\n    return null;\n  }\n  return (Array.isArray(errs) ? errs : [errs]).map(e => convertError(e));\n}\n\nfunction convertError(error) {\n  if (!error) {\n    return null;\n  }\n  const out = new Error(error.message);\n  out.key = error.key; // flow doesn't like this :(\n  return out;\n}\n\nmodule.exports = AsyncStorage;\n"]}]}