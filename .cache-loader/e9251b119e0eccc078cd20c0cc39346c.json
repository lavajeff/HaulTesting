{"remainingRequest":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js??ref--5-2!/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Settings/Settings.ios.js","dependencies":[{"path":"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Settings/Settings.ios.js","mtime":1539700108130},{"path":"/Users/jeffrey/HaulTesting/node_modules/cache-loader/dist/cjs.js","mtime":1539652983212},{"path":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js","mtime":1539652983315},{"path":"/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js","mtime":1539615827828}],"contextDependencies":[],"result":["'use strict';var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));(function(){var enterModule=require('react-hot-loader').enterModule;enterModule&&enterModule(module);})();var RCTDeviceEventEmitter=require('RCTDeviceEventEmitter');var RCTSettingsManager=require('NativeModules').SettingsManager;var invariant=require('fbjs/lib/invariant');var subscriptions=[];var Settings={_settings:RCTSettingsManager&&RCTSettingsManager.settings,get:function get(key){return this._settings[key];},set:function set(settings){this._settings=(0,_extends2.default)(this._settings,settings);RCTSettingsManager.setValues(settings);},watchKeys:function watchKeys(keys,callback){if(typeof keys==='string'){keys=[keys];}invariant(Array.isArray(keys),'keys should be a string or array of strings');var sid=subscriptions.length;subscriptions.push({keys:keys,callback:callback});return sid;},clearWatch:function clearWatch(watchId){if(watchId<subscriptions.length){subscriptions[watchId]={keys:[],callback:null};}},_sendObservations:function _sendObservations(body){var _this=this;Object.keys(body).forEach(function(key){var newValue=body[key];var didChange=_this._settings[key]!==newValue;_this._settings[key]=newValue;if(didChange){subscriptions.forEach(function(sub){if(sub.keys.indexOf(key)!==-1&&sub.callback){sub.callback();}});}});}};RCTDeviceEventEmitter.addListener('settingsUpdated',Settings._sendObservations.bind(Settings));module.exports=Settings;;(function(){var reactHotLoader=require('react-hot-loader').default;var leaveModule=require('react-hot-loader').leaveModule;if(!reactHotLoader){return;}reactHotLoader.register(RCTSettingsManager,\"RCTSettingsManager\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Settings/Settings.ios.js\");reactHotLoader.register(subscriptions,\"subscriptions\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Settings/Settings.ios.js\");reactHotLoader.register(Settings,\"Settings\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Settings/Settings.ios.js\");leaveModule(module);})();;",{"version":3,"sources":["/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Settings/Settings.ios.js"],"names":["RCTDeviceEventEmitter","require","RCTSettingsManager","SettingsManager","invariant","subscriptions","Settings","_settings","settings","get","key","set","setValues","watchKeys","keys","callback","Array","isArray","sid","length","push","clearWatch","watchId","_sendObservations","body","Object","forEach","newValue","didChange","sub","indexOf","addListener","bind","module","exports"],"mappings":"AAUA,a,6QAEA,GAAMA,CAAAA,qBAAqB,CAAGC,OAAO,CAAC,uBAAD,CAArC,CACA,GAAMC,CAAAA,kBAAkB,CAAGD,OAAO,CAAC,eAAD,CAAP,CAAyBE,eAApD,CAEA,GAAMC,CAAAA,SAAS,CAAGH,OAAO,CAAC,oBAAD,CAAzB,CAEA,GAAMI,CAAAA,aAAgE,CAAG,EAAzE,CAEA,GAAMC,CAAAA,QAAQ,CAAG,CACfC,SAAS,CAAEL,kBAAkB,EAAIA,kBAAkB,CAACM,QADrC,CAGfC,GAHe,cAGXC,GAHW,CAGS,CACtB,MAAO,MAAKH,SAAL,CAAeG,GAAf,CAAP,CACD,CALc,CAOfC,GAPe,cAOXH,QAPW,CAOO,CACpB,KAAKD,SAAL,CAAiB,sBAAc,KAAKA,SAAnB,CAA8BC,QAA9B,CAAjB,CACAN,kBAAkB,CAACU,SAAnB,CAA6BJ,QAA7B,EACD,CAVc,CAYfK,SAZe,oBAYLC,IAZK,CAYyBC,QAZzB,CAYqD,CAClE,GAAI,MAAOD,CAAAA,IAAP,GAAgB,QAApB,CAA8B,CAC5BA,IAAI,CAAG,CAACA,IAAD,CAAP,CACD,CAEDV,SAAS,CACPY,KAAK,CAACC,OAAN,CAAcH,IAAd,CADO,CAEP,6CAFO,CAAT,CAKA,GAAMI,CAAAA,GAAG,CAAGb,aAAa,CAACc,MAA1B,CACAd,aAAa,CAACe,IAAd,CAAmB,CAACN,IAAI,CAAEA,IAAP,CAAaC,QAAQ,CAAEA,QAAvB,CAAnB,EACA,MAAOG,CAAAA,GAAP,CACD,CAzBc,CA2BfG,UA3Be,qBA2BJC,OA3BI,CA2Ba,CAC1B,GAAIA,OAAO,CAAGjB,aAAa,CAACc,MAA5B,CAAoC,CAClCd,aAAa,CAACiB,OAAD,CAAb,CAAyB,CAACR,IAAI,CAAE,EAAP,CAAWC,QAAQ,CAAE,IAArB,CAAzB,CACD,CACF,CA/Bc,CAiCfQ,iBAjCe,4BAiCGC,IAjCH,CAiCiB,gBAC9BC,MAAM,CAACX,IAAP,CAAYU,IAAZ,EAAkBE,OAAlB,CAA0B,SAAAhB,GAAG,CAAI,CAC/B,GAAMiB,CAAAA,QAAQ,CAAGH,IAAI,CAACd,GAAD,CAArB,CACA,GAAMkB,CAAAA,SAAS,CAAG,KAAI,CAACrB,SAAL,CAAeG,GAAf,IAAwBiB,QAA1C,CACA,KAAI,CAACpB,SAAL,CAAeG,GAAf,EAAsBiB,QAAtB,CAEA,GAAIC,SAAJ,CAAe,CACbvB,aAAa,CAACqB,OAAd,CAAsB,SAAAG,GAAG,CAAI,CAC3B,GAAIA,GAAG,CAACf,IAAJ,CAASgB,OAAT,CAAiBpB,GAAjB,IAA0B,CAAC,CAA3B,EAAgCmB,GAAG,CAACd,QAAxC,CAAkD,CAChDc,GAAG,CAACd,QAAJ,GACD,CACF,CAJD,EAKD,CACF,CAZD,EAaD,CA/Cc,CAAjB,CAkDAf,qBAAqB,CAAC+B,WAAtB,CACE,iBADF,CAEEzB,QAAQ,CAACiB,iBAAT,CAA2BS,IAA3B,CAAgC1B,QAAhC,CAFF,EAKA2B,MAAM,CAACC,OAAP,CAAiB5B,QAAjB,C,gLA7DMJ,kB,yIAIAG,a,oIAEAC,Q","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst RCTDeviceEventEmitter = require('RCTDeviceEventEmitter');\nconst RCTSettingsManager = require('NativeModules').SettingsManager;\n\nconst invariant = require('fbjs/lib/invariant');\n\nconst subscriptions: Array<{keys: Array<string>, callback: ?Function}> = [];\n\nconst Settings = {\n  _settings: RCTSettingsManager && RCTSettingsManager.settings,\n\n  get(key: string): mixed {\n    return this._settings[key];\n  },\n\n  set(settings: Object) {\n    this._settings = Object.assign(this._settings, settings);\n    RCTSettingsManager.setValues(settings);\n  },\n\n  watchKeys(keys: string | Array<string>, callback: Function): number {\n    if (typeof keys === 'string') {\n      keys = [keys];\n    }\n\n    invariant(\n      Array.isArray(keys),\n      'keys should be a string or array of strings',\n    );\n\n    const sid = subscriptions.length;\n    subscriptions.push({keys: keys, callback: callback});\n    return sid;\n  },\n\n  clearWatch(watchId: number) {\n    if (watchId < subscriptions.length) {\n      subscriptions[watchId] = {keys: [], callback: null};\n    }\n  },\n\n  _sendObservations(body: Object) {\n    Object.keys(body).forEach(key => {\n      const newValue = body[key];\n      const didChange = this._settings[key] !== newValue;\n      this._settings[key] = newValue;\n\n      if (didChange) {\n        subscriptions.forEach(sub => {\n          if (sub.keys.indexOf(key) !== -1 && sub.callback) {\n            sub.callback();\n          }\n        });\n      }\n    });\n  },\n};\n\nRCTDeviceEventEmitter.addListener(\n  'settingsUpdated',\n  Settings._sendObservations.bind(Settings),\n);\n\nmodule.exports = Settings;\n"]}]}