{"remainingRequest":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js??ref--5-2!/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Network/NetInfo.js","dependencies":[{"path":"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Network/NetInfo.js","mtime":1539700108130},{"path":"/Users/jeffrey/HaulTesting/node_modules/cache-loader/dist/cjs.js","mtime":1539652983212},{"path":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js","mtime":1539652983315},{"path":"/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js","mtime":1539615827828}],"contextDependencies":[],"result":["'use strict';(function(){var enterModule=require('react-hot-loader').enterModule;enterModule&&enterModule(module);})();var Map=require('Map');var NativeEventEmitter=require('NativeEventEmitter');var NativeModules=require('NativeModules');var Platform=require('Platform');var RCTNetInfo=NativeModules.NetInfo;var NetInfoEventEmitter=new NativeEventEmitter(RCTNetInfo);var DEVICE_CONNECTIVITY_EVENT='networkStatusDidChange';var _subscriptions=new Map();var _isConnectedDeprecated;if(Platform.OS==='ios'){_isConnectedDeprecated=function _isConnectedDeprecated(reachability){return reachability!=='none'&&reachability!=='unknown';};}else if(Platform.OS==='android'){_isConnectedDeprecated=function _isConnectedDeprecated(connectionType){return connectionType!=='NONE'&&connectionType!=='UNKNOWN';};}function _isConnected(connection){return connection.type!=='none'&&connection.type!=='unknown';}var _isConnectedSubscriptions=new Map();var NetInfo={addEventListener:function addEventListener(eventName,handler){var listener;if(eventName==='connectionChange'){listener=NetInfoEventEmitter.addListener(DEVICE_CONNECTIVITY_EVENT,function(appStateData){handler({type:appStateData.connectionType,effectiveType:appStateData.effectiveConnectionType});});}else if(eventName==='change'){console.warn('NetInfo\\'s \"change\" event is deprecated. Listen to the \"connectionChange\" event instead.');listener=NetInfoEventEmitter.addListener(DEVICE_CONNECTIVITY_EVENT,function(appStateData){handler(appStateData.network_info);});}else{console.warn('Trying to subscribe to unknown event: \"'+eventName+'\"');return{remove:function remove(){}};}_subscriptions.set(handler,listener);return{remove:function remove(){return NetInfo.removeEventListener(eventName,handler);}};},removeEventListener:function removeEventListener(eventName,handler){var listener=_subscriptions.get(handler);if(!listener){return;}listener.remove();_subscriptions.delete(handler);},fetch:function fetch(){console.warn('NetInfo.fetch() is deprecated. Use NetInfo.getConnectionInfo() instead.');return RCTNetInfo.getCurrentConnectivity().then(function(resp){return resp.network_info;});},getConnectionInfo:function getConnectionInfo(){return RCTNetInfo.getCurrentConnectivity().then(function(resp){return{type:resp.connectionType,effectiveType:resp.effectiveConnectionType};});},isConnected:{addEventListener:function addEventListener(eventName,handler){var listener=function listener(connection){if(eventName==='change'){handler(_isConnectedDeprecated(connection));}else if(eventName==='connectionChange'){handler(_isConnected(connection));}};_isConnectedSubscriptions.set(handler,listener);NetInfo.addEventListener(eventName,listener);return{remove:function remove(){return NetInfo.isConnected.removeEventListener(eventName,handler);}};},removeEventListener:function removeEventListener(eventName,handler){var listener=_isConnectedSubscriptions.get(handler);NetInfo.removeEventListener(eventName,listener);_isConnectedSubscriptions.delete(handler);},fetch:function fetch(){return NetInfo.getConnectionInfo().then(_isConnected);}},isConnectionExpensive:function isConnectionExpensive(){return Platform.OS==='android'?RCTNetInfo.isConnectionMetered():Promise.reject(new Error('Currently not supported on iOS'));}};module.exports=NetInfo;;(function(){var reactHotLoader=require('react-hot-loader').default;var leaveModule=require('react-hot-loader').leaveModule;if(!reactHotLoader){return;}reactHotLoader.register(RCTNetInfo,\"RCTNetInfo\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Network/NetInfo.js\");reactHotLoader.register(NetInfoEventEmitter,\"NetInfoEventEmitter\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Network/NetInfo.js\");reactHotLoader.register(DEVICE_CONNECTIVITY_EVENT,\"DEVICE_CONNECTIVITY_EVENT\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Network/NetInfo.js\");reactHotLoader.register(_subscriptions,\"_subscriptions\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Network/NetInfo.js\");reactHotLoader.register(_isConnectedDeprecated,\"_isConnectedDeprecated\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Network/NetInfo.js\");reactHotLoader.register(_isConnected,\"_isConnected\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Network/NetInfo.js\");reactHotLoader.register(_isConnectedSubscriptions,\"_isConnectedSubscriptions\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Network/NetInfo.js\");reactHotLoader.register(NetInfo,\"NetInfo\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Network/NetInfo.js\");leaveModule(module);})();;",{"version":3,"sources":["/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Network/NetInfo.js"],"names":["Map","require","NativeEventEmitter","NativeModules","Platform","RCTNetInfo","NetInfo","NetInfoEventEmitter","DEVICE_CONNECTIVITY_EVENT","_subscriptions","_isConnectedDeprecated","OS","reachability","connectionType","_isConnected","connection","type","_isConnectedSubscriptions","addEventListener","eventName","handler","listener","addListener","appStateData","effectiveType","effectiveConnectionType","console","warn","network_info","remove","set","removeEventListener","get","delete","fetch","getCurrentConnectivity","then","resp","getConnectionInfo","isConnected","isConnectionExpensive","isConnectionMetered","Promise","reject","Error","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst Map = require('Map');\nconst NativeEventEmitter = require('NativeEventEmitter');\nconst NativeModules = require('NativeModules');\nconst Platform = require('Platform');\nconst RCTNetInfo = NativeModules.NetInfo;\n\nconst NetInfoEventEmitter = new NativeEventEmitter(RCTNetInfo);\n\nconst DEVICE_CONNECTIVITY_EVENT = 'networkStatusDidChange';\n\ntype ChangeEventName = $Enum<{\n  connectionChange: string,\n  change: string,\n}>;\n\ntype ReachabilityStateIOS = $Enum<{\n  cell: string,\n  none: string,\n  unknown: string,\n  wifi: string,\n}>;\n\ntype ConnectivityStateAndroid = $Enum<{\n  NONE: string,\n  MOBILE: string,\n  WIFI: string,\n  MOBILE_MMS: string,\n  MOBILE_SUPL: string,\n  MOBILE_DUN: string,\n  MOBILE_HIPRI: string,\n  WIMAX: string,\n  BLUETOOTH: string,\n  DUMMY: string,\n  ETHERNET: string,\n  MOBILE_FOTA: string,\n  MOBILE_IMS: string,\n  MOBILE_CBS: string,\n  WIFI_P2P: string,\n  MOBILE_IA: string,\n  MOBILE_EMERGENCY: string,\n  PROXY: string,\n  VPN: string,\n  UNKNOWN: string,\n}>;\n\nconst _subscriptions = new Map();\n\nlet _isConnectedDeprecated;\nif (Platform.OS === 'ios') {\n  _isConnectedDeprecated = function(\n    reachability: ReachabilityStateIOS,\n  ): boolean {\n    return reachability !== 'none' && reachability !== 'unknown';\n  };\n} else if (Platform.OS === 'android') {\n  _isConnectedDeprecated = function(\n    connectionType: ConnectivityStateAndroid,\n  ): boolean {\n    return connectionType !== 'NONE' && connectionType !== 'UNKNOWN';\n  };\n}\n\nfunction _isConnected(connection) {\n  return connection.type !== 'none' && connection.type !== 'unknown';\n}\n\nconst _isConnectedSubscriptions = new Map();\n\n/**\n * NetInfo exposes info about online/offline status.\n *\n * See https://facebook.github.io/react-native/docs/netinfo.html\n */\nconst NetInfo = {\n  /**\n   * Adds an event handler.\n   *\n   * See https://facebook.github.io/react-native/docs/netinfo.html#addeventlistener\n   */\n  addEventListener(\n    eventName: ChangeEventName,\n    handler: Function,\n  ): {remove: () => void} {\n    let listener;\n    if (eventName === 'connectionChange') {\n      listener = NetInfoEventEmitter.addListener(\n        DEVICE_CONNECTIVITY_EVENT,\n        appStateData => {\n          handler({\n            type: appStateData.connectionType,\n            effectiveType: appStateData.effectiveConnectionType,\n          });\n        },\n      );\n    } else if (eventName === 'change') {\n      console.warn(\n        'NetInfo\\'s \"change\" event is deprecated. Listen to the \"connectionChange\" event instead.',\n      );\n\n      listener = NetInfoEventEmitter.addListener(\n        DEVICE_CONNECTIVITY_EVENT,\n        appStateData => {\n          handler(appStateData.network_info);\n        },\n      );\n    } else {\n      console.warn('Trying to subscribe to unknown event: \"' + eventName + '\"');\n      return {\n        remove: () => {},\n      };\n    }\n\n    _subscriptions.set(handler, listener);\n    return {\n      remove: () => NetInfo.removeEventListener(eventName, handler),\n    };\n  },\n\n  /**\n   * Removes the listener for network status changes.\n   *\n   * See https://facebook.github.io/react-native/docs/netinfo.html#removeeventlistener\n   */\n  removeEventListener(eventName: ChangeEventName, handler: Function): void {\n    const listener = _subscriptions.get(handler);\n    if (!listener) {\n      return;\n    }\n    listener.remove();\n    _subscriptions.delete(handler);\n  },\n\n  /**\n   * This function is deprecated. Use `getConnectionInfo` instead.\n   * Returns a promise that resolves with one of the deprecated connectivity\n   * types:\n   *\n   * The following connectivity types are deprecated. They're used by the\n   * deprecated APIs `fetch` and the `change` event.\n   *\n   * iOS connectivity types (deprecated):\n   * - `none` - device is offline\n   * - `wifi` - device is online and connected via wifi, or is the iOS simulator\n   * - `cell` - device is connected via Edge, 3G, WiMax, or LTE\n   * - `unknown` - error case and the network status is unknown\n   *\n   * Android connectivity types (deprecated).\n   * - `NONE` - device is offline\n   * - `BLUETOOTH` - The Bluetooth data connection.\n   * - `DUMMY` -  Dummy data connection.\n   * - `ETHERNET` - The Ethernet data connection.\n   * - `MOBILE` - The Mobile data connection.\n   * - `MOBILE_DUN` - A DUN-specific Mobile data connection.\n   * - `MOBILE_HIPRI` - A High Priority Mobile data connection.\n   * - `MOBILE_MMS` - An MMS-specific Mobile data connection.\n   * - `MOBILE_SUPL` -  A SUPL-specific Mobile data connection.\n   * - `VPN` -  A virtual network using one or more native bearers. Requires\n   * API Level 21\n   * - `WIFI` - The WIFI data connection.\n   * - `WIMAX` -  The WiMAX data connection.\n   * - `UNKNOWN` - Unknown data connection.\n   *\n   * The rest of the connectivity types are hidden by the Android API, but can\n   * be used if necessary.\n   */\n  fetch(): Promise<any> {\n    console.warn(\n      'NetInfo.fetch() is deprecated. Use NetInfo.getConnectionInfo() instead.',\n    );\n    return RCTNetInfo.getCurrentConnectivity().then(resp => resp.network_info);\n  },\n\n  /**\n   * See https://facebook.github.io/react-native/docs/netinfo.html#getconnectioninfo\n   */\n  getConnectionInfo(): Promise<any> {\n    return RCTNetInfo.getCurrentConnectivity().then(resp => {\n      return {\n        type: resp.connectionType,\n        effectiveType: resp.effectiveConnectionType,\n      };\n    });\n  },\n\n  /**\n   * An object with the same methods as above but the listener receives a\n   * boolean which represents the internet connectivity.\n   *\n   * See https://facebook.github.io/react-native/docs/netinfo.html#isconnected\n   */\n  isConnected: {\n    addEventListener(\n      eventName: ChangeEventName,\n      handler: Function,\n    ): {remove: () => void} {\n      const listener = connection => {\n        if (eventName === 'change') {\n          handler(_isConnectedDeprecated(connection));\n        } else if (eventName === 'connectionChange') {\n          handler(_isConnected(connection));\n        }\n      };\n      _isConnectedSubscriptions.set(handler, listener);\n      NetInfo.addEventListener(eventName, listener);\n      return {\n        remove: () =>\n          NetInfo.isConnected.removeEventListener(eventName, handler),\n      };\n    },\n\n    removeEventListener(eventName: ChangeEventName, handler: Function): void {\n      const listener = _isConnectedSubscriptions.get(handler);\n      NetInfo.removeEventListener(\n        eventName,\n        /* $FlowFixMe(>=0.36.0 site=react_native_fb,react_native_oss) Flow error\n         * detected during the deploy of Flow v0.36.0. To see the error, remove\n         * this comment and run Flow */\n        listener,\n      );\n      _isConnectedSubscriptions.delete(handler);\n    },\n\n    fetch(): Promise<any> {\n      return NetInfo.getConnectionInfo().then(_isConnected);\n    },\n  },\n\n  isConnectionExpensive(): Promise<boolean> {\n    return Platform.OS === 'android'\n      ? RCTNetInfo.isConnectionMetered()\n      : Promise.reject(new Error('Currently not supported on iOS'));\n  },\n};\n\nmodule.exports = NetInfo;\n"]}]}