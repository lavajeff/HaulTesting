{"remainingRequest":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js??ref--5-2!/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Core/ExceptionsManager.js","dependencies":[{"path":"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Core/ExceptionsManager.js","mtime":1539700108130},{"path":"/Users/jeffrey/HaulTesting/node_modules/cache-loader/dist/cjs.js","mtime":1539652983212},{"path":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js","mtime":1539652983315},{"path":"/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js","mtime":1539615827828}],"contextDependencies":[],"result":["'use strict';(function(){var enterModule=require('react-hot-loader').enterModule;enterModule&&enterModule(module);})();var exceptionID=0;function reportException(e,isFatal){var _require=require('NativeModules'),ExceptionsManager=_require.ExceptionsManager;if(ExceptionsManager){var parseErrorStack=require('parseErrorStack');var stack=parseErrorStack(e);var currentExceptionID=++exceptionID;if(isFatal){ExceptionsManager.reportFatalException(e.message,stack,currentExceptionID);}else{ExceptionsManager.reportSoftException(e.message,stack,currentExceptionID);}if(__DEV__){var symbolicateStackTrace=require('symbolicateStackTrace');symbolicateStackTrace(stack).then(function(prettyStack){if(prettyStack){ExceptionsManager.updateExceptionMessage(e.message,prettyStack,currentExceptionID);}else{throw new Error('The stack is null');}}).catch(function(error){return console.warn('Unable to symbolicate stack trace: '+error.message);});}}}function handleException(e,isFatal){if(!e.message){e=new Error(e);}if(console._errorOriginal){console._errorOriginal(e.message);}else{console.error(e.message);}reportException(e,isFatal);}function reactConsoleErrorHandler(){console._errorOriginal.apply(console,arguments);if(!console.reportErrorsAsExceptions){return;}if(arguments[0]&&arguments[0].stack){reportException(arguments[0],false);}else{var stringifySafe=require('stringifySafe');var str=Array.prototype.map.call(arguments,stringifySafe).join(', ');if(str.slice(0,10)==='\"Warning: '){return;}var error=new Error('console.error: '+str);error.framesToPop=1;reportException(error,false);}}function installConsoleErrorReporter(){if(console._errorOriginal){return;}console._errorOriginal=console.error.bind(console);console.error=reactConsoleErrorHandler;if(console.reportErrorsAsExceptions===undefined){console.reportErrorsAsExceptions=true;}}module.exports={handleException:handleException,installConsoleErrorReporter:installConsoleErrorReporter};;(function(){var reactHotLoader=require('react-hot-loader').default;var leaveModule=require('react-hot-loader').leaveModule;if(!reactHotLoader){return;}reactHotLoader.register(exceptionID,\"exceptionID\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Core/ExceptionsManager.js\");reactHotLoader.register(reportException,\"reportException\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Core/ExceptionsManager.js\");reactHotLoader.register(handleException,\"handleException\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Core/ExceptionsManager.js\");reactHotLoader.register(reactConsoleErrorHandler,\"reactConsoleErrorHandler\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Core/ExceptionsManager.js\");reactHotLoader.register(installConsoleErrorReporter,\"installConsoleErrorReporter\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Core/ExceptionsManager.js\");leaveModule(module);})();;",{"version":3,"sources":["/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Core/ExceptionsManager.js"],"names":["exceptionID","reportException","e","isFatal","require","ExceptionsManager","parseErrorStack","stack","currentExceptionID","reportFatalException","message","reportSoftException","__DEV__","symbolicateStackTrace","then","prettyStack","updateExceptionMessage","Error","catch","error","console","warn","handleException","_errorOriginal","reactConsoleErrorHandler","apply","arguments","reportErrorsAsExceptions","stringifySafe","str","Array","prototype","map","call","join","slice","framesToPop","installConsoleErrorReporter","bind","undefined","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nimport type {ExtendedError} from 'parseErrorStack';\n\n/**\n * Handles the developer-visible aspect of errors and exceptions\n */\nlet exceptionID = 0;\nfunction reportException(e: ExtendedError, isFatal: boolean) {\n  const {ExceptionsManager} = require('NativeModules');\n  if (ExceptionsManager) {\n    const parseErrorStack = require('parseErrorStack');\n    const stack = parseErrorStack(e);\n    const currentExceptionID = ++exceptionID;\n    if (isFatal) {\n      ExceptionsManager.reportFatalException(\n        e.message,\n        stack,\n        currentExceptionID,\n      );\n    } else {\n      ExceptionsManager.reportSoftException(\n        e.message,\n        stack,\n        currentExceptionID,\n      );\n    }\n    if (__DEV__) {\n      const symbolicateStackTrace = require('symbolicateStackTrace');\n      symbolicateStackTrace(stack)\n        .then(prettyStack => {\n          if (prettyStack) {\n            ExceptionsManager.updateExceptionMessage(\n              e.message,\n              prettyStack,\n              currentExceptionID,\n            );\n          } else {\n            throw new Error('The stack is null');\n          }\n        })\n        .catch(error =>\n          console.warn('Unable to symbolicate stack trace: ' + error.message),\n        );\n    }\n  }\n}\n\ndeclare var console: typeof console & {\n  _errorOriginal: Function,\n  reportErrorsAsExceptions: boolean,\n};\n\n/**\n * Logs exceptions to the (native) console and displays them\n */\nfunction handleException(e: Error, isFatal: boolean) {\n  // Workaround for reporting errors caused by `throw 'some string'`\n  // Unfortunately there is no way to figure out the stacktrace in this\n  // case, so if you ended up here trying to trace an error, look for\n  // `throw '<error message>'` somewhere in your codebase.\n  if (!e.message) {\n    e = new Error(e);\n  }\n  if (console._errorOriginal) {\n    console._errorOriginal(e.message);\n  } else {\n    console.error(e.message);\n  }\n  reportException(e, isFatal);\n}\n\nfunction reactConsoleErrorHandler() {\n  console._errorOriginal.apply(console, arguments);\n  if (!console.reportErrorsAsExceptions) {\n    return;\n  }\n\n  if (arguments[0] && arguments[0].stack) {\n    reportException(arguments[0], /* isFatal */ false);\n  } else {\n    const stringifySafe = require('stringifySafe');\n    const str = Array.prototype.map.call(arguments, stringifySafe).join(', ');\n    if (str.slice(0, 10) === '\"Warning: ') {\n      // React warnings use console.error so that a stack trace is shown, but\n      // we don't (currently) want these to show a redbox\n      // (Note: Logic duplicated in polyfills/console.js.)\n      return;\n    }\n    const error: ExtendedError = new Error('console.error: ' + str);\n    error.framesToPop = 1;\n    reportException(error, /* isFatal */ false);\n  }\n}\n\n/**\n * Shows a redbox with stacktrace for all console.error messages.  Disable by\n * setting `console.reportErrorsAsExceptions = false;` in your app.\n */\nfunction installConsoleErrorReporter() {\n  // Enable reportErrorsAsExceptions\n  if (console._errorOriginal) {\n    return; // already installed\n  }\n  // Flow doesn't like it when you set arbitrary values on a global object\n  console._errorOriginal = console.error.bind(console);\n  console.error = reactConsoleErrorHandler;\n  if (console.reportErrorsAsExceptions === undefined) {\n    // Individual apps can disable this\n    // Flow doesn't like it when you set arbitrary values on a global object\n    console.reportErrorsAsExceptions = true;\n  }\n}\n\nmodule.exports = {handleException, installConsoleErrorReporter};\n"]}]}