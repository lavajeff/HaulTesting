{"remainingRequest":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js??ref--5-2!/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Lists/ListView/ListView.js","dependencies":[{"path":"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Lists/ListView/ListView.js","mtime":1539700108130},{"path":"/Users/jeffrey/HaulTesting/node_modules/cache-loader/dist/cjs.js","mtime":1539652983212},{"path":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js","mtime":1539652983315},{"path":"/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js","mtime":1539615827828}],"contextDependencies":[],"result":["'use strict';var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _objectWithoutProperties2=_interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _jsxFileName=\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Lists/ListView/ListView.js\";(function(){var enterModule=require('react-hot-loader').enterModule;enterModule&&enterModule(module);})();var InternalListViewType=require('InternalListViewType');var ListViewDataSource=require('ListViewDataSource');var Platform=require('Platform');var React=require('React');var ReactNative=require('ReactNative');var RCTScrollViewManager=require('NativeModules').ScrollViewManager;var ScrollView=require('ScrollView');var ScrollResponder=require('ScrollResponder');var StaticRenderer=require('StaticRenderer');var TimerMixin=require('react-timer-mixin');var View=require('View');var cloneReferencedElement=require('react-clone-referenced-element');var createReactClass=require('create-react-class');var isEmpty=require('isEmpty');var merge=require('merge');var DEFAULT_PAGE_SIZE=1;var DEFAULT_INITIAL_ROWS=10;var DEFAULT_SCROLL_RENDER_AHEAD=1000;var DEFAULT_END_REACHED_THRESHOLD=1000;var DEFAULT_SCROLL_CALLBACK_THROTTLE=50;var ListView=createReactClass({displayName:'ListView',_childFrames:[],_sentEndForContentLength:null,_scrollComponent:null,_prevRenderedRowsCount:0,_visibleRows:{},scrollProperties:{},mixins:[ScrollResponder.Mixin,TimerMixin],statics:{DataSource:ListViewDataSource},getMetrics:function getMetrics(){return{contentLength:this.scrollProperties.contentLength,totalRows:this.props.enableEmptySections?this.props.dataSource.getRowAndSectionCount():this.props.dataSource.getRowCount(),renderedRows:this.state.curRenderedRowsCount,visibleRows:Object.keys(this._visibleRows).length};},getScrollResponder:function getScrollResponder(){if(this._scrollComponent&&this._scrollComponent.getScrollResponder){return this._scrollComponent.getScrollResponder();}},getScrollableNode:function getScrollableNode(){if(this._scrollComponent&&this._scrollComponent.getScrollableNode){return this._scrollComponent.getScrollableNode();}else{return ReactNative.findNodeHandle(this._scrollComponent);}},scrollTo:function scrollTo(){if(this._scrollComponent&&this._scrollComponent.scrollTo){var _this$_scrollComponen;(_this$_scrollComponen=this._scrollComponent).scrollTo.apply(_this$_scrollComponen,arguments);}},scrollToEnd:function scrollToEnd(options){if(this._scrollComponent){if(this._scrollComponent.scrollToEnd){this._scrollComponent.scrollToEnd(options);}else{console.warn('The scroll component used by the ListView does not support '+'scrollToEnd. Check the renderScrollComponent prop of your ListView.');}}},flashScrollIndicators:function flashScrollIndicators(){if(this._scrollComponent&&this._scrollComponent.flashScrollIndicators){this._scrollComponent.flashScrollIndicators();}},setNativeProps:function setNativeProps(props){if(this._scrollComponent){this._scrollComponent.setNativeProps(props);}},getDefaultProps:function getDefaultProps(){return{initialListSize:DEFAULT_INITIAL_ROWS,pageSize:DEFAULT_PAGE_SIZE,renderScrollComponent:function renderScrollComponent(props){return React.createElement(ScrollView,(0,_extends2.default)({},props,{__source:{fileName:_jsxFileName,lineNumber:324}}));},scrollRenderAheadDistance:DEFAULT_SCROLL_RENDER_AHEAD,onEndReachedThreshold:DEFAULT_END_REACHED_THRESHOLD,stickySectionHeadersEnabled:Platform.OS==='ios',stickyHeaderIndices:[]};},getInitialState:function getInitialState(){return{curRenderedRowsCount:this.props.initialListSize,highlightedRow:{}};},getInnerViewNode:function getInnerViewNode(){return this._scrollComponent&&this._scrollComponent.getInnerViewNode();},UNSAFE_componentWillMount:function UNSAFE_componentWillMount(){this.scrollProperties={visibleLength:null,contentLength:null,offset:0};this._childFrames=[];this._visibleRows={};this._prevRenderedRowsCount=0;this._sentEndForContentLength=null;},componentDidMount:function componentDidMount(){var _this=this;this.requestAnimationFrame(function(){_this._measureAndUpdateScrollProps();});},UNSAFE_componentWillReceiveProps:function UNSAFE_componentWillReceiveProps(nextProps){var _this2=this;if(this.props.dataSource!==nextProps.dataSource||this.props.initialListSize!==nextProps.initialListSize){this.setState(function(state,props){_this2._prevRenderedRowsCount=0;return{curRenderedRowsCount:Math.min(Math.max(state.curRenderedRowsCount,props.initialListSize),props.enableEmptySections?props.dataSource.getRowAndSectionCount():props.dataSource.getRowCount())};},function(){return _this2._renderMoreRowsIfNeeded();});}},componentDidUpdate:function componentDidUpdate(){var _this3=this;this.requestAnimationFrame(function(){_this3._measureAndUpdateScrollProps();});},_onRowHighlighted:function _onRowHighlighted(sectionID,rowID){this.setState({highlightedRow:{sectionID:sectionID,rowID:rowID}});},render:function render(){var bodyComponents=[];var dataSource=this.props.dataSource;var allRowIDs=dataSource.rowIdentities;var rowCount=0;var stickySectionHeaderIndices=[];var renderSectionHeader=this.props.renderSectionHeader;var header=this.props.renderHeader&&this.props.renderHeader();var footer=this.props.renderFooter&&this.props.renderFooter();var totalIndex=header?1:0;for(var sectionIdx=0;sectionIdx<allRowIDs.length;sectionIdx++){var sectionID=dataSource.sectionIdentities[sectionIdx];var rowIDs=allRowIDs[sectionIdx];if(rowIDs.length===0){if(this.props.enableEmptySections===undefined){var warning=require('fbjs/lib/warning');warning(false,'In next release empty section headers will be rendered.'+\" In this release you can use 'enableEmptySections' flag to render empty section headers.\");continue;}else{var invariant=require('fbjs/lib/invariant');invariant(this.props.enableEmptySections,\"In next release 'enableEmptySections' flag will be deprecated, empty section headers will always be rendered.\"+' If empty section headers are not desirable their indices should be excluded from sectionIDs object.'+\" In this release 'enableEmptySections' may only have value 'true' to allow empty section headers rendering.\");}}if(renderSectionHeader){var element=renderSectionHeader(dataSource.getSectionHeaderData(sectionIdx),sectionID);if(element){bodyComponents.push(React.cloneElement(element,{key:'s_'+sectionID}));if(this.props.stickySectionHeadersEnabled){stickySectionHeaderIndices.push(totalIndex);}totalIndex++;}}for(var rowIdx=0;rowIdx<rowIDs.length;rowIdx++){var rowID=rowIDs[rowIdx];var comboID=sectionID+'_'+rowID;var shouldUpdateRow=rowCount>=this._prevRenderedRowsCount&&dataSource.rowShouldUpdate(sectionIdx,rowIdx);var row=React.createElement(StaticRenderer,{key:'r_'+comboID,shouldUpdate:!!shouldUpdateRow,render:this.props.renderRow.bind(null,dataSource.getRowData(sectionIdx,rowIdx),sectionID,rowID,this._onRowHighlighted),__source:{fileName:_jsxFileName,lineNumber:456}});bodyComponents.push(row);totalIndex++;if(this.props.renderSeparator&&(rowIdx!==rowIDs.length-1||sectionIdx===allRowIDs.length-1)){var adjacentRowHighlighted=this.state.highlightedRow.sectionID===sectionID&&(this.state.highlightedRow.rowID===rowID||this.state.highlightedRow.rowID===rowIDs[rowIdx+1]);var separator=this.props.renderSeparator(sectionID,rowID,adjacentRowHighlighted);if(separator){bodyComponents.push(React.createElement(View,{key:'s_'+comboID,__source:{fileName:_jsxFileName,lineNumber:485}},separator));totalIndex++;}}if(++rowCount===this.state.curRenderedRowsCount){break;}}if(rowCount>=this.state.curRenderedRowsCount){break;}}var _this$props=this.props,renderScrollComponent=_this$props.renderScrollComponent,props=(0,_objectWithoutProperties2.default)(_this$props,[\"renderScrollComponent\"]);if(!props.scrollEventThrottle){props.scrollEventThrottle=DEFAULT_SCROLL_CALLBACK_THROTTLE;}if(props.removeClippedSubviews===undefined){props.removeClippedSubviews=true;}(0,_extends2.default)(props,{onScroll:this._onScroll,stickyHeaderIndices:this.props.stickyHeaderIndices.concat(stickySectionHeaderIndices),onKeyboardWillShow:undefined,onKeyboardWillHide:undefined,onKeyboardDidShow:undefined,onKeyboardDidHide:undefined});return cloneReferencedElement(renderScrollComponent(props),{ref:this._setScrollComponentRef,onContentSizeChange:this._onContentSizeChange,onLayout:this._onLayout,DEPRECATED_sendUpdatedChildFrames:typeof props.onChangeVisibleRows!==undefined},header,bodyComponents,footer);},_measureAndUpdateScrollProps:function _measureAndUpdateScrollProps(){var scrollComponent=this.getScrollResponder();if(!scrollComponent||!scrollComponent.getInnerViewNode){return;}RCTScrollViewManager&&RCTScrollViewManager.calculateChildFrames&&RCTScrollViewManager.calculateChildFrames(ReactNative.findNodeHandle(scrollComponent),this._updateVisibleRows);},_setScrollComponentRef:function _setScrollComponentRef(scrollComponent){this._scrollComponent=scrollComponent;},_onContentSizeChange:function _onContentSizeChange(width,height){var contentLength=!this.props.horizontal?height:width;if(contentLength!==this.scrollProperties.contentLength){this.scrollProperties.contentLength=contentLength;this._updateVisibleRows();this._renderMoreRowsIfNeeded();}this.props.onContentSizeChange&&this.props.onContentSizeChange(width,height);},_onLayout:function _onLayout(event){var _event$nativeEvent$la=event.nativeEvent.layout,width=_event$nativeEvent$la.width,height=_event$nativeEvent$la.height;var visibleLength=!this.props.horizontal?height:width;if(visibleLength!==this.scrollProperties.visibleLength){this.scrollProperties.visibleLength=visibleLength;this._updateVisibleRows();this._renderMoreRowsIfNeeded();}this.props.onLayout&&this.props.onLayout(event);},_maybeCallOnEndReached:function _maybeCallOnEndReached(event){if(this.props.onEndReached&&this.scrollProperties.contentLength!==this._sentEndForContentLength&&this._getDistanceFromEnd(this.scrollProperties)<this.props.onEndReachedThreshold&&this.state.curRenderedRowsCount===(this.props.enableEmptySections?this.props.dataSource.getRowAndSectionCount():this.props.dataSource.getRowCount())){this._sentEndForContentLength=this.scrollProperties.contentLength;this.props.onEndReached(event);return true;}return false;},_renderMoreRowsIfNeeded:function _renderMoreRowsIfNeeded(){if(this.scrollProperties.contentLength===null||this.scrollProperties.visibleLength===null||this.state.curRenderedRowsCount===(this.props.enableEmptySections?this.props.dataSource.getRowAndSectionCount():this.props.dataSource.getRowCount())){this._maybeCallOnEndReached();return;}var distanceFromEnd=this._getDistanceFromEnd(this.scrollProperties);if(distanceFromEnd<this.props.scrollRenderAheadDistance){this._pageInNewRows();}},_pageInNewRows:function _pageInNewRows(){var _this4=this;this.setState(function(state,props){var rowsToRender=Math.min(state.curRenderedRowsCount+props.pageSize,props.enableEmptySections?props.dataSource.getRowAndSectionCount():props.dataSource.getRowCount());_this4._prevRenderedRowsCount=state.curRenderedRowsCount;return{curRenderedRowsCount:rowsToRender};},function(){_this4._measureAndUpdateScrollProps();_this4._prevRenderedRowsCount=_this4.state.curRenderedRowsCount;});},_getDistanceFromEnd:function _getDistanceFromEnd(scrollProperties){return scrollProperties.contentLength-scrollProperties.visibleLength-scrollProperties.offset;},_updateVisibleRows:function _updateVisibleRows(updatedFrames){var _this5=this;if(!this.props.onChangeVisibleRows){return;}if(updatedFrames){updatedFrames.forEach(function(newFrame){_this5._childFrames[newFrame.index]=merge(newFrame);});}var isVertical=!this.props.horizontal;var dataSource=this.props.dataSource;var visibleMin=this.scrollProperties.offset;var visibleMax=visibleMin+this.scrollProperties.visibleLength;var allRowIDs=dataSource.rowIdentities;var header=this.props.renderHeader&&this.props.renderHeader();var totalIndex=header?1:0;var visibilityChanged=false;var changedRows={};for(var sectionIdx=0;sectionIdx<allRowIDs.length;sectionIdx++){var rowIDs=allRowIDs[sectionIdx];if(rowIDs.length===0){continue;}var sectionID=dataSource.sectionIdentities[sectionIdx];if(this.props.renderSectionHeader){totalIndex++;}var visibleSection=this._visibleRows[sectionID];if(!visibleSection){visibleSection={};}for(var rowIdx=0;rowIdx<rowIDs.length;rowIdx++){var rowID=rowIDs[rowIdx];var frame=this._childFrames[totalIndex];totalIndex++;if(this.props.renderSeparator&&(rowIdx!==rowIDs.length-1||sectionIdx===allRowIDs.length-1)){totalIndex++;}if(!frame){break;}var rowVisible=visibleSection[rowID];var min=isVertical?frame.y:frame.x;var max=min+(isVertical?frame.height:frame.width);if(!min&&!max||min===max){break;}if(min>visibleMax||max<visibleMin){if(rowVisible){visibilityChanged=true;delete visibleSection[rowID];if(!changedRows[sectionID]){changedRows[sectionID]={};}changedRows[sectionID][rowID]=false;}}else if(!rowVisible){visibilityChanged=true;visibleSection[rowID]=true;if(!changedRows[sectionID]){changedRows[sectionID]={};}changedRows[sectionID][rowID]=true;}}if(!isEmpty(visibleSection)){this._visibleRows[sectionID]=visibleSection;}else if(this._visibleRows[sectionID]){delete this._visibleRows[sectionID];}}visibilityChanged&&this.props.onChangeVisibleRows(this._visibleRows,changedRows);},_onScroll:function _onScroll(e){var isVertical=!this.props.horizontal;this.scrollProperties.visibleLength=e.nativeEvent.layoutMeasurement[isVertical?'height':'width'];this.scrollProperties.contentLength=e.nativeEvent.contentSize[isVertical?'height':'width'];this.scrollProperties.offset=e.nativeEvent.contentOffset[isVertical?'y':'x'];this._updateVisibleRows(e.nativeEvent.updatedChildFrames);if(!this._maybeCallOnEndReached(e)){this._renderMoreRowsIfNeeded();}if(this.props.onEndReached&&this._getDistanceFromEnd(this.scrollProperties)>this.props.onEndReachedThreshold){this._sentEndForContentLength=null;}this.props.onScroll&&this.props.onScroll(e);}});module.exports=ListView;;(function(){var reactHotLoader=require('react-hot-loader').default;var leaveModule=require('react-hot-loader').leaveModule;if(!reactHotLoader){return;}reactHotLoader.register(RCTScrollViewManager,\"RCTScrollViewManager\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Lists/ListView/ListView.js\");reactHotLoader.register(DEFAULT_PAGE_SIZE,\"DEFAULT_PAGE_SIZE\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Lists/ListView/ListView.js\");reactHotLoader.register(DEFAULT_INITIAL_ROWS,\"DEFAULT_INITIAL_ROWS\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Lists/ListView/ListView.js\");reactHotLoader.register(DEFAULT_SCROLL_RENDER_AHEAD,\"DEFAULT_SCROLL_RENDER_AHEAD\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Lists/ListView/ListView.js\");reactHotLoader.register(DEFAULT_END_REACHED_THRESHOLD,\"DEFAULT_END_REACHED_THRESHOLD\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Lists/ListView/ListView.js\");reactHotLoader.register(DEFAULT_SCROLL_CALLBACK_THROTTLE,\"DEFAULT_SCROLL_CALLBACK_THROTTLE\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Lists/ListView/ListView.js\");reactHotLoader.register(ListView,\"ListView\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Lists/ListView/ListView.js\");leaveModule(module);})();;",{"version":3,"sources":["/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Lists/ListView/ListView.js"],"names":["InternalListViewType","require","ListViewDataSource","Platform","React","ReactNative","RCTScrollViewManager","ScrollViewManager","ScrollView","ScrollResponder","StaticRenderer","TimerMixin","View","cloneReferencedElement","createReactClass","isEmpty","merge","DEFAULT_PAGE_SIZE","DEFAULT_INITIAL_ROWS","DEFAULT_SCROLL_RENDER_AHEAD","DEFAULT_END_REACHED_THRESHOLD","DEFAULT_SCROLL_CALLBACK_THROTTLE","ListView","displayName","_childFrames","_sentEndForContentLength","_scrollComponent","_prevRenderedRowsCount","_visibleRows","scrollProperties","mixins","Mixin","statics","DataSource","getMetrics","contentLength","totalRows","props","enableEmptySections","dataSource","getRowAndSectionCount","getRowCount","renderedRows","state","curRenderedRowsCount","visibleRows","Object","keys","length","getScrollResponder","getScrollableNode","findNodeHandle","scrollTo","scrollToEnd","options","console","warn","flashScrollIndicators","setNativeProps","getDefaultProps","initialListSize","pageSize","renderScrollComponent","scrollRenderAheadDistance","onEndReachedThreshold","stickySectionHeadersEnabled","OS","stickyHeaderIndices","getInitialState","highlightedRow","getInnerViewNode","UNSAFE_componentWillMount","visibleLength","offset","componentDidMount","requestAnimationFrame","_measureAndUpdateScrollProps","UNSAFE_componentWillReceiveProps","nextProps","setState","Math","min","max","_renderMoreRowsIfNeeded","componentDidUpdate","_onRowHighlighted","sectionID","rowID","render","bodyComponents","allRowIDs","rowIdentities","rowCount","stickySectionHeaderIndices","renderSectionHeader","header","renderHeader","footer","renderFooter","totalIndex","sectionIdx","sectionIdentities","rowIDs","undefined","warning","invariant","element","getSectionHeaderData","push","cloneElement","key","rowIdx","comboID","shouldUpdateRow","rowShouldUpdate","row","renderRow","bind","getRowData","renderSeparator","adjacentRowHighlighted","separator","scrollEventThrottle","removeClippedSubviews","onScroll","_onScroll","concat","onKeyboardWillShow","onKeyboardWillHide","onKeyboardDidShow","onKeyboardDidHide","ref","_setScrollComponentRef","onContentSizeChange","_onContentSizeChange","onLayout","_onLayout","DEPRECATED_sendUpdatedChildFrames","onChangeVisibleRows","scrollComponent","calculateChildFrames","_updateVisibleRows","width","height","horizontal","event","nativeEvent","layout","_maybeCallOnEndReached","onEndReached","_getDistanceFromEnd","distanceFromEnd","_pageInNewRows","rowsToRender","updatedFrames","forEach","newFrame","index","isVertical","visibleMin","visibleMax","visibilityChanged","changedRows","visibleSection","frame","rowVisible","y","x","e","layoutMeasurement","contentSize","contentOffset","updatedChildFrames","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst InternalListViewType = require('InternalListViewType');\nconst ListViewDataSource = require('ListViewDataSource');\nconst Platform = require('Platform');\nconst React = require('React');\nconst ReactNative = require('ReactNative');\nconst RCTScrollViewManager = require('NativeModules').ScrollViewManager;\nconst ScrollView = require('ScrollView');\nconst ScrollResponder = require('ScrollResponder');\nconst StaticRenderer = require('StaticRenderer');\nconst TimerMixin = require('react-timer-mixin');\nconst View = require('View');\nconst cloneReferencedElement = require('react-clone-referenced-element');\nconst createReactClass = require('create-react-class');\nconst isEmpty = require('isEmpty');\nconst merge = require('merge');\n\nimport type {Props as ScrollViewProps} from 'ScrollView';\n\nconst DEFAULT_PAGE_SIZE = 1;\nconst DEFAULT_INITIAL_ROWS = 10;\nconst DEFAULT_SCROLL_RENDER_AHEAD = 1000;\nconst DEFAULT_END_REACHED_THRESHOLD = 1000;\nconst DEFAULT_SCROLL_CALLBACK_THROTTLE = 50;\n\ntype Props = $ReadOnly<{|\n  ...ScrollViewProps,\n\n  /**\n   * An instance of [ListView.DataSource](docs/listviewdatasource.html) to use\n   */\n  dataSource: ListViewDataSource,\n  /**\n   * (sectionID, rowID, adjacentRowHighlighted) => renderable\n   *\n   * If provided, a renderable component to be rendered as the separator\n   * below each row but not the last row if there is a section header below.\n   * Take a sectionID and rowID of the row above and whether its adjacent row\n   * is highlighted.\n   */\n  renderSeparator?: ?Function,\n  /**\n   * (rowData, sectionID, rowID, highlightRow) => renderable\n   *\n   * Takes a data entry from the data source and its ids and should return\n   * a renderable component to be rendered as the row. By default the data\n   * is exactly what was put into the data source, but it's also possible to\n   * provide custom extractors. ListView can be notified when a row is\n   * being highlighted by calling `highlightRow(sectionID, rowID)`. This\n   * sets a boolean value of adjacentRowHighlighted in renderSeparator, allowing you\n   * to control the separators above and below the highlighted row. The highlighted\n   * state of a row can be reset by calling highlightRow(null).\n   */\n  renderRow: Function,\n  /**\n   * How many rows to render on initial component mount. Use this to make\n   * it so that the first screen worth of data appears at one time instead of\n   * over the course of multiple frames.\n   */\n  initialListSize?: ?number,\n  /**\n   * Called when all rows have been rendered and the list has been scrolled\n   * to within onEndReachedThreshold of the bottom. The native scroll\n   * event is provided.\n   */\n  onEndReached?: ?Function,\n  /**\n   * Threshold in pixels (virtual, not physical) for calling onEndReached.\n   */\n  onEndReachedThreshold?: ?number,\n  /**\n   * Number of rows to render per event loop. Note: if your 'rows' are actually\n   * cells, i.e. they don't span the full width of your view (as in the\n   * ListViewGridLayoutExample), you should set the pageSize to be a multiple\n   * of the number of cells per row, otherwise you're likely to see gaps at\n   * the edge of the ListView as new pages are loaded.\n   */\n  pageSize?: ?number,\n  /**\n   * () => renderable\n   *\n   * The header and footer are always rendered (if these props are provided)\n   * on every render pass. If they are expensive to re-render, wrap them\n   * in StaticContainer or other mechanism as appropriate. Footer is always\n   * at the bottom of the list, and header at the top, on every render pass.\n   * In a horizontal ListView, the header is rendered on the left and the\n   * footer on the right.\n   */\n  renderFooter?: ?Function,\n  renderHeader?: ?Function,\n  /**\n   * (sectionData, sectionID) => renderable\n   *\n   * If provided, a header is rendered for this section.\n   */\n  renderSectionHeader?: ?Function,\n  /**\n   * (props) => renderable\n   *\n   * A function that returns the scrollable component in which the list rows\n   * are rendered. Defaults to returning a ScrollView with the given props.\n   */\n  renderScrollComponent?: ?Function,\n  /**\n   * How early to start rendering rows before they come on screen, in\n   * pixels.\n   */\n  scrollRenderAheadDistance?: ?number,\n  /**\n   * (visibleRows, changedRows) => void\n   *\n   * Called when the set of visible rows changes. `visibleRows` maps\n   * { sectionID: { rowID: true }} for all the visible rows, and\n   * `changedRows` maps { sectionID: { rowID: true | false }} for the rows\n   * that have changed their visibility, with true indicating visible, and\n   * false indicating the view has moved out of view.\n   */\n  onChangeVisibleRows?: ?Function,\n  /**\n   * A performance optimization for improving scroll perf of\n   * large lists, used in conjunction with overflow: 'hidden' on the row\n   * containers. This is enabled by default.\n   */\n  removeClippedSubviews?: ?boolean,\n  /**\n   * Makes the sections headers sticky. The sticky behavior means that it\n   * will scroll with the content at the top of the section until it reaches\n   * the top of the screen, at which point it will stick to the top until it\n   * is pushed off the screen by the next section header. This property is\n   * not supported in conjunction with `horizontal={true}`. Only enabled by\n   * default on iOS because of typical platform standards.\n   */\n  stickySectionHeadersEnabled?: ?boolean,\n  /**\n   * An array of child indices determining which children get docked to the\n   * top of the screen when scrolling. For example, passing\n   * `stickyHeaderIndices={[0]}` will cause the first child to be fixed to the\n   * top of the scroll view. This property is not supported in conjunction\n   * with `horizontal={true}`.\n   */\n  stickyHeaderIndices?: ?$ReadOnlyArray<number>,\n  /**\n   * Flag indicating whether empty section headers should be rendered. In the future release\n   * empty section headers will be rendered by default, and the flag will be deprecated.\n   * If empty sections are not desired to be rendered their indices should be excluded from sectionID object.\n   */\n  enableEmptySections?: ?boolean,\n|}>;\n\n/**\n * DEPRECATED - use one of the new list components, such as [`FlatList`](docs/flatlist.html)\n * or [`SectionList`](docs/sectionlist.html) for bounded memory use, fewer bugs,\n * better performance, an easier to use API, and more features. Check out this\n * [blog post](https://facebook.github.io/react-native/blog/2017/03/13/better-list-views.html)\n * for more details.\n *\n * ListView - A core component designed for efficient display of vertically\n * scrolling lists of changing data. The minimal API is to create a\n * [`ListView.DataSource`](docs/listviewdatasource.html), populate it with a simple\n * array of data blobs, and instantiate a `ListView` component with that data\n * source and a `renderRow` callback which takes a blob from the data array and\n * returns a renderable component.\n *\n * Minimal example:\n *\n * ```\n * class MyComponent extends Component {\n *   constructor() {\n *     super();\n *     const ds = new ListView.DataSource({rowHasChanged: (r1, r2) => r1 !== r2});\n *     this.state = {\n *       dataSource: ds.cloneWithRows(['row 1', 'row 2']),\n *     };\n *   }\n *\n *   render() {\n *     return (\n *       <ListView\n *         dataSource={this.state.dataSource}\n *         renderRow={(rowData) => <Text>{rowData}</Text>}\n *       />\n *     );\n *   }\n * }\n * ```\n *\n * ListView also supports more advanced features, including sections with sticky\n * section headers, header and footer support, callbacks on reaching the end of\n * the available data (`onEndReached`) and on the set of rows that are visible\n * in the device viewport change (`onChangeVisibleRows`), and several\n * performance optimizations.\n *\n * There are a few performance operations designed to make ListView scroll\n * smoothly while dynamically loading potentially very large (or conceptually\n * infinite) data sets:\n *\n *  * Only re-render changed rows - the rowHasChanged function provided to the\n *    data source tells the ListView if it needs to re-render a row because the\n *    source data has changed - see ListViewDataSource for more details.\n *\n *  * Rate-limited row rendering - By default, only one row is rendered per\n *    event-loop (customizable with the `pageSize` prop). This breaks up the\n *    work into smaller chunks to reduce the chance of dropping frames while\n *    rendering rows.\n */\n\nconst ListView = createReactClass({\n  displayName: 'ListView',\n  _childFrames: ([]: Array<Object>),\n  _sentEndForContentLength: (null: ?number),\n  _scrollComponent: (null: ?React.ElementRef<typeof ScrollView>),\n  _prevRenderedRowsCount: 0,\n  _visibleRows: ({}: Object),\n  scrollProperties: ({}: Object),\n\n  mixins: [ScrollResponder.Mixin, TimerMixin],\n\n  statics: {\n    DataSource: ListViewDataSource,\n  },\n\n  /**\n   * Exports some data, e.g. for perf investigations or analytics.\n   */\n  getMetrics: function() {\n    return {\n      contentLength: this.scrollProperties.contentLength,\n      totalRows: this.props.enableEmptySections\n        ? this.props.dataSource.getRowAndSectionCount()\n        : this.props.dataSource.getRowCount(),\n      renderedRows: this.state.curRenderedRowsCount,\n      visibleRows: Object.keys(this._visibleRows).length,\n    };\n  },\n\n  /**\n   * Provides a handle to the underlying scroll responder.\n   * Note that `this._scrollComponent` might not be a `ScrollView`, so we\n   * need to check that it responds to `getScrollResponder` before calling it.\n   */\n  getScrollResponder: function() {\n    if (this._scrollComponent && this._scrollComponent.getScrollResponder) {\n      return this._scrollComponent.getScrollResponder();\n    }\n  },\n\n  getScrollableNode: function() {\n    if (this._scrollComponent && this._scrollComponent.getScrollableNode) {\n      return this._scrollComponent.getScrollableNode();\n    } else {\n      return ReactNative.findNodeHandle(this._scrollComponent);\n    }\n  },\n\n  /**\n   * Scrolls to a given x, y offset, either immediately or with a smooth animation.\n   *\n   * See `ScrollView#scrollTo`.\n   */\n  scrollTo: function(...args: any) {\n    if (this._scrollComponent && this._scrollComponent.scrollTo) {\n      this._scrollComponent.scrollTo(...args);\n    }\n  },\n\n  /**\n   * If this is a vertical ListView scrolls to the bottom.\n   * If this is a horizontal ListView scrolls to the right.\n   *\n   * Use `scrollToEnd({animated: true})` for smooth animated scrolling,\n   * `scrollToEnd({animated: false})` for immediate scrolling.\n   * If no options are passed, `animated` defaults to true.\n   *\n   * See `ScrollView#scrollToEnd`.\n   */\n  scrollToEnd: function(options?: ?{animated?: boolean}) {\n    if (this._scrollComponent) {\n      if (this._scrollComponent.scrollToEnd) {\n        this._scrollComponent.scrollToEnd(options);\n      } else {\n        console.warn(\n          'The scroll component used by the ListView does not support ' +\n            'scrollToEnd. Check the renderScrollComponent prop of your ListView.',\n        );\n      }\n    }\n  },\n\n  /**\n   * Displays the scroll indicators momentarily.\n   *\n   * @platform ios\n   */\n  flashScrollIndicators: function() {\n    if (this._scrollComponent && this._scrollComponent.flashScrollIndicators) {\n      this._scrollComponent.flashScrollIndicators();\n    }\n  },\n\n  setNativeProps: function(props: Object) {\n    if (this._scrollComponent) {\n      this._scrollComponent.setNativeProps(props);\n    }\n  },\n\n  /**\n   * React life cycle hooks.\n   */\n\n  getDefaultProps: function() {\n    return {\n      initialListSize: DEFAULT_INITIAL_ROWS,\n      pageSize: DEFAULT_PAGE_SIZE,\n      renderScrollComponent: props => <ScrollView {...props} />,\n      scrollRenderAheadDistance: DEFAULT_SCROLL_RENDER_AHEAD,\n      onEndReachedThreshold: DEFAULT_END_REACHED_THRESHOLD,\n      stickySectionHeadersEnabled: Platform.OS === 'ios',\n      stickyHeaderIndices: [],\n    };\n  },\n\n  getInitialState: function() {\n    return {\n      curRenderedRowsCount: this.props.initialListSize,\n      highlightedRow: ({}: Object),\n    };\n  },\n\n  getInnerViewNode: function() {\n    return this._scrollComponent && this._scrollComponent.getInnerViewNode();\n  },\n\n  UNSAFE_componentWillMount: function() {\n    // this data should never trigger a render pass, so don't put in state\n    this.scrollProperties = {\n      visibleLength: null,\n      contentLength: null,\n      offset: 0,\n    };\n    this._childFrames = [];\n    this._visibleRows = {};\n    this._prevRenderedRowsCount = 0;\n    this._sentEndForContentLength = null;\n  },\n\n  componentDidMount: function() {\n    // do this in animation frame until componentDidMount actually runs after\n    // the component is laid out\n    this.requestAnimationFrame(() => {\n      this._measureAndUpdateScrollProps();\n    });\n  },\n\n  UNSAFE_componentWillReceiveProps: function(nextProps: Object) {\n    if (\n      this.props.dataSource !== nextProps.dataSource ||\n      this.props.initialListSize !== nextProps.initialListSize\n    ) {\n      this.setState(\n        (state, props) => {\n          this._prevRenderedRowsCount = 0;\n          return {\n            curRenderedRowsCount: Math.min(\n              Math.max(state.curRenderedRowsCount, props.initialListSize),\n              props.enableEmptySections\n                ? props.dataSource.getRowAndSectionCount()\n                : props.dataSource.getRowCount(),\n            ),\n          };\n        },\n        () => this._renderMoreRowsIfNeeded(),\n      );\n    }\n  },\n\n  componentDidUpdate: function() {\n    this.requestAnimationFrame(() => {\n      this._measureAndUpdateScrollProps();\n    });\n  },\n\n  _onRowHighlighted: function(sectionID: string, rowID: string) {\n    this.setState({highlightedRow: {sectionID, rowID}});\n  },\n\n  render: function() {\n    const bodyComponents = [];\n\n    const dataSource = this.props.dataSource;\n    const allRowIDs = dataSource.rowIdentities;\n    let rowCount = 0;\n    const stickySectionHeaderIndices = [];\n\n    const {renderSectionHeader} = this.props;\n\n    const header = this.props.renderHeader && this.props.renderHeader();\n    const footer = this.props.renderFooter && this.props.renderFooter();\n    let totalIndex = header ? 1 : 0;\n\n    for (let sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {\n      const sectionID = dataSource.sectionIdentities[sectionIdx];\n      const rowIDs = allRowIDs[sectionIdx];\n      if (rowIDs.length === 0) {\n        if (this.props.enableEmptySections === undefined) {\n          const warning = require('fbjs/lib/warning');\n          warning(\n            false,\n            'In next release empty section headers will be rendered.' +\n              \" In this release you can use 'enableEmptySections' flag to render empty section headers.\",\n          );\n          continue;\n        } else {\n          const invariant = require('fbjs/lib/invariant');\n          invariant(\n            this.props.enableEmptySections,\n            \"In next release 'enableEmptySections' flag will be deprecated, empty section headers will always be rendered.\" +\n              ' If empty section headers are not desirable their indices should be excluded from sectionIDs object.' +\n              \" In this release 'enableEmptySections' may only have value 'true' to allow empty section headers rendering.\",\n          );\n        }\n      }\n\n      if (renderSectionHeader) {\n        const element = renderSectionHeader(\n          dataSource.getSectionHeaderData(sectionIdx),\n          sectionID,\n        );\n        if (element) {\n          bodyComponents.push(\n            React.cloneElement(element, {key: 's_' + sectionID}),\n          );\n          if (this.props.stickySectionHeadersEnabled) {\n            stickySectionHeaderIndices.push(totalIndex);\n          }\n          totalIndex++;\n        }\n      }\n\n      for (let rowIdx = 0; rowIdx < rowIDs.length; rowIdx++) {\n        const rowID = rowIDs[rowIdx];\n        const comboID = sectionID + '_' + rowID;\n        const shouldUpdateRow =\n          rowCount >= this._prevRenderedRowsCount &&\n          dataSource.rowShouldUpdate(sectionIdx, rowIdx);\n        const row = (\n          <StaticRenderer\n            key={'r_' + comboID}\n            shouldUpdate={!!shouldUpdateRow}\n            render={this.props.renderRow.bind(\n              null,\n              dataSource.getRowData(sectionIdx, rowIdx),\n              sectionID,\n              rowID,\n              this._onRowHighlighted,\n            )}\n          />\n        );\n        bodyComponents.push(row);\n        totalIndex++;\n\n        if (\n          this.props.renderSeparator &&\n          (rowIdx !== rowIDs.length - 1 || sectionIdx === allRowIDs.length - 1)\n        ) {\n          const adjacentRowHighlighted =\n            this.state.highlightedRow.sectionID === sectionID &&\n            (this.state.highlightedRow.rowID === rowID ||\n              this.state.highlightedRow.rowID === rowIDs[rowIdx + 1]);\n          const separator = this.props.renderSeparator(\n            sectionID,\n            rowID,\n            adjacentRowHighlighted,\n          );\n          if (separator) {\n            bodyComponents.push(<View key={'s_' + comboID}>{separator}</View>);\n            totalIndex++;\n          }\n        }\n        if (++rowCount === this.state.curRenderedRowsCount) {\n          break;\n        }\n      }\n      if (rowCount >= this.state.curRenderedRowsCount) {\n        break;\n      }\n    }\n\n    const {renderScrollComponent, ...props} = this.props;\n    if (!props.scrollEventThrottle) {\n      props.scrollEventThrottle = DEFAULT_SCROLL_CALLBACK_THROTTLE;\n    }\n    if (props.removeClippedSubviews === undefined) {\n      props.removeClippedSubviews = true;\n    }\n    Object.assign(props, {\n      onScroll: this._onScroll,\n      stickyHeaderIndices: this.props.stickyHeaderIndices.concat(\n        stickySectionHeaderIndices,\n      ),\n\n      // Do not pass these events downstream to ScrollView since they will be\n      // registered in ListView's own ScrollResponder.Mixin\n      onKeyboardWillShow: undefined,\n      onKeyboardWillHide: undefined,\n      onKeyboardDidShow: undefined,\n      onKeyboardDidHide: undefined,\n    });\n\n    return cloneReferencedElement(\n      renderScrollComponent(props),\n      {\n        ref: this._setScrollComponentRef,\n        onContentSizeChange: this._onContentSizeChange,\n        onLayout: this._onLayout,\n        DEPRECATED_sendUpdatedChildFrames:\n          typeof props.onChangeVisibleRows !== undefined,\n      },\n      header,\n      bodyComponents,\n      footer,\n    );\n  },\n\n  /**\n   * Private methods\n   */\n\n  _measureAndUpdateScrollProps: function() {\n    const scrollComponent = this.getScrollResponder();\n    if (!scrollComponent || !scrollComponent.getInnerViewNode) {\n      return;\n    }\n\n    // RCTScrollViewManager.calculateChildFrames is not available on\n    // every platform\n    RCTScrollViewManager &&\n      RCTScrollViewManager.calculateChildFrames &&\n      RCTScrollViewManager.calculateChildFrames(\n        ReactNative.findNodeHandle(scrollComponent),\n        this._updateVisibleRows,\n      );\n  },\n\n  _setScrollComponentRef: function(scrollComponent) {\n    this._scrollComponent = scrollComponent;\n  },\n\n  _onContentSizeChange: function(width: number, height: number) {\n    const contentLength = !this.props.horizontal ? height : width;\n    if (contentLength !== this.scrollProperties.contentLength) {\n      this.scrollProperties.contentLength = contentLength;\n      this._updateVisibleRows();\n      this._renderMoreRowsIfNeeded();\n    }\n    this.props.onContentSizeChange &&\n      this.props.onContentSizeChange(width, height);\n  },\n\n  _onLayout: function(event: Object) {\n    const {width, height} = event.nativeEvent.layout;\n    const visibleLength = !this.props.horizontal ? height : width;\n    if (visibleLength !== this.scrollProperties.visibleLength) {\n      this.scrollProperties.visibleLength = visibleLength;\n      this._updateVisibleRows();\n      this._renderMoreRowsIfNeeded();\n    }\n    this.props.onLayout && this.props.onLayout(event);\n  },\n\n  _maybeCallOnEndReached: function(event?: Object) {\n    if (\n      this.props.onEndReached &&\n      this.scrollProperties.contentLength !== this._sentEndForContentLength &&\n      this._getDistanceFromEnd(this.scrollProperties) <\n        this.props.onEndReachedThreshold &&\n      this.state.curRenderedRowsCount ===\n        (this.props.enableEmptySections\n          ? this.props.dataSource.getRowAndSectionCount()\n          : this.props.dataSource.getRowCount())\n    ) {\n      this._sentEndForContentLength = this.scrollProperties.contentLength;\n      this.props.onEndReached(event);\n      return true;\n    }\n    return false;\n  },\n\n  _renderMoreRowsIfNeeded: function() {\n    if (\n      this.scrollProperties.contentLength === null ||\n      this.scrollProperties.visibleLength === null ||\n      this.state.curRenderedRowsCount ===\n        (this.props.enableEmptySections\n          ? this.props.dataSource.getRowAndSectionCount()\n          : this.props.dataSource.getRowCount())\n    ) {\n      this._maybeCallOnEndReached();\n      return;\n    }\n\n    const distanceFromEnd = this._getDistanceFromEnd(this.scrollProperties);\n    if (distanceFromEnd < this.props.scrollRenderAheadDistance) {\n      this._pageInNewRows();\n    }\n  },\n\n  _pageInNewRows: function() {\n    this.setState(\n      (state, props) => {\n        const rowsToRender = Math.min(\n          state.curRenderedRowsCount + props.pageSize,\n          props.enableEmptySections\n            ? props.dataSource.getRowAndSectionCount()\n            : props.dataSource.getRowCount(),\n        );\n        this._prevRenderedRowsCount = state.curRenderedRowsCount;\n        return {\n          curRenderedRowsCount: rowsToRender,\n        };\n      },\n      () => {\n        this._measureAndUpdateScrollProps();\n        this._prevRenderedRowsCount = this.state.curRenderedRowsCount;\n      },\n    );\n  },\n\n  _getDistanceFromEnd: function(scrollProperties: Object) {\n    return (\n      scrollProperties.contentLength -\n      scrollProperties.visibleLength -\n      scrollProperties.offset\n    );\n  },\n\n  _updateVisibleRows: function(updatedFrames?: Array<Object>) {\n    if (!this.props.onChangeVisibleRows) {\n      return; // No need to compute visible rows if there is no callback\n    }\n    if (updatedFrames) {\n      updatedFrames.forEach(newFrame => {\n        this._childFrames[newFrame.index] = merge(newFrame);\n      });\n    }\n    const isVertical = !this.props.horizontal;\n    const dataSource = this.props.dataSource;\n    const visibleMin = this.scrollProperties.offset;\n    const visibleMax = visibleMin + this.scrollProperties.visibleLength;\n    const allRowIDs = dataSource.rowIdentities;\n\n    const header = this.props.renderHeader && this.props.renderHeader();\n    let totalIndex = header ? 1 : 0;\n    let visibilityChanged = false;\n    const changedRows = {};\n    for (let sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {\n      const rowIDs = allRowIDs[sectionIdx];\n      if (rowIDs.length === 0) {\n        continue;\n      }\n      const sectionID = dataSource.sectionIdentities[sectionIdx];\n      if (this.props.renderSectionHeader) {\n        totalIndex++;\n      }\n      let visibleSection = this._visibleRows[sectionID];\n      if (!visibleSection) {\n        visibleSection = {};\n      }\n      for (let rowIdx = 0; rowIdx < rowIDs.length; rowIdx++) {\n        const rowID = rowIDs[rowIdx];\n        const frame = this._childFrames[totalIndex];\n        totalIndex++;\n        if (\n          this.props.renderSeparator &&\n          (rowIdx !== rowIDs.length - 1 || sectionIdx === allRowIDs.length - 1)\n        ) {\n          totalIndex++;\n        }\n        if (!frame) {\n          break;\n        }\n        const rowVisible = visibleSection[rowID];\n        const min = isVertical ? frame.y : frame.x;\n        const max = min + (isVertical ? frame.height : frame.width);\n        if ((!min && !max) || min === max) {\n          break;\n        }\n        if (min > visibleMax || max < visibleMin) {\n          if (rowVisible) {\n            visibilityChanged = true;\n            delete visibleSection[rowID];\n            if (!changedRows[sectionID]) {\n              changedRows[sectionID] = {};\n            }\n            changedRows[sectionID][rowID] = false;\n          }\n        } else if (!rowVisible) {\n          visibilityChanged = true;\n          visibleSection[rowID] = true;\n          if (!changedRows[sectionID]) {\n            changedRows[sectionID] = {};\n          }\n          changedRows[sectionID][rowID] = true;\n        }\n      }\n      if (!isEmpty(visibleSection)) {\n        this._visibleRows[sectionID] = visibleSection;\n      } else if (this._visibleRows[sectionID]) {\n        delete this._visibleRows[sectionID];\n      }\n    }\n    visibilityChanged &&\n      this.props.onChangeVisibleRows(this._visibleRows, changedRows);\n  },\n\n  _onScroll: function(e: Object) {\n    const isVertical = !this.props.horizontal;\n    this.scrollProperties.visibleLength =\n      e.nativeEvent.layoutMeasurement[isVertical ? 'height' : 'width'];\n    this.scrollProperties.contentLength =\n      e.nativeEvent.contentSize[isVertical ? 'height' : 'width'];\n    this.scrollProperties.offset =\n      e.nativeEvent.contentOffset[isVertical ? 'y' : 'x'];\n    this._updateVisibleRows(e.nativeEvent.updatedChildFrames);\n    if (!this._maybeCallOnEndReached(e)) {\n      this._renderMoreRowsIfNeeded();\n    }\n\n    if (\n      this.props.onEndReached &&\n      this._getDistanceFromEnd(this.scrollProperties) >\n        this.props.onEndReachedThreshold\n    ) {\n      // Scrolled out of the end zone, so it should be able to trigger again.\n      this._sentEndForContentLength = null;\n    }\n\n    this.props.onScroll && this.props.onScroll(e);\n  },\n});\n\nmodule.exports = ((ListView: any): Class<InternalListViewType<Props>>);\n"]}]}