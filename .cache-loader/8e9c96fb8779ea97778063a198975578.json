{"remainingRequest":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js??ref--5-2!/Users/jeffrey/HaulTesting/node_modules/haul/src/utils/polyfillEnvironment.js","dependencies":[{"path":"/Users/jeffrey/HaulTesting/node_modules/haul/src/utils/polyfillEnvironment.js","mtime":1539700438713},{"path":"/Users/jeffrey/HaulTesting/node_modules/cache-loader/dist/cjs.js","mtime":1539652983212},{"path":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js","mtime":1539652983315},{"path":"/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js","mtime":1539615827828}],"contextDependencies":[],"result":["var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _slicedToArray2=_interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));var _reactNative=require(\"react-native\");require('../hot/client/importScriptsPolyfill');if(process.env.NODE_ENV!=='production'){var protocol;var origin;if(typeof window!=='undefined'&&window.location&&window.location.protocol!=='file:'){protocol=window.location.protocol;origin=window.location.host;}else{var scriptURL=_reactNative.NativeModules.SourceCode.scriptURL;if(scriptURL){var _scriptURL$split=scriptURL.split('/');var _scriptURL$split2=(0,_slicedToArray2.default)(_scriptURL$split,3);protocol=_scriptURL$split2[0];origin=_scriptURL$split2[2];}}if(protocol&&origin){global.DEV_SERVER_ORIGIN=protocol+\"//\"+origin;__webpack_require__.p=global.DEV_SERVER_ORIGIN+\"/\";}}",{"version":3,"sources":["/Users/jeffrey/HaulTesting/node_modules/haul/src/utils/polyfillEnvironment.js"],"names":["require","process","env","NODE_ENV","protocol","origin","window","location","host","scriptURL","NativeModules","SourceCode","split","global","DEV_SERVER_ORIGIN","__webpack_require__","p"],"mappings":"+KAOA,yCAEAA,OAAO,CAAC,qCAAD,CAAP,CAEA,GAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,GAAyB,YAA7B,CAA2C,CACzC,GAAIC,CAAAA,QAAJ,CACA,GAAIC,CAAAA,MAAJ,CAOA,GACE,MAAOC,CAAAA,MAAP,GAAkB,WAAlB,EACAA,MAAM,CAACC,QADP,EAEAD,MAAM,CAACC,QAAP,CAAgBH,QAAhB,GAA6B,OAH/B,CAIE,CACAA,QAAQ,CAAGE,MAAM,CAACC,QAAP,CAAgBH,QAA3B,CACAC,MAAM,CAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAzB,CACD,CAPD,IAOO,IAMGC,CAAAA,SANH,CAMiBC,2BAAcC,UAN/B,CAMGF,SANH,CAOL,GAAIA,SAAJ,CAAe,sBACUA,SAAS,CAACG,KAAV,CAAgB,GAAhB,CADV,uEACZR,QADY,sBACAC,MADA,sBAEd,CACF,CAED,GAAID,QAAQ,EAAIC,MAAhB,CAAwB,CACtBQ,MAAM,CAACC,iBAAP,CAA8BV,QAA9B,MAA2CC,MAA3C,CAIAU,mBAAmB,CAACC,CAApB,CAA2BH,MAAM,CAACC,iBAAlC,KACD,CACF","sourcesContent":["/**\n * Copyright 2017-present, Callstack.\n * All rights reserved.\n *\n * This file is loaded as a part of user bundle\n *\n */\nimport { NativeModules } from 'react-native';\n\nrequire('../hot/client/importScriptsPolyfill');\n\nif (process.env.NODE_ENV !== 'production') {\n  let protocol;\n  let origin;\n\n  // If remote debugger is attached, we have access to `window` object\n  // from which we may be able to  get `protocol` and `origin` of dev server.\n  // This is a prefered way in remote debugger, otherwise it would\n  // fail due to CSP errors because of making requests to eg `10.0.2.2`\n  // from `localhost`.\n  if (\n    typeof window !== 'undefined' &&\n    window.location &&\n    window.location.protocol !== 'file:'\n  ) {\n    protocol = window.location.protocol;\n    origin = window.location.host;\n  } else {\n    // In order to ensure hot client has a valid URL we need to get a valid origin\n    // from URL from which the bundle was loaded. When using iOS simulator/Android emulator\n    // or Android device it will be `localhost:<port>` (Or whatever the user sets in\n    // \"Dev Settings\" -> \"Debug server host & port for device\") but when using real iOS device\n    // it will be `<ip>.xip.io:<port>`.\n    const { scriptURL } = NativeModules.SourceCode;\n    if (scriptURL) {\n      [protocol, , origin] = scriptURL.split('/');\n    }\n  }\n\n  if (protocol && origin) {\n    global.DEV_SERVER_ORIGIN = `${protocol}//${origin}`;\n\n    // Webpack's `publicPath` needs to be overwritten with `DEV_SERVER_ORIGIN` otherwise,\n    // it would still make requests to (usually) `localhost`.\n    __webpack_require__.p = `${global.DEV_SERVER_ORIGIN}/`; // eslint-disable-line no-undef\n  }\n}\n"]}]}