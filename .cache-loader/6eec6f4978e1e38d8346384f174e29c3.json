{"remainingRequest":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js??ref--5-2!/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/ReactNative/UIManager.js","dependencies":[{"path":"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/ReactNative/UIManager.js","mtime":1539700108130},{"path":"/Users/jeffrey/HaulTesting/node_modules/cache-loader/dist/cjs.js","mtime":1539652983212},{"path":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js","mtime":1539652983315},{"path":"/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js","mtime":1539615827828}],"contextDependencies":[],"result":["'use strict';(function(){var enterModule=require('react-hot-loader').enterModule;enterModule&&enterModule(module);})();var NativeModules=require('NativeModules');var Platform=require('Platform');var defineLazyObjectProperty=require('defineLazyObjectProperty');var invariant=require('fbjs/lib/invariant');var UIManager=NativeModules.UIManager;invariant(UIManager,'UIManager is undefined. The native module config is probably incorrect.');UIManager.__takeSnapshot=UIManager.takeSnapshot;UIManager.takeSnapshot=function(){invariant(false,'UIManager.takeSnapshot should not be called directly. '+'Use ReactNative.takeSnapshot instead.');};if(Platform.OS==='ios'){Object.keys(UIManager).forEach(function(viewName){var viewConfig=UIManager[viewName];if(viewConfig.Manager){defineLazyObjectProperty(viewConfig,'Constants',{get:function get(){var viewManager=NativeModules[viewConfig.Manager];var constants={};viewManager&&Object.keys(viewManager).forEach(function(key){var value=viewManager[key];if(typeof value!=='function'){constants[key]=value;}});return constants;}});defineLazyObjectProperty(viewConfig,'Commands',{get:function get(){var viewManager=NativeModules[viewConfig.Manager];var commands={};var index=0;viewManager&&Object.keys(viewManager).forEach(function(key){var value=viewManager[key];if(typeof value==='function'){commands[key]=index++;}});return commands;}});}});}else if(UIManager.ViewManagerNames){var residual=global.__residual?global.__residual:function(_,f){for(var _len=arguments.length,args=new Array(_len>2?_len-2:0),_key=2;_key<_len;_key++){args[_key-2]=arguments[_key];}return f.apply(undefined,args);};residual('void',function(UIManager,defineLazyObjectProperty){UIManager.ViewManagerNames.forEach(function(viewManagerName){defineLazyObjectProperty(UIManager,viewManagerName,{get:function get(){return UIManager.getConstantsForViewManager(viewManagerName);}});});},UIManager,defineLazyObjectProperty);if(global.__makePartial)global.__makePartial(UIManager);}module.exports=UIManager;;(function(){var reactHotLoader=require('react-hot-loader').default;var leaveModule=require('react-hot-loader').leaveModule;if(!reactHotLoader){return;}reactHotLoader.register(UIManager,\"UIManager\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/ReactNative/UIManager.js\");leaveModule(module);})();;",{"version":3,"sources":["/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/ReactNative/UIManager.js"],"names":["NativeModules","require","Platform","defineLazyObjectProperty","invariant","UIManager","__takeSnapshot","takeSnapshot","OS","Object","keys","forEach","viewName","viewConfig","Manager","get","viewManager","constants","key","value","commands","index","ViewManagerNames","residual","global","__residual","_","f","args","apply","undefined","viewManagerName","getConstantsForViewManager","__makePartial","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n'use strict';\n\nconst NativeModules = require('NativeModules');\nconst Platform = require('Platform');\n\nconst defineLazyObjectProperty = require('defineLazyObjectProperty');\nconst invariant = require('fbjs/lib/invariant');\n\nconst {UIManager} = NativeModules;\n\ninvariant(\n  UIManager,\n  'UIManager is undefined. The native module config is probably incorrect.',\n);\n\n// In past versions of ReactNative users called UIManager.takeSnapshot()\n// However takeSnapshot was moved to ReactNative in order to support flat\n// bundles and to avoid a cyclic dependency between UIManager and ReactNative.\n// UIManager.takeSnapshot still exists though. In order to avoid confusion or\n// accidental usage, mask the method with a deprecation warning.\nUIManager.__takeSnapshot = UIManager.takeSnapshot;\nUIManager.takeSnapshot = function() {\n  invariant(\n    false,\n    'UIManager.takeSnapshot should not be called directly. ' +\n      'Use ReactNative.takeSnapshot instead.',\n  );\n};\n\n/**\n * Copies the ViewManager constants and commands into UIManager. This is\n * only needed for iOS, which puts the constants in the ViewManager\n * namespace instead of UIManager, unlike Android.\n */\nif (Platform.OS === 'ios') {\n  Object.keys(UIManager).forEach(viewName => {\n    const viewConfig = UIManager[viewName];\n    if (viewConfig.Manager) {\n      defineLazyObjectProperty(viewConfig, 'Constants', {\n        get: () => {\n          const viewManager = NativeModules[viewConfig.Manager];\n          const constants = {};\n          viewManager &&\n            Object.keys(viewManager).forEach(key => {\n              const value = viewManager[key];\n              if (typeof value !== 'function') {\n                constants[key] = value;\n              }\n            });\n          return constants;\n        },\n      });\n      defineLazyObjectProperty(viewConfig, 'Commands', {\n        get: () => {\n          const viewManager = NativeModules[viewConfig.Manager];\n          const commands = {};\n          let index = 0;\n          viewManager &&\n            Object.keys(viewManager).forEach(key => {\n              const value = viewManager[key];\n              if (typeof value === 'function') {\n                commands[key] = index++;\n              }\n            });\n          return commands;\n        },\n      });\n    }\n  });\n} else if (UIManager.ViewManagerNames) {\n  // We want to add all the view managers to the UIManager.\n  // However, the way things are set up, the list of view managers is not known at compile time.\n  // As Prepack runs at compile it, it cannot process this loop.\n  // So we wrap it in a special __residual call, which basically tells Prepack to ignore it.\n  let residual = global.__residual\n    ? global.__residual\n    : (_, f, ...args) => f.apply(undefined, args);\n  residual(\n    'void',\n    (UIManager, defineLazyObjectProperty) => {\n      UIManager.ViewManagerNames.forEach(viewManagerName => {\n        defineLazyObjectProperty(UIManager, viewManagerName, {\n          get: () => UIManager.getConstantsForViewManager(viewManagerName),\n        });\n      });\n    },\n    UIManager,\n    defineLazyObjectProperty,\n  );\n\n  // As Prepack now no longer knows which properties exactly the UIManager has,\n  // we also tell Prepack that it has only partial knowledge of the UIManager,\n  // so that any accesses to unknown properties along the global code will fail\n  // when Prepack encounters them.\n  if (global.__makePartial) global.__makePartial(UIManager);\n}\n\nmodule.exports = UIManager;\n"]}]}