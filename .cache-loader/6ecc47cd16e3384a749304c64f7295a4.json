{"remainingRequest":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js??ref--5-2!/Users/jeffrey/HaulTesting/node_modules/react-native-code-push/RestartManager.js","dependencies":[{"path":"/Users/jeffrey/HaulTesting/node_modules/react-native-code-push/RestartManager.js","mtime":1539745230847},{"path":"/Users/jeffrey/HaulTesting/node_modules/cache-loader/dist/cjs.js","mtime":1539652983212},{"path":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js","mtime":1539652983315},{"path":"/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js","mtime":1539615827828}],"contextDependencies":[],"result":["var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _regenerator=_interopRequireDefault(require(\"@babel/runtime/regenerator\"));(function(){var enterModule=require('react-hot-loader').enterModule;enterModule&&enterModule(module);})();var log=require(\"./logging\");var NativeCodePush=require(\"react-native\").NativeModules.CodePush;var RestartManager=function(){var _allowed=true;var _restartInProgress=false;var _restartQueue=[];function allow(){log(\"Re-allowing restarts\");_allowed=true;if(_restartQueue.length){log(\"Executing pending restart\");restartApp(_restartQueue.shift(1));}}function clearPendingRestart(){_restartQueue=[];}function disallow(){log(\"Disallowing restarts\");_allowed=false;}function restartApp(){var onlyIfUpdateIsPending,_args=arguments;return _regenerator.default.async(function restartApp$(_context){while(1){switch(_context.prev=_context.next){case 0:onlyIfUpdateIsPending=_args.length>0&&_args[0]!==undefined?_args[0]:false;if(!_restartInProgress){_context.next=6;break;}log(\"Restart request queued until the current restart is completed\");_restartQueue.push(onlyIfUpdateIsPending);_context.next=19;break;case 6:if(_allowed){_context.next=11;break;}log(\"Restart request queued until restarts are re-allowed\");_restartQueue.push(onlyIfUpdateIsPending);_context.next=19;break;case 11:_restartInProgress=true;_context.next=14;return _regenerator.default.awrap(NativeCodePush.restartApp(onlyIfUpdateIsPending));case 14:if(!_context.sent){_context.next=17;break;}log(\"Restarting app\");return _context.abrupt(\"return\");case 17:_restartInProgress=false;if(_restartQueue.length){restartApp(_restartQueue.shift(1));}case 19:case\"end\":return _context.stop();}}},null,this);}return{allow:allow,clearPendingRestart:clearPendingRestart,disallow:disallow,restartApp:restartApp};}();module.exports=RestartManager;;(function(){var reactHotLoader=require('react-hot-loader').default;var leaveModule=require('react-hot-loader').leaveModule;if(!reactHotLoader){return;}reactHotLoader.register(NativeCodePush,\"NativeCodePush\",\"/Users/jeffrey/HaulTesting/node_modules/react-native-code-push/RestartManager.js\");reactHotLoader.register(RestartManager,\"RestartManager\",\"/Users/jeffrey/HaulTesting/node_modules/react-native-code-push/RestartManager.js\");leaveModule(module);})();;",{"version":3,"sources":["/Users/jeffrey/HaulTesting/node_modules/react-native-code-push/RestartManager.js"],"names":["log","require","NativeCodePush","NativeModules","CodePush","RestartManager","_allowed","_restartInProgress","_restartQueue","allow","length","restartApp","shift","clearPendingRestart","disallow","onlyIfUpdateIsPending","push","module","exports"],"mappings":"4QAAA,GAAMA,CAAAA,GAAG,CAAGC,OAAO,CAAC,WAAD,CAAnB,CACA,GAAMC,CAAAA,cAAc,CAAGD,OAAO,CAAC,cAAD,CAAP,CAAwBE,aAAxB,CAAsCC,QAA7D,CAEA,GAAMC,CAAAA,cAAc,CAAI,UAAM,CAC1B,GAAIC,CAAAA,QAAQ,CAAG,IAAf,CACA,GAAIC,CAAAA,kBAAkB,CAAG,KAAzB,CACA,GAAIC,CAAAA,aAAa,CAAG,EAApB,CAEA,QAASC,CAAAA,KAAT,EAAiB,CACbT,GAAG,CAAC,sBAAD,CAAH,CACAM,QAAQ,CAAG,IAAX,CAEA,GAAIE,aAAa,CAACE,MAAlB,CAA0B,CACtBV,GAAG,CAAC,2BAAD,CAAH,CACAW,UAAU,CAACH,aAAa,CAACI,KAAd,CAAoB,CAApB,CAAD,CAAV,CACH,CACJ,CAED,QAASC,CAAAA,mBAAT,EAA+B,CAC3BL,aAAa,CAAG,EAAhB,CACH,CAED,QAASM,CAAAA,QAAT,EAAoB,CAChBd,GAAG,CAAC,sBAAD,CAAH,CACAM,QAAQ,CAAG,KAAX,CACH,CAED,QAAeK,CAAAA,UAAf,kKAA0BI,qBAA1B,+CAAkD,KAAlD,KACQR,kBADR,yBAEQP,GAAG,CAAC,+DAAD,CAAH,CACAQ,aAAa,CAACQ,IAAd,CAAmBD,qBAAnB,EAHR,iCAIgBT,QAJhB,0BAKQN,GAAG,CAAC,sDAAD,CAAH,CACAQ,aAAa,CAACQ,IAAd,CAAmBD,qBAAnB,EANR,+BAQQR,kBAAkB,CAAG,IAArB,CARR,mDASkBL,cAAc,CAACS,UAAf,CAA0BI,qBAA1B,CATlB,qDAYYf,GAAG,CAAC,gBAAD,CAAH,CAZZ,yCAgBQO,kBAAkB,CAAG,KAArB,CACA,GAAIC,aAAa,CAACE,MAAlB,CAA0B,CACtBC,UAAU,CAACH,aAAa,CAACI,KAAd,CAAoB,CAApB,CAAD,CAAV,CACH,CAnBT,yDAuBA,MAAO,CACHH,KAAK,CAALA,KADG,CAEHI,mBAAmB,CAAnBA,mBAFG,CAGHC,QAAQ,CAARA,QAHG,CAIHH,UAAU,CAAVA,UAJG,CAAP,CAMH,CArDsB,EAAvB,CAuDAM,MAAM,CAACC,OAAP,CAAiBb,cAAjB,C,gLAzDMH,c,8HAEAG,c","sourcesContent":["const log = require(\"./logging\");\nconst NativeCodePush = require(\"react-native\").NativeModules.CodePush;\n\nconst RestartManager = (() => {\n    let _allowed = true;\n    let _restartInProgress = false;\n    let _restartQueue = [];\n\n    function allow() {\n        log(\"Re-allowing restarts\");\n        _allowed = true;\n\n        if (_restartQueue.length) {\n            log(\"Executing pending restart\");\n            restartApp(_restartQueue.shift(1));\n        }\n    }\n\n    function clearPendingRestart() {\n        _restartQueue = [];\n    }\n\n    function disallow() {\n        log(\"Disallowing restarts\");\n        _allowed = false;\n    }\n\n    async function restartApp(onlyIfUpdateIsPending = false) {\n        if (_restartInProgress) {\n            log(\"Restart request queued until the current restart is completed\");\n            _restartQueue.push(onlyIfUpdateIsPending);\n        } else if (!_allowed) {\n            log(\"Restart request queued until restarts are re-allowed\");\n            _restartQueue.push(onlyIfUpdateIsPending);\n        } else {\n            _restartInProgress = true;\n            if (await NativeCodePush.restartApp(onlyIfUpdateIsPending)) {\n                // The app has already restarted, so there is no need to\n                // process the remaining queued restarts.\n                log(\"Restarting app\");\n                return;\n            }\n\n            _restartInProgress = false;\n            if (_restartQueue.length) {\n                restartApp(_restartQueue.shift(1));\n            }\n        }\n    }\n\n    return {\n        allow,\n        clearPendingRestart,\n        disallow,\n        restartApp\n    };\n})();\n\nmodule.exports = RestartManager;\n"]}]}