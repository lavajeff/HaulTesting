{"remainingRequest":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js??ref--5-2!/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/vendor/core/Set.js","dependencies":[{"path":"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/vendor/core/Set.js","mtime":1539700108130},{"path":"/Users/jeffrey/HaulTesting/node_modules/cache-loader/dist/cjs.js","mtime":1539652983212},{"path":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js","mtime":1539652983315},{"path":"/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js","mtime":1539615827828}],"contextDependencies":[],"result":["'use strict';var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var Map=require('Map');var _shouldPolyfillES6Collection=require('_shouldPolyfillES6Collection');var toIterator=require('toIterator');module.exports=function(global){if(!_shouldPolyfillES6Collection('Set')){return global.Set;}var Set=function(){function Set(iterable){(0,_classCallCheck2.default)(this,Set);if(this==null||typeof this!=='object'&&typeof this!=='function'){throw new TypeError('Wrong set object type.');}initSet(this);if(iterable!=null){var it=toIterator(iterable);var next;while(!(next=it.next()).done){this.add(next.value);}}}(0,_createClass2.default)(Set,[{key:\"add\",value:function add(value){this._map.set(value,value);this.size=this._map.size;return this;}},{key:\"clear\",value:function clear(){initSet(this);}},{key:\"delete\",value:function _delete(value){var ret=this._map.delete(value);this.size=this._map.size;return ret;}},{key:\"entries\",value:function entries(){return this._map.entries();}},{key:\"forEach\",value:function forEach(callback){var thisArg=arguments[1];var it=this._map.keys();var next;while(!(next=it.next()).done){callback.call(thisArg,next.value,next.value,this);}}},{key:\"has\",value:function has(value){return this._map.has(value);}},{key:\"values\",value:function values(){return this._map.values();}},{key:\"__reactstandin__regenerateByEval\",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code);}}]);return Set;}();Set.prototype[toIterator.ITERATOR_SYMBOL]=Set.prototype.values;Set.prototype.keys=Set.prototype.values;function initSet(set){set._map=new Map();set.size=set._map.size;}return Set;}(Function('return this')());",{"version":3,"sources":["/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/vendor/core/Set.js"],"names":["Map","require","_shouldPolyfillES6Collection","toIterator","module","exports","global","Set","iterable","TypeError","initSet","it","next","done","add","value","_map","set","size","ret","delete","entries","callback","thisArg","arguments","keys","call","has","values","prototype","ITERATOR_SYMBOL","Function"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @preventMunge\n * @typechecks\n */\n\n/* eslint-disable no-extend-native */\n\n'use strict';\n\nconst Map = require('Map');\n\nconst _shouldPolyfillES6Collection = require('_shouldPolyfillES6Collection');\nconst toIterator = require('toIterator');\n\nmodule.exports = (function(global) {\n  // Since our implementation is spec-compliant for the most part we can safely\n  // delegate to a built-in version if exists and is implemented correctly.\n  // Firefox had gotten a few implementation details wrong across different\n  // versions so we guard against that.\n  // These checks are adapted from es6-shim https://fburl.com/34437854\n  if (!_shouldPolyfillES6Collection('Set')) {\n    return global.Set;\n  }\n\n  /**\n   * == ES6 Set Collection ==\n   *\n   * This module is meant to implement a Set collection as described in chapter\n   * 23.2 of the ES6 specification.\n   *\n   * Set objects are collections of unique values. Where values can be any\n   * JavaScript value.\n   * https://people.mozilla.org/~jorendorff/es6-draft.html#sec-map-objects\n   *\n   * There only two -- rather small -- diviations from the spec:\n   *\n   * 1. The use of frozen objects as keys. @see Map module for more on this.\n   *\n   * 2. The `size` property on a map object is a regular property and not a\n   *    computed property on the prototype as described by the spec.\n   *    The reason being is that we simply want to support ES3 environments\n   *    which doesn't implement computed properties.\n   *\n   * == Usage ==\n   *\n   * var set = new set(iterable);\n   *\n   * set.set(value);\n   * set.has(value); // true\n   * set.delete(value); // true\n   *\n   * var iterator = set.keys();\n   * iterator.next(); // {value: value, done: false}\n   *\n   * var iterator = set.values();\n   * iterator.next(); // {value: value, done: false}\n   *\n   * var iterator = set.entries();\n   * iterator.next(); // {value: [value, value], done: false}\n   *\n   * set.forEach(function(value, value){ this === thisArg }, thisArg);\n   *\n   * set.clear(); // resets set.\n   */\n\n  class Set {\n    /**\n     * 23.2.1.1\n     *\n     * Takes an optional `iterable` (which is basically any object that\n     * implements a Symbol.iterator (@@iterator) method). That is a collection\n     * of values used to instantiate the set.\n     *\n     * @param {*} iterable\n     */\n    constructor(iterable) {\n      if (\n        this == null ||\n        (typeof this !== 'object' && typeof this !== 'function')\n      ) {\n        throw new TypeError('Wrong set object type.');\n      }\n\n      initSet(this);\n\n      if (iterable != null) {\n        const it = toIterator(iterable);\n        let next;\n        while (!(next = it.next()).done) {\n          this.add(next.value);\n        }\n      }\n    }\n\n    /**\n     * 23.2.3.1\n     *\n     * If it doesn't already exist in the collection a `value` is added.\n     *\n     * @param {*} value\n     * @return {set}\n     */\n    add(value) {\n      this._map.set(value, value);\n      this.size = this._map.size;\n      return this;\n    }\n\n    /**\n     * 23.2.3.2\n     *\n     * Clears the set.\n     */\n    clear() {\n      initSet(this);\n    }\n\n    /**\n     * 23.2.3.4\n     *\n     * Deletes a `value` from the collection if it exists.\n     * Returns true if the value was found and deleted and false otherwise.\n     *\n     * @param {*} value\n     * @return {boolean}\n     */\n    delete(value) {\n      const ret = this._map.delete(value);\n      this.size = this._map.size;\n      return ret;\n    }\n\n    /**\n     * 23.2.3.5\n     *\n     * Returns an iterator over a collection of [value, value] tuples.\n     */\n    entries() {\n      return this._map.entries();\n    }\n\n    /**\n     * 23.2.3.6\n     *\n     * Iterate over the collection calling `callback` with (value, value, set).\n     *\n     * @param {function} callback\n     */\n    forEach(callback) {\n      const thisArg = arguments[1];\n      const it = this._map.keys();\n      let next;\n      while (!(next = it.next()).done) {\n        callback.call(thisArg, next.value, next.value, this);\n      }\n    }\n\n    /**\n     * 23.2.3.7\n     *\n     * Iterate over the collection calling `callback` with (value, value, set).\n     *\n     * @param {*} value\n     * @return {boolean}\n     */\n    has(value) {\n      return this._map.has(value);\n    }\n\n    /**\n     * 23.2.3.7\n     *\n     * Returns an iterator over the colleciton of values.\n     */\n    values() {\n      return this._map.values();\n    }\n  }\n\n  // 23.2.3.11\n  Set.prototype[toIterator.ITERATOR_SYMBOL] = Set.prototype.values;\n\n  // 23.2.3.7\n  Set.prototype.keys = Set.prototype.values;\n\n  function initSet(set) {\n    set._map = new Map();\n    set.size = set._map.size;\n  }\n\n  return Set;\n})(Function('return this')()); // eslint-disable-line no-new-func\n"]}]}