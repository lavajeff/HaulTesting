{"remainingRequest":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js??ref--5-2!/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Interaction/Batchinator.js","dependencies":[{"path":"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Interaction/Batchinator.js","mtime":1539700108130},{"path":"/Users/jeffrey/HaulTesting/node_modules/cache-loader/dist/cjs.js","mtime":1539652983212},{"path":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js","mtime":1539652983315},{"path":"/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js","mtime":1539615827828}],"contextDependencies":[],"result":["'use strict';var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));(function(){var enterModule=require('react-hot-loader').enterModule;enterModule&&enterModule(module);})();var InteractionManager=require('InteractionManager');var Batchinator=function(){function Batchinator(callback,delayMS){(0,_classCallCheck2.default)(this,Batchinator);this._delay=delayMS;this._callback=callback;}(0,_createClass2.default)(Batchinator,[{key:\"dispose\",value:function dispose(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{abort:false};if(this._taskHandle){this._taskHandle.cancel();if(!options.abort){this._callback();}this._taskHandle=null;}}},{key:\"schedule\",value:function schedule(){var _this=this;if(this._taskHandle){return;}var timeoutHandle=setTimeout(function(){_this._taskHandle=InteractionManager.runAfterInteractions(function(){_this._taskHandle=null;_this._callback();});},this._delay);this._taskHandle={cancel:function cancel(){return clearTimeout(timeoutHandle);}};}},{key:\"__reactstandin__regenerateByEval\",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code);}}]);return Batchinator;}();module.exports=Batchinator;;(function(){var reactHotLoader=require('react-hot-loader').default;var leaveModule=require('react-hot-loader').leaveModule;if(!reactHotLoader){return;}reactHotLoader.register(Batchinator,\"Batchinator\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Interaction/Batchinator.js\");leaveModule(module);})();;",{"version":3,"sources":["/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Interaction/Batchinator.js"],"names":["InteractionManager","require","Batchinator","callback","delayMS","_delay","_callback","options","abort","_taskHandle","cancel","timeoutHandle","setTimeout","runAfterInteractions","clearTimeout","module","exports"],"mappings":"AAUA,a,mXAEA,GAAMA,CAAAA,kBAAkB,CAAGC,OAAO,CAAC,oBAAD,CAAlC,C,GAwBMC,CAAAA,W,YAIJ,qBAAYC,QAAZ,CAAkCC,OAAlC,CAAmD,gDACjD,KAAKC,MAAL,CAAcD,OAAd,CACA,KAAKE,SAAL,CAAiBH,QAAjB,CACD,C,8EAOmD,IAA5CI,CAAAA,OAA4C,2DAAhB,CAACC,KAAK,CAAE,KAAR,CAAgB,CAClD,GAAI,KAAKC,WAAT,CAAsB,CACpB,KAAKA,WAAL,CAAiBC,MAAjB,GACA,GAAI,CAACH,OAAO,CAACC,KAAb,CAAoB,CAClB,KAAKF,SAAL,GACD,CACD,KAAKG,WAAL,CAAmB,IAAnB,CACD,CACF,C,2CACU,gBACT,GAAI,KAAKA,WAAT,CAAsB,CACpB,OACD,CACD,GAAME,CAAAA,aAAa,CAAGC,UAAU,CAAC,UAAM,CACrC,KAAI,CAACH,WAAL,CAAmBT,kBAAkB,CAACa,oBAAnB,CAAwC,UAAM,CAG/D,KAAI,CAACJ,WAAL,CAAmB,IAAnB,CACA,KAAI,CAACH,SAAL,GACD,CALkB,CAAnB,CAMD,CAP+B,CAO7B,KAAKD,MAPwB,CAAhC,CAQA,KAAKI,WAAL,CAAmB,CAACC,MAAM,CAAE,wBAAMI,CAAAA,YAAY,CAACH,aAAD,CAAlB,EAAT,CAAnB,CACD,C,qJAGHI,MAAM,CAACC,OAAP,CAAiBd,WAAjB,C,gLAvCMA,W","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n'use strict';\n\nconst InteractionManager = require('InteractionManager');\n\n/**\n * A simple class for batching up invocations of a low-pri callback. A timeout is set to run the\n * callback once after a delay, no matter how many times it's scheduled. Once the delay is reached,\n * InteractionManager.runAfterInteractions is used to invoke the callback after any hi-pri\n * interactions are done running.\n *\n * Make sure to cleanup with dispose().  Example:\n *\n *   class Widget extends React.Component {\n *     _batchedSave: new Batchinator(() => this._saveState, 1000);\n *     _saveSate() {\n *       // save this.state to disk\n *     }\n *     componentDidUpdate() {\n *       this._batchedSave.schedule();\n *     }\n *     componentWillUnmount() {\n *       this._batchedSave.dispose();\n *     }\n *     ...\n *   }\n */\nclass Batchinator {\n  _callback: () => void;\n  _delay: number;\n  _taskHandle: ?{cancel: () => void};\n  constructor(callback: () => void, delayMS: number) {\n    this._delay = delayMS;\n    this._callback = callback;\n  }\n  /*\n   * Cleanup any pending tasks.\n   *\n   * By default, if there is a pending task the callback is run immediately. Set the option abort to\n   * true to not call the callback if it was pending.\n   */\n  dispose(options: {abort: boolean} = {abort: false}) {\n    if (this._taskHandle) {\n      this._taskHandle.cancel();\n      if (!options.abort) {\n        this._callback();\n      }\n      this._taskHandle = null;\n    }\n  }\n  schedule() {\n    if (this._taskHandle) {\n      return;\n    }\n    const timeoutHandle = setTimeout(() => {\n      this._taskHandle = InteractionManager.runAfterInteractions(() => {\n        // Note that we clear the handle before invoking the callback so that if the callback calls\n        // schedule again, it will actually schedule another task.\n        this._taskHandle = null;\n        this._callback();\n      });\n    }, this._delay);\n    this._taskHandle = {cancel: () => clearTimeout(timeoutHandle)};\n  }\n}\n\nmodule.exports = Batchinator;\n"]}]}