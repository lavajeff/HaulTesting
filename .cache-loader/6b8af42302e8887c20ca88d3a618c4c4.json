{"remainingRequest":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js??ref--5-2!/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Image/ImageStore.js","dependencies":[{"path":"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Image/ImageStore.js","mtime":1539700108130},{"path":"/Users/jeffrey/HaulTesting/node_modules/cache-loader/dist/cjs.js","mtime":1539652983212},{"path":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js","mtime":1539652983315},{"path":"/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js","mtime":1539615827828}],"contextDependencies":[],"result":["'use strict';var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));(function(){var enterModule=require('react-hot-loader').enterModule;enterModule&&enterModule(module);})();var RCTImageStoreManager=require('NativeModules').ImageStoreManager;var ImageStore=function(){function ImageStore(){(0,_classCallCheck2.default)(this,ImageStore);}(0,_createClass2.default)(ImageStore,null,[{key:\"hasImageForTag\",value:function hasImageForTag(uri,callback){if(RCTImageStoreManager.hasImageForTag){RCTImageStoreManager.hasImageForTag(uri,callback);}else{console.warn('hasImageForTag() not implemented');}}},{key:\"removeImageForTag\",value:function removeImageForTag(uri){if(RCTImageStoreManager.removeImageForTag){RCTImageStoreManager.removeImageForTag(uri);}else{console.warn('removeImageForTag() not implemented');}}},{key:\"addImageFromBase64\",value:function addImageFromBase64(base64ImageData,success,failure){RCTImageStoreManager.addImageFromBase64(base64ImageData,success,failure);}},{key:\"getBase64ForTag\",value:function getBase64ForTag(uri,success,failure){RCTImageStoreManager.getBase64ForTag(uri,success,failure);}}]);return ImageStore;}();module.exports=ImageStore;;(function(){var reactHotLoader=require('react-hot-loader').default;var leaveModule=require('react-hot-loader').leaveModule;if(!reactHotLoader){return;}reactHotLoader.register(RCTImageStoreManager,\"RCTImageStoreManager\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Image/ImageStore.js\");reactHotLoader.register(ImageStore,\"ImageStore\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Image/ImageStore.js\");leaveModule(module);})();;",{"version":3,"sources":["/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Image/ImageStore.js"],"names":["RCTImageStoreManager","require","ImageStoreManager","ImageStore","uri","callback","hasImageForTag","console","warn","removeImageForTag","base64ImageData","success","failure","addImageFromBase64","getBase64ForTag","module","exports"],"mappings":"AASA,a,mXAEA,GAAMA,CAAAA,oBAAoB,CAAGC,OAAO,CAAC,eAAD,CAAP,CAAyBC,iBAAtD,C,GAEMC,CAAAA,U,gLAKkBC,G,CAAaC,Q,CAAuC,CACxE,GAAIL,oBAAoB,CAACM,cAAzB,CAAyC,CACvCN,oBAAoB,CAACM,cAArB,CAAoCF,GAApC,CAAyCC,QAAzC,EACD,CAFD,IAEO,CACLE,OAAO,CAACC,IAAR,CAAa,kCAAb,EACD,CACF,C,4DAUwBJ,G,CAAa,CACpC,GAAIJ,oBAAoB,CAACS,iBAAzB,CAA4C,CAC1CT,oBAAoB,CAACS,iBAArB,CAAuCL,GAAvC,EACD,CAFD,IAEO,CACLG,OAAO,CAACC,IAAR,CAAa,qCAAb,EACD,CACF,C,8DAcCE,e,CACAC,O,CACAC,O,CACA,CACAZ,oBAAoB,CAACa,kBAArB,CAAwCH,eAAxC,CAAyDC,OAAzD,CAAkEC,OAAlE,EACD,C,wDAcCR,G,CACAO,O,CACAC,O,CACA,CACAZ,oBAAoB,CAACc,eAArB,CAAqCV,GAArC,CAA0CO,OAA1C,CAAmDC,OAAnD,EACD,C,0BAGHG,MAAM,CAACC,OAAP,CAAiBb,UAAjB,C,gLAtEMH,oB,sIAEAG,U","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst RCTImageStoreManager = require('NativeModules').ImageStoreManager;\n\nclass ImageStore {\n  /**\n   * Check if the ImageStore contains image data for the specified URI.\n   * @platform ios\n   */\n  static hasImageForTag(uri: string, callback: (hasImage: boolean) => void) {\n    if (RCTImageStoreManager.hasImageForTag) {\n      RCTImageStoreManager.hasImageForTag(uri, callback);\n    } else {\n      console.warn('hasImageForTag() not implemented');\n    }\n  }\n\n  /**\n   * Delete an image from the ImageStore. Images are stored in memory and\n   * must be manually removed when you are finished with them, otherwise they\n   * will continue to use up RAM until the app is terminated. It is safe to\n   * call `removeImageForTag()` without first calling `hasImageForTag()`, it\n   * will simply fail silently.\n   * @platform ios\n   */\n  static removeImageForTag(uri: string) {\n    if (RCTImageStoreManager.removeImageForTag) {\n      RCTImageStoreManager.removeImageForTag(uri);\n    } else {\n      console.warn('removeImageForTag() not implemented');\n    }\n  }\n\n  /**\n   * Stores a base64-encoded image in the ImageStore, and returns a URI that\n   * can be used to access or display the image later. Images are stored in\n   * memory only, and must be manually deleted when you are finished with\n   * them by calling `removeImageForTag()`.\n   *\n   * Note that it is very inefficient to transfer large quantities of binary\n   * data between JS and native code, so you should avoid calling this more\n   * than necessary.\n   * @platform ios\n   */\n  static addImageFromBase64(\n    base64ImageData: string,\n    success: (uri: string) => void,\n    failure: (error: any) => void,\n  ) {\n    RCTImageStoreManager.addImageFromBase64(base64ImageData, success, failure);\n  }\n\n  /**\n   * Retrieves the base64-encoded data for an image in the ImageStore. If the\n   * specified URI does not match an image in the store, the failure callback\n   * will be called.\n   *\n   * Note that it is very inefficient to transfer large quantities of binary\n   * data between JS and native code, so you should avoid calling this more\n   * than necessary. To display an image in the ImageStore, you can just pass\n   * the URI to an `<Image/>` component; there is no need to retrieve the\n   * base64 data.\n   */\n  static getBase64ForTag(\n    uri: string,\n    success: (base64ImageData: string) => void,\n    failure: (error: any) => void,\n  ) {\n    RCTImageStoreManager.getBase64ForTag(uri, success, failure);\n  }\n}\n\nmodule.exports = ImageStore;\n"]}]}