{"remainingRequest":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js??ref--5-2!/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Lists/FlatList.js","dependencies":[{"path":"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Lists/FlatList.js","mtime":1539700108130},{"path":"/Users/jeffrey/HaulTesting/node_modules/cache-loader/dist/cjs.js","mtime":1539652983212},{"path":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js","mtime":1539652983315},{"path":"/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js","mtime":1539615827828}],"contextDependencies":[],"result":["'use strict';var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _possibleConstructorReturn2=_interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));var _getPrototypeOf2=_interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _inherits2=_interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));var _objectSpread2=_interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));var _jsxFileName=\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Lists/FlatList.js\";(function(){var enterModule=require('react-hot-loader').enterModule;enterModule&&enterModule(module);})();var MetroListView=require('MetroListView');var React=require('React');var View=require('View');var VirtualizedList=require('VirtualizedList');var ListView=require('ListView');var StyleSheet=require('StyleSheet');var invariant=require('fbjs/lib/invariant');var defaultProps=(0,_objectSpread2.default)({},VirtualizedList.defaultProps,{numColumns:1});var FlatList=function(_React$PureComponent){(0,_inherits2.default)(FlatList,_React$PureComponent);(0,_createClass2.default)(FlatList,[{key:\"scrollToEnd\",value:function scrollToEnd(params){if(this._listRef){this._listRef.scrollToEnd(params);}}},{key:\"scrollToIndex\",value:function scrollToIndex(params){if(this._listRef){this._listRef.scrollToIndex(params);}}},{key:\"scrollToItem\",value:function scrollToItem(params){if(this._listRef){this._listRef.scrollToItem(params);}}},{key:\"scrollToOffset\",value:function scrollToOffset(params){if(this._listRef){this._listRef.scrollToOffset(params);}}},{key:\"recordInteraction\",value:function recordInteraction(){if(this._listRef){this._listRef.recordInteraction();}}},{key:\"flashScrollIndicators\",value:function flashScrollIndicators(){if(this._listRef){this._listRef.flashScrollIndicators();}}},{key:\"getScrollResponder\",value:function getScrollResponder(){if(this._listRef){return this._listRef.getScrollResponder();}}},{key:\"getScrollableNode\",value:function getScrollableNode(){if(this._listRef){return this._listRef.getScrollableNode();}}},{key:\"setNativeProps\",value:function setNativeProps(props){if(this._listRef){this._listRef.setNativeProps(props);}}}]);function FlatList(props){var _this;(0,_classCallCheck2.default)(this,FlatList);_this=(0,_possibleConstructorReturn2.default)(this,(0,_getPrototypeOf2.default)(FlatList).call(this,props));_this._hasWarnedLegacy=false;_this._virtualizedListPairs=[];_this._captureRef=function(ref){_this._listRef=ref;};_this._getItem=function(data,index){var numColumns=_this.props.numColumns;if(numColumns>1){var ret=[];for(var kk=0;kk<numColumns;kk++){var _item=data[index*numColumns+kk];if(_item!=null){ret.push(_item);}}return ret;}else{return data[index];}};_this._getItemCount=function(data){return data?Math.ceil(data.length/_this.props.numColumns):0;};_this._keyExtractor=function(items,index){var _this$props=_this.props,keyExtractor=_this$props.keyExtractor,numColumns=_this$props.numColumns;if(numColumns>1){invariant(Array.isArray(items),'FlatList: Encountered internal consistency error, expected each item to consist of an '+'array with 1-%s columns; instead, received a single item.',numColumns);return items.map(function(it,kk){return keyExtractor(it,index*numColumns+kk);}).join(':');}else{return keyExtractor(items,index);}};_this._renderItem=function(info){var _this$props2=_this.props,renderItem=_this$props2.renderItem,numColumns=_this$props2.numColumns,columnWrapperStyle=_this$props2.columnWrapperStyle;if(numColumns>1){var _item2=info.item,_index=info.index;invariant(Array.isArray(_item2),'Expected array of items with numColumns > 1');return React.createElement(View,{style:StyleSheet.compose(styles.row,columnWrapperStyle),__source:{fileName:_jsxFileName,lineNumber:626}},_item2.map(function(it,kk){var element=renderItem({item:it,index:_index*numColumns+kk,separators:info.separators});return element&&React.cloneElement(element,{key:kk});}));}else{return renderItem(info);}};_this._checkProps(_this.props);if(_this.props.viewabilityConfigCallbackPairs){_this._virtualizedListPairs=_this.props.viewabilityConfigCallbackPairs.map(function(pair){return{viewabilityConfig:pair.viewabilityConfig,onViewableItemsChanged:_this._createOnViewableItemsChanged(pair.onViewableItemsChanged)};});}else if(_this.props.onViewableItemsChanged){_this._virtualizedListPairs.push({viewabilityConfig:_this.props.viewabilityConfig,onViewableItemsChanged:_this._createOnViewableItemsChanged(_this.props.onViewableItemsChanged)});}return _this;}(0,_createClass2.default)(FlatList,[{key:\"componentDidUpdate\",value:function componentDidUpdate(prevProps){invariant(prevProps.numColumns===this.props.numColumns,'Changing numColumns on the fly is not supported. Change the key prop on FlatList when '+'changing the number of columns to force a fresh render of the component.');invariant(prevProps.onViewableItemsChanged===this.props.onViewableItemsChanged,'Changing onViewableItemsChanged on the fly is not supported');invariant(prevProps.viewabilityConfig===this.props.viewabilityConfig,'Changing viewabilityConfig on the fly is not supported');invariant(prevProps.viewabilityConfigCallbackPairs===this.props.viewabilityConfigCallbackPairs,'Changing viewabilityConfigCallbackPairs on the fly is not supported');this._checkProps(this.props);}},{key:\"_checkProps\",value:function _checkProps(props){var getItem=props.getItem,getItemCount=props.getItemCount,horizontal=props.horizontal,legacyImplementation=props.legacyImplementation,numColumns=props.numColumns,columnWrapperStyle=props.columnWrapperStyle,onViewableItemsChanged=props.onViewableItemsChanged,viewabilityConfigCallbackPairs=props.viewabilityConfigCallbackPairs;invariant(!getItem&&!getItemCount,'FlatList does not support custom data formats.');if(numColumns>1){invariant(!horizontal,'numColumns does not support horizontal.');}else{invariant(!columnWrapperStyle,'columnWrapperStyle not supported for single column lists');}if(legacyImplementation){invariant(numColumns===1,'Legacy list does not support multiple columns.');if(!this._hasWarnedLegacy){console.warn('FlatList: legacyImplementation is deprecated and will be removed in a '+'future release - some features not supported and performance may suffer. '+'Please migrate to the default implementation.');this._hasWarnedLegacy=true;}}invariant(!(onViewableItemsChanged&&viewabilityConfigCallbackPairs),'FlatList does not support setting both onViewableItemsChanged and '+'viewabilityConfigCallbackPairs.');}},{key:\"_pushMultiColumnViewable\",value:function _pushMultiColumnViewable(arr,v){var _this$props3=this.props,numColumns=_this$props3.numColumns,keyExtractor=_this$props3.keyExtractor;v.item.forEach(function(item,ii){invariant(v.index!=null,'Missing index!');var index=v.index*numColumns+ii;arr.push((0,_objectSpread2.default)({},v,{item:item,key:keyExtractor(item,index),index:index}));});}},{key:\"_createOnViewableItemsChanged\",value:function _createOnViewableItemsChanged(onViewableItemsChanged){var _this2=this;return function(info){var numColumns=_this2.props.numColumns;if(onViewableItemsChanged){if(numColumns>1){var changed=[];var viewableItems=[];info.viewableItems.forEach(function(v){return _this2._pushMultiColumnViewable(viewableItems,v);});info.changed.forEach(function(v){return _this2._pushMultiColumnViewable(changed,v);});onViewableItemsChanged({viewableItems:viewableItems,changed:changed});}else{onViewableItemsChanged(info);}}};}},{key:\"render\",value:function render(){if(this.props.legacyImplementation){return React.createElement(MetroListView,(0,_extends2.default)({},this.props,{items:this.props.data,ref:this._captureRef,__source:{fileName:_jsxFileName,lineNumber:652}}));}else{return React.createElement(VirtualizedList,(0,_extends2.default)({},this.props,{renderItem:this._renderItem,getItem:this._getItem,getItemCount:this._getItemCount,keyExtractor:this._keyExtractor,ref:this._captureRef,viewabilityConfigCallbackPairs:this._virtualizedListPairs,__source:{fileName:_jsxFileName,lineNumber:663}}));}}},{key:\"__reactstandin__regenerateByEval\",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code);}}]);return FlatList;}(React.PureComponent);FlatList.defaultProps=defaultProps;var styles=StyleSheet.create({row:{flexDirection:'row'}});module.exports=FlatList;;(function(){var reactHotLoader=require('react-hot-loader').default;var leaveModule=require('react-hot-loader').leaveModule;if(!reactHotLoader){return;}reactHotLoader.register(defaultProps,\"defaultProps\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Lists/FlatList.js\");reactHotLoader.register(FlatList,\"FlatList\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Lists/FlatList.js\");reactHotLoader.register(styles,\"styles\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Lists/FlatList.js\");leaveModule(module);})();;",{"version":3,"sources":["/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Lists/FlatList.js"],"names":["MetroListView","require","React","View","VirtualizedList","ListView","StyleSheet","invariant","defaultProps","numColumns","FlatList","params","_listRef","scrollToEnd","scrollToIndex","scrollToItem","scrollToOffset","recordInteraction","flashScrollIndicators","getScrollResponder","getScrollableNode","props","setNativeProps","_hasWarnedLegacy","_virtualizedListPairs","_captureRef","ref","_getItem","data","index","ret","kk","item","push","_getItemCount","Math","ceil","length","_keyExtractor","items","keyExtractor","Array","isArray","map","it","join","_renderItem","info","renderItem","columnWrapperStyle","compose","styles","row","element","separators","cloneElement","key","_checkProps","viewabilityConfigCallbackPairs","pair","viewabilityConfig","onViewableItemsChanged","_createOnViewableItemsChanged","prevProps","getItem","getItemCount","horizontal","legacyImplementation","console","warn","arr","v","forEach","ii","changed","viewableItems","_pushMultiColumnViewable","PureComponent","create","flexDirection","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst MetroListView = require('MetroListView'); // Used as a fallback legacy option\nconst React = require('React');\nconst View = require('View');\nconst VirtualizedList = require('VirtualizedList');\nconst ListView = require('ListView');\nconst StyleSheet = require('StyleSheet');\n\nconst invariant = require('fbjs/lib/invariant');\n\nimport type {DangerouslyImpreciseStyleProp, ViewStyleProp} from 'StyleSheet';\nimport type {\n  ViewabilityConfig,\n  ViewToken,\n  ViewabilityConfigCallbackPair,\n} from 'ViewabilityHelper';\nimport type {Props as VirtualizedListProps} from 'VirtualizedList';\n\nexport type SeparatorsObj = {\n  highlight: () => void,\n  unhighlight: () => void,\n  updateProps: (select: 'leading' | 'trailing', newProps: Object) => void,\n};\n\ntype RequiredProps<ItemT> = {\n  /**\n   * Takes an item from `data` and renders it into the list. Example usage:\n   *\n   *     <FlatList\n   *       ItemSeparatorComponent={Platform.OS !== 'android' && ({highlighted}) => (\n   *         <View style={[style.separator, highlighted && {marginLeft: 0}]} />\n   *       )}\n   *       data={[{title: 'Title Text', key: 'item1'}]}\n   *       renderItem={({item, separators}) => (\n   *         <TouchableHighlight\n   *           onPress={() => this._onPress(item)}\n   *           onShowUnderlay={separators.highlight}\n   *           onHideUnderlay={separators.unhighlight}>\n   *           <View style={{backgroundColor: 'white'}}>\n   *             <Text>{item.title}</Text>\n   *           </View>\n   *         </TouchableHighlight>\n   *       )}\n   *     />\n   *\n   * Provides additional metadata like `index` if you need it, as well as a more generic\n   * `separators.updateProps` function which let's you set whatever props you want to change the\n   * rendering of either the leading separator or trailing separator in case the more common\n   * `highlight` and `unhighlight` (which set the `highlighted: boolean` prop) are insufficient for\n   * your use-case.\n   */\n  renderItem: (info: {\n    item: ItemT,\n    index: number,\n    separators: SeparatorsObj,\n  }) => ?React.Element<any>,\n  /**\n   * For simplicity, data is just a plain array. If you want to use something else, like an\n   * immutable list, use the underlying `VirtualizedList` directly.\n   */\n  data: ?$ReadOnlyArray<ItemT>,\n};\ntype OptionalProps<ItemT> = {\n  /**\n   * Rendered in between each item, but not at the top or bottom. By default, `highlighted` and\n   * `leadingItem` props are provided. `renderItem` provides `separators.highlight`/`unhighlight`\n   * which will update the `highlighted` prop, but you can also add custom props with\n   * `separators.updateProps`.\n   */\n  ItemSeparatorComponent?: ?React.ComponentType<any>,\n  /**\n   * Rendered when the list is empty. Can be a React Component Class, a render function, or\n   * a rendered element.\n   */\n  ListEmptyComponent?: ?(React.ComponentType<any> | React.Element<any>),\n  /**\n   * Rendered at the bottom of all the items. Can be a React Component Class, a render function, or\n   * a rendered element.\n   */\n  ListFooterComponent?: ?(React.ComponentType<any> | React.Element<any>),\n  /**\n   * Styling for internal View for ListFooterComponent\n   */\n  ListFooterComponentStyle?: ViewStyleProp,\n  /**\n   * Rendered at the top of all the items. Can be a React Component Class, a render function, or\n   * a rendered element.\n   */\n  ListHeaderComponent?: ?(React.ComponentType<any> | React.Element<any>),\n  /**\n   * Styling for internal View for ListHeaderComponent\n   */\n  ListHeaderComponentStyle?: ViewStyleProp,\n  /**\n   * Optional custom style for multi-item rows generated when numColumns > 1.\n   */\n  columnWrapperStyle?: DangerouslyImpreciseStyleProp,\n  /**\n   * A marker property for telling the list to re-render (since it implements `PureComponent`). If\n   * any of your `renderItem`, Header, Footer, etc. functions depend on anything outside of the\n   * `data` prop, stick it here and treat it immutably.\n   */\n  extraData?: any,\n  /**\n   * `getItemLayout` is an optional optimizations that let us skip measurement of dynamic content if\n   * you know the height of items a priori. `getItemLayout` is the most efficient, and is easy to\n   * use if you have fixed height items, for example:\n   *\n   *     getItemLayout={(data, index) => (\n   *       {length: ITEM_HEIGHT, offset: ITEM_HEIGHT * index, index}\n   *     )}\n   *\n   * Adding `getItemLayout` can be a great performance boost for lists of several hundred items.\n   * Remember to include separator length (height or width) in your offset calculation if you\n   * specify `ItemSeparatorComponent`.\n   */\n  getItemLayout?: (\n    data: ?Array<ItemT>,\n    index: number,\n  ) => {length: number, offset: number, index: number},\n  /**\n   * If true, renders items next to each other horizontally instead of stacked vertically.\n   */\n  horizontal?: ?boolean,\n  /**\n   * How many items to render in the initial batch. This should be enough to fill the screen but not\n   * much more. Note these items will never be unmounted as part of the windowed rendering in order\n   * to improve perceived performance of scroll-to-top actions.\n   */\n  initialNumToRender: number,\n  /**\n   * Instead of starting at the top with the first item, start at `initialScrollIndex`. This\n   * disables the \"scroll to top\" optimization that keeps the first `initialNumToRender` items\n   * always rendered and immediately renders the items starting at this initial index. Requires\n   * `getItemLayout` to be implemented.\n   */\n  initialScrollIndex?: ?number,\n  /**\n   * Reverses the direction of scroll. Uses scale transforms of -1.\n   */\n  inverted?: ?boolean,\n  /**\n   * Used to extract a unique key for a given item at the specified index. Key is used for caching\n   * and as the react key to track item re-ordering. The default extractor checks `item.key`, then\n   * falls back to using the index, like React does.\n   */\n  keyExtractor: (item: ItemT, index: number) => string,\n  /**\n   * Multiple columns can only be rendered with `horizontal={false}` and will zig-zag like a\n   * `flexWrap` layout. Items should all be the same height - masonry layouts are not supported.\n   */\n  numColumns: number,\n  /**\n   * Called once when the scroll position gets within `onEndReachedThreshold` of the rendered\n   * content.\n   */\n  onEndReached?: ?(info: {distanceFromEnd: number}) => void,\n  /**\n   * How far from the end (in units of visible length of the list) the bottom edge of the\n   * list must be from the end of the content to trigger the `onEndReached` callback.\n   * Thus a value of 0.5 will trigger `onEndReached` when the end of the content is\n   * within half the visible length of the list.\n   */\n  onEndReachedThreshold?: ?number,\n  /**\n   * If provided, a standard RefreshControl will be added for \"Pull to Refresh\" functionality. Make\n   * sure to also set the `refreshing` prop correctly.\n   */\n  onRefresh?: ?() => void,\n  /**\n   * Called when the viewability of rows changes, as defined by the `viewabilityConfig` prop.\n   */\n  onViewableItemsChanged?: ?(info: {\n    viewableItems: Array<ViewToken>,\n    changed: Array<ViewToken>,\n  }) => void,\n  /**\n   * Set this when offset is needed for the loading indicator to show correctly.\n   * @platform android\n   */\n  progressViewOffset?: number,\n  legacyImplementation?: ?boolean,\n  /**\n   * Set this true while waiting for new data from a refresh.\n   */\n  refreshing?: ?boolean,\n  /**\n   * Note: may have bugs (missing content) in some circumstances - use at your own risk.\n   *\n   * This may improve scroll performance for large lists.\n   */\n  removeClippedSubviews?: boolean,\n  /**\n   * See `ViewabilityHelper` for flow type and further documentation.\n   */\n  viewabilityConfig?: ViewabilityConfig,\n  /**\n   * List of ViewabilityConfig/onViewableItemsChanged pairs. A specific onViewableItemsChanged\n   * will be called when its corresponding ViewabilityConfig's conditions are met.\n   */\n  viewabilityConfigCallbackPairs?: Array<ViewabilityConfigCallbackPair>,\n};\nexport type Props<ItemT> = RequiredProps<ItemT> &\n  OptionalProps<ItemT> &\n  VirtualizedListProps;\n\nconst defaultProps = {\n  ...VirtualizedList.defaultProps,\n  numColumns: 1,\n};\nexport type DefaultProps = typeof defaultProps;\n\n/**\n * A performant interface for rendering simple, flat lists, supporting the most handy features:\n *\n *  - Fully cross-platform.\n *  - Optional horizontal mode.\n *  - Configurable viewability callbacks.\n *  - Header support.\n *  - Footer support.\n *  - Separator support.\n *  - Pull to Refresh.\n *  - Scroll loading.\n *  - ScrollToIndex support.\n *\n * If you need section support, use [`<SectionList>`](docs/sectionlist.html).\n *\n * Minimal Example:\n *\n *     <FlatList\n *       data={[{key: 'a'}, {key: 'b'}]}\n *       renderItem={({item}) => <Text>{item.key}</Text>}\n *     />\n *\n * More complex, multi-select example demonstrating `PureComponent` usage for perf optimization and avoiding bugs.\n *\n * - By binding the `onPressItem` handler, the props will remain `===` and `PureComponent` will\n *   prevent wasteful re-renders unless the actual `id`, `selected`, or `title` props change, even\n *   if the components rendered in `MyListItem` did not have such optimizations.\n * - By passing `extraData={this.state}` to `FlatList` we make sure `FlatList` itself will re-render\n *   when the `state.selected` changes. Without setting this prop, `FlatList` would not know it\n *   needs to re-render any items because it is also a `PureComponent` and the prop comparison will\n *   not show any changes.\n * - `keyExtractor` tells the list to use the `id`s for the react keys instead of the default `key` property.\n *\n *\n *     class MyListItem extends React.PureComponent {\n *       _onPress = () => {\n *         this.props.onPressItem(this.props.id);\n *       };\n *\n *       render() {\n *         const textColor = this.props.selected ? \"red\" : \"black\";\n *         return (\n *           <TouchableOpacity onPress={this._onPress}>\n *             <View>\n *               <Text style={{ color: textColor }}>\n *                 {this.props.title}\n *               </Text>\n *             </View>\n *           </TouchableOpacity>\n *         );\n *       }\n *     }\n *\n *     class MultiSelectList extends React.PureComponent {\n *       state = {selected: (new Map(): Map<string, boolean>)};\n *\n *       _keyExtractor = (item, index) => item.id;\n *\n *       _onPressItem = (id: string) => {\n *         // updater functions are preferred for transactional updates\n *         this.setState((state) => {\n *           // copy the map rather than modifying state.\n *           const selected = new Map(state.selected);\n *           selected.set(id, !selected.get(id)); // toggle\n *           return {selected};\n *         });\n *       };\n *\n *       _renderItem = ({item}) => (\n *         <MyListItem\n *           id={item.id}\n *           onPressItem={this._onPressItem}\n *           selected={!!this.state.selected.get(item.id)}\n *           title={item.title}\n *         />\n *       );\n *\n *       render() {\n *         return (\n *           <FlatList\n *             data={this.props.data}\n *             extraData={this.state}\n *             keyExtractor={this._keyExtractor}\n *             renderItem={this._renderItem}\n *           />\n *         );\n *       }\n *     }\n *\n * This is a convenience wrapper around [`<VirtualizedList>`](docs/virtualizedlist.html),\n * and thus inherits its props (as well as those of `ScrollView`) that aren't explicitly listed\n * here, along with the following caveats:\n *\n * - Internal state is not preserved when content scrolls out of the render window. Make sure all\n *   your data is captured in the item data or external stores like Flux, Redux, or Relay.\n * - This is a `PureComponent` which means that it will not re-render if `props` remain shallow-\n *   equal. Make sure that everything your `renderItem` function depends on is passed as a prop\n *   (e.g. `extraData`) that is not `===` after updates, otherwise your UI may not update on\n *   changes. This includes the `data` prop and parent component state.\n * - In order to constrain memory and enable smooth scrolling, content is rendered asynchronously\n *   offscreen. This means it's possible to scroll faster than the fill rate ands momentarily see\n *   blank content. This is a tradeoff that can be adjusted to suit the needs of each application,\n *   and we are working on improving it behind the scenes.\n * - By default, the list looks for a `key` prop on each item and uses that for the React key.\n *   Alternatively, you can provide a custom `keyExtractor` prop.\n *\n * Also inherits [ScrollView Props](docs/scrollview.html#props), unless it is nested in another FlatList of same orientation.\n */\nclass FlatList<ItemT> extends React.PureComponent<Props<ItemT>, void> {\n  static defaultProps: DefaultProps = defaultProps;\n  props: Props<ItemT>;\n  /**\n   * Scrolls to the end of the content. May be janky without `getItemLayout` prop.\n   */\n  scrollToEnd(params?: ?{animated?: ?boolean}) {\n    if (this._listRef) {\n      this._listRef.scrollToEnd(params);\n    }\n  }\n\n  /**\n   * Scrolls to the item at the specified index such that it is positioned in the viewable area\n   * such that `viewPosition` 0 places it at the top, 1 at the bottom, and 0.5 centered in the\n   * middle. `viewOffset` is a fixed number of pixels to offset the final target position.\n   *\n   * Note: cannot scroll to locations outside the render window without specifying the\n   * `getItemLayout` prop.\n   */\n  scrollToIndex(params: {\n    animated?: ?boolean,\n    index: number,\n    viewOffset?: number,\n    viewPosition?: number,\n  }) {\n    if (this._listRef) {\n      // $FlowFixMe Found when typing ListView\n      this._listRef.scrollToIndex(params);\n    }\n  }\n\n  /**\n   * Requires linear scan through data - use `scrollToIndex` instead if possible.\n   *\n   * Note: cannot scroll to locations outside the render window without specifying the\n   * `getItemLayout` prop.\n   */\n  scrollToItem(params: {\n    animated?: ?boolean,\n    item: ItemT,\n    viewPosition?: number,\n  }) {\n    if (this._listRef) {\n      // $FlowFixMe Found when typing ListView\n      this._listRef.scrollToItem(params);\n    }\n  }\n\n  /**\n   * Scroll to a specific content pixel offset in the list.\n   *\n   * Check out [scrollToOffset](docs/virtualizedlist.html#scrolltooffset) of VirtualizedList\n   */\n  scrollToOffset(params: {animated?: ?boolean, offset: number}) {\n    if (this._listRef) {\n      // $FlowFixMe Found when typing ListView\n      this._listRef.scrollToOffset(params);\n    }\n  }\n\n  /**\n   * Tells the list an interaction has occurred, which should trigger viewability calculations, e.g.\n   * if `waitForInteractions` is true and the user has not scrolled. This is typically called by\n   * taps on items or by navigation actions.\n   */\n  recordInteraction() {\n    if (this._listRef) {\n      // $FlowFixMe Found when typing ListView\n      this._listRef.recordInteraction();\n    }\n  }\n\n  /**\n   * Displays the scroll indicators momentarily.\n   *\n   * @platform ios\n   */\n  flashScrollIndicators() {\n    if (this._listRef) {\n      // $FlowFixMe Found when typing ListView\n      this._listRef.flashScrollIndicators();\n    }\n  }\n\n  /**\n   * Provides a handle to the underlying scroll responder.\n   */\n  getScrollResponder() {\n    if (this._listRef) {\n      // $FlowFixMe Found when typing ListView\n      return this._listRef.getScrollResponder();\n    }\n  }\n\n  getScrollableNode() {\n    if (this._listRef) {\n      // $FlowFixMe Found when typing ListView\n      return this._listRef.getScrollableNode();\n    }\n  }\n\n  setNativeProps(props: {[string]: mixed}) {\n    if (this._listRef) {\n      this._listRef.setNativeProps(props);\n    }\n  }\n\n  constructor(props: Props<ItemT>) {\n    super(props);\n    this._checkProps(this.props);\n    if (this.props.viewabilityConfigCallbackPairs) {\n      this._virtualizedListPairs = this.props.viewabilityConfigCallbackPairs.map(\n        pair => ({\n          viewabilityConfig: pair.viewabilityConfig,\n          onViewableItemsChanged: this._createOnViewableItemsChanged(\n            pair.onViewableItemsChanged,\n          ),\n        }),\n      );\n    } else if (this.props.onViewableItemsChanged) {\n      /* $FlowFixMe(>=0.63.0 site=react_native_fb) This comment suppresses an\n       * error found when Flow v0.63 was deployed. To see the error delete this\n       * comment and run Flow. */\n      this._virtualizedListPairs.push({\n        viewabilityConfig: this.props.viewabilityConfig,\n        onViewableItemsChanged: this._createOnViewableItemsChanged(\n          this.props.onViewableItemsChanged,\n        ),\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps: Props<ItemT>) {\n    invariant(\n      prevProps.numColumns === this.props.numColumns,\n      'Changing numColumns on the fly is not supported. Change the key prop on FlatList when ' +\n        'changing the number of columns to force a fresh render of the component.',\n    );\n    invariant(\n      prevProps.onViewableItemsChanged === this.props.onViewableItemsChanged,\n      'Changing onViewableItemsChanged on the fly is not supported',\n    );\n    invariant(\n      prevProps.viewabilityConfig === this.props.viewabilityConfig,\n      'Changing viewabilityConfig on the fly is not supported',\n    );\n    invariant(\n      prevProps.viewabilityConfigCallbackPairs ===\n        this.props.viewabilityConfigCallbackPairs,\n      'Changing viewabilityConfigCallbackPairs on the fly is not supported',\n    );\n\n    this._checkProps(this.props);\n  }\n\n  _hasWarnedLegacy = false;\n  _listRef: null | VirtualizedList | ListView | MetroListView;\n  _virtualizedListPairs: Array<ViewabilityConfigCallbackPair> = [];\n\n  _captureRef = ref => {\n    this._listRef = ref;\n  };\n\n  _checkProps(props: Props<ItemT>) {\n    const {\n      getItem,\n      getItemCount,\n      horizontal,\n      legacyImplementation,\n      numColumns,\n      columnWrapperStyle,\n      onViewableItemsChanged,\n      viewabilityConfigCallbackPairs,\n    } = props;\n    invariant(\n      !getItem && !getItemCount,\n      'FlatList does not support custom data formats.',\n    );\n    if (numColumns > 1) {\n      invariant(!horizontal, 'numColumns does not support horizontal.');\n    } else {\n      invariant(\n        !columnWrapperStyle,\n        'columnWrapperStyle not supported for single column lists',\n      );\n    }\n    if (legacyImplementation) {\n      invariant(\n        numColumns === 1,\n        'Legacy list does not support multiple columns.',\n      );\n      // Warning: may not have full feature parity and is meant more for debugging and performance\n      // comparison.\n      if (!this._hasWarnedLegacy) {\n        console.warn(\n          'FlatList: legacyImplementation is deprecated and will be removed in a ' +\n            'future release - some features not supported and performance may suffer. ' +\n            'Please migrate to the default implementation.',\n        );\n        this._hasWarnedLegacy = true;\n      }\n    }\n    invariant(\n      !(onViewableItemsChanged && viewabilityConfigCallbackPairs),\n      'FlatList does not support setting both onViewableItemsChanged and ' +\n        'viewabilityConfigCallbackPairs.',\n    );\n  }\n\n  _getItem = (data: Array<ItemT>, index: number) => {\n    const {numColumns} = this.props;\n    if (numColumns > 1) {\n      const ret = [];\n      for (let kk = 0; kk < numColumns; kk++) {\n        const item = data[index * numColumns + kk];\n        if (item != null) {\n          ret.push(item);\n        }\n      }\n      return ret;\n    } else {\n      return data[index];\n    }\n  };\n\n  _getItemCount = (data: ?Array<ItemT>): number => {\n    return data ? Math.ceil(data.length / this.props.numColumns) : 0;\n  };\n\n  _keyExtractor = (items: ItemT | Array<ItemT>, index: number) => {\n    const {keyExtractor, numColumns} = this.props;\n    if (numColumns > 1) {\n      invariant(\n        Array.isArray(items),\n        'FlatList: Encountered internal consistency error, expected each item to consist of an ' +\n          'array with 1-%s columns; instead, received a single item.',\n        numColumns,\n      );\n      return items\n        .map((it, kk) => keyExtractor(it, index * numColumns + kk))\n        .join(':');\n    } else {\n      /* $FlowFixMe(>=0.63.0 site=react_native_fb) This comment suppresses an\n       * error found when Flow v0.63 was deployed. To see the error delete this\n       * comment and run Flow. */\n      return keyExtractor(items, index);\n    }\n  };\n\n  _pushMultiColumnViewable(arr: Array<ViewToken>, v: ViewToken): void {\n    const {numColumns, keyExtractor} = this.props;\n    v.item.forEach((item, ii) => {\n      invariant(v.index != null, 'Missing index!');\n      const index = v.index * numColumns + ii;\n      arr.push({...v, item, key: keyExtractor(item, index), index});\n    });\n  }\n\n  _createOnViewableItemsChanged(\n    onViewableItemsChanged: ?(info: {\n      viewableItems: Array<ViewToken>,\n      changed: Array<ViewToken>,\n    }) => void,\n  ) {\n    return (info: {\n      viewableItems: Array<ViewToken>,\n      changed: Array<ViewToken>,\n    }) => {\n      const {numColumns} = this.props;\n      if (onViewableItemsChanged) {\n        if (numColumns > 1) {\n          const changed = [];\n          const viewableItems = [];\n          info.viewableItems.forEach(v =>\n            this._pushMultiColumnViewable(viewableItems, v),\n          );\n          info.changed.forEach(v => this._pushMultiColumnViewable(changed, v));\n          onViewableItemsChanged({viewableItems, changed});\n        } else {\n          onViewableItemsChanged(info);\n        }\n      }\n    };\n  }\n\n  _renderItem = (info: Object) => {\n    const {renderItem, numColumns, columnWrapperStyle} = this.props;\n    if (numColumns > 1) {\n      const {item, index} = info;\n      invariant(\n        Array.isArray(item),\n        'Expected array of items with numColumns > 1',\n      );\n      return (\n        <View\n          style={StyleSheet.compose(\n            styles.row,\n            columnWrapperStyle,\n          )}>\n          {item.map((it, kk) => {\n            const element = renderItem({\n              item: it,\n              index: index * numColumns + kk,\n              separators: info.separators,\n            });\n            return element && React.cloneElement(element, {key: kk});\n          })}\n        </View>\n      );\n    } else {\n      return renderItem(info);\n    }\n  };\n\n  render() {\n    if (this.props.legacyImplementation) {\n      return (\n        /* $FlowFixMe(>=0.66.0 site=react_native_fb) This comment suppresses an\n         * error found when Flow v0.66 was deployed. To see the error delete\n         * this comment and run Flow. */\n        <MetroListView\n          {...this.props}\n          /* $FlowFixMe(>=0.66.0 site=react_native_fb) This comment suppresses\n           * an error found when Flow v0.66 was deployed. To see the error\n           * delete this comment and run Flow. */\n          items={this.props.data}\n          ref={this._captureRef}\n        />\n      );\n    } else {\n      return (\n        <VirtualizedList\n          {...this.props}\n          renderItem={this._renderItem}\n          getItem={this._getItem}\n          getItemCount={this._getItemCount}\n          keyExtractor={this._keyExtractor}\n          ref={this._captureRef}\n          viewabilityConfigCallbackPairs={this._virtualizedListPairs}\n        />\n      );\n    }\n  }\n}\n\nconst styles = StyleSheet.create({\n  row: {flexDirection: 'row'},\n});\n\nmodule.exports = FlatList;\n"]}]}