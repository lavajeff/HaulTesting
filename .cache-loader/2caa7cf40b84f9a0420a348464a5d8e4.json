{"remainingRequest":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js??ref--5-2!/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/TextInput/TextInputState.js","dependencies":[{"path":"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/TextInput/TextInputState.js","mtime":1539700108130},{"path":"/Users/jeffrey/HaulTesting/node_modules/cache-loader/dist/cjs.js","mtime":1539652983212},{"path":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js","mtime":1539652983315},{"path":"/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js","mtime":1539615827828}],"contextDependencies":[],"result":["'use strict';(function(){var enterModule=require('react-hot-loader').enterModule;enterModule&&enterModule(module);})();var Platform=require('Platform');var UIManager=require('UIManager');var currentlyFocusedID=null;var inputs=new Set();function currentlyFocusedField(){return currentlyFocusedID;}function focusTextInput(textFieldID){if(currentlyFocusedID!==textFieldID&&textFieldID!==null){currentlyFocusedID=textFieldID;if(Platform.OS==='ios'){UIManager.focus(textFieldID);}else if(Platform.OS==='android'){UIManager.dispatchViewManagerCommand(textFieldID,UIManager.AndroidTextInput.Commands.focusTextInput,null);}}}function blurTextInput(textFieldID){if(currentlyFocusedID===textFieldID&&textFieldID!==null){currentlyFocusedID=null;if(Platform.OS==='ios'){UIManager.blur(textFieldID);}else if(Platform.OS==='android'){UIManager.dispatchViewManagerCommand(textFieldID,UIManager.AndroidTextInput.Commands.blurTextInput,null);}}}function registerInput(textFieldID){inputs.add(textFieldID);}function unregisterInput(textFieldID){inputs.delete(textFieldID);}function isTextInput(textFieldID){return inputs.has(textFieldID);}module.exports={currentlyFocusedField:currentlyFocusedField,focusTextInput:focusTextInput,blurTextInput:blurTextInput,registerInput:registerInput,unregisterInput:unregisterInput,isTextInput:isTextInput};;(function(){var reactHotLoader=require('react-hot-loader').default;var leaveModule=require('react-hot-loader').leaveModule;if(!reactHotLoader){return;}reactHotLoader.register(currentlyFocusedID,\"currentlyFocusedID\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/TextInput/TextInputState.js\");reactHotLoader.register(inputs,\"inputs\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/TextInput/TextInputState.js\");reactHotLoader.register(currentlyFocusedField,\"currentlyFocusedField\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/TextInput/TextInputState.js\");reactHotLoader.register(focusTextInput,\"focusTextInput\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/TextInput/TextInputState.js\");reactHotLoader.register(blurTextInput,\"blurTextInput\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/TextInput/TextInputState.js\");reactHotLoader.register(registerInput,\"registerInput\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/TextInput/TextInputState.js\");reactHotLoader.register(unregisterInput,\"unregisterInput\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/TextInput/TextInputState.js\");reactHotLoader.register(isTextInput,\"isTextInput\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/TextInput/TextInputState.js\");leaveModule(module);})();;",{"version":3,"sources":["/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/TextInput/TextInputState.js"],"names":["Platform","require","UIManager","currentlyFocusedID","inputs","Set","currentlyFocusedField","focusTextInput","textFieldID","OS","focus","dispatchViewManagerCommand","AndroidTextInput","Commands","blurTextInput","blur","registerInput","add","unregisterInput","delete","isTextInput","has","module","exports"],"mappings":"AAeA,a,0GAEA,GAAMA,CAAAA,QAAQ,CAAGC,OAAO,CAAC,UAAD,CAAxB,CACA,GAAMC,CAAAA,SAAS,CAAGD,OAAO,CAAC,WAAD,CAAzB,CAEA,GAAIE,CAAAA,kBAA2B,CAAG,IAAlC,CACA,GAAMC,CAAAA,MAAM,CAAG,GAAIC,CAAAA,GAAJ,EAAf,CAMA,QAASC,CAAAA,qBAAT,EAA0C,CACxC,MAAOH,CAAAA,kBAAP,CACD,CAOD,QAASI,CAAAA,cAAT,CAAwBC,WAAxB,CAA8C,CAC5C,GAAIL,kBAAkB,GAAKK,WAAvB,EAAsCA,WAAW,GAAK,IAA1D,CAAgE,CAC9DL,kBAAkB,CAAGK,WAArB,CACA,GAAIR,QAAQ,CAACS,EAAT,GAAgB,KAApB,CAA2B,CACzBP,SAAS,CAACQ,KAAV,CAAgBF,WAAhB,EACD,CAFD,IAEO,IAAIR,QAAQ,CAACS,EAAT,GAAgB,SAApB,CAA+B,CACpCP,SAAS,CAACS,0BAAV,CACEH,WADF,CAEEN,SAAS,CAACU,gBAAV,CAA2BC,QAA3B,CAAoCN,cAFtC,CAGE,IAHF,EAKD,CACF,CACF,CAOD,QAASO,CAAAA,aAAT,CAAuBN,WAAvB,CAA6C,CAC3C,GAAIL,kBAAkB,GAAKK,WAAvB,EAAsCA,WAAW,GAAK,IAA1D,CAAgE,CAC9DL,kBAAkB,CAAG,IAArB,CACA,GAAIH,QAAQ,CAACS,EAAT,GAAgB,KAApB,CAA2B,CACzBP,SAAS,CAACa,IAAV,CAAeP,WAAf,EACD,CAFD,IAEO,IAAIR,QAAQ,CAACS,EAAT,GAAgB,SAApB,CAA+B,CACpCP,SAAS,CAACS,0BAAV,CACEH,WADF,CAEEN,SAAS,CAACU,gBAAV,CAA2BC,QAA3B,CAAoCC,aAFtC,CAGE,IAHF,EAKD,CACF,CACF,CAED,QAASE,CAAAA,aAAT,CAAuBR,WAAvB,CAA4C,CAC1CJ,MAAM,CAACa,GAAP,CAAWT,WAAX,EACD,CAED,QAASU,CAAAA,eAAT,CAAyBV,WAAzB,CAA8C,CAC5CJ,MAAM,CAACe,MAAP,CAAcX,WAAd,EACD,CAED,QAASY,CAAAA,WAAT,CAAqBZ,WAArB,CAA0C,CACxC,MAAOJ,CAAAA,MAAM,CAACiB,GAAP,CAAWb,WAAX,CAAP,CACD,CAEDc,MAAM,CAACC,OAAP,CAAiB,CACfjB,qBAAqB,CAArBA,qBADe,CAEfC,cAAc,CAAdA,cAFe,CAGfO,aAAa,CAAbA,aAHe,CAIfE,aAAa,CAAbA,aAJe,CAKfE,eAAe,CAAfA,eALe,CAMfE,WAAW,CAAXA,WANe,CAAjB,C,gLA/DIjB,kB,uJACEC,M,2IAMGE,qB,0JASAC,c,mJAoBAO,a,kJAeAE,a,kJAIAE,e,oJAIAE,W","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n * This class is responsible for coordinating the \"focused\"\n * state for TextInputs. All calls relating to the keyboard\n * should be funneled through here\n *\n * @format\n * @flow strict-local\n */\n\n'use strict';\n\nconst Platform = require('Platform');\nconst UIManager = require('UIManager');\n\nlet currentlyFocusedID: ?number = null;\nconst inputs = new Set();\n\n/**\n * Returns the ID of the currently focused text field, if one exists\n * If no text field is focused it returns null\n */\nfunction currentlyFocusedField(): ?number {\n  return currentlyFocusedID;\n}\n\n/**\n * @param {number} TextInputID id of the text field to focus\n * Focuses the specified text field\n * noop if the text field was already focused\n */\nfunction focusTextInput(textFieldID: ?number) {\n  if (currentlyFocusedID !== textFieldID && textFieldID !== null) {\n    currentlyFocusedID = textFieldID;\n    if (Platform.OS === 'ios') {\n      UIManager.focus(textFieldID);\n    } else if (Platform.OS === 'android') {\n      UIManager.dispatchViewManagerCommand(\n        textFieldID,\n        UIManager.AndroidTextInput.Commands.focusTextInput,\n        null,\n      );\n    }\n  }\n}\n\n/**\n * @param {number} textFieldID id of the text field to unfocus\n * Unfocuses the specified text field\n * noop if it wasn't focused\n */\nfunction blurTextInput(textFieldID: ?number) {\n  if (currentlyFocusedID === textFieldID && textFieldID !== null) {\n    currentlyFocusedID = null;\n    if (Platform.OS === 'ios') {\n      UIManager.blur(textFieldID);\n    } else if (Platform.OS === 'android') {\n      UIManager.dispatchViewManagerCommand(\n        textFieldID,\n        UIManager.AndroidTextInput.Commands.blurTextInput,\n        null,\n      );\n    }\n  }\n}\n\nfunction registerInput(textFieldID: number) {\n  inputs.add(textFieldID);\n}\n\nfunction unregisterInput(textFieldID: number) {\n  inputs.delete(textFieldID);\n}\n\nfunction isTextInput(textFieldID: number) {\n  return inputs.has(textFieldID);\n}\n\nmodule.exports = {\n  currentlyFocusedField,\n  focusTextInput,\n  blurTextInput,\n  registerInput,\n  unregisterInput,\n  isTextInput,\n};\n"]}]}