{"remainingRequest":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js??ref--5-2!/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Utilities/Dimensions.js","dependencies":[{"path":"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Utilities/Dimensions.js","mtime":1539700108130},{"path":"/Users/jeffrey/HaulTesting/node_modules/cache-loader/dist/cjs.js","mtime":1539652983212},{"path":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js","mtime":1539652983315},{"path":"/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js","mtime":1539615827828}],"contextDependencies":[],"result":["'use strict';var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));(function(){var enterModule=require('react-hot-loader').enterModule;enterModule&&enterModule(module);})();var EventEmitter=require('EventEmitter');var Platform=require('Platform');var RCTDeviceEventEmitter=require('RCTDeviceEventEmitter');var invariant=require('fbjs/lib/invariant');var eventEmitter=new EventEmitter();var dimensionsInitialized=false;var dimensions={};var Dimensions=function(){function Dimensions(){(0,_classCallCheck2.default)(this,Dimensions);}(0,_createClass2.default)(Dimensions,null,[{key:\"set\",value:function set(dims){if(dims&&dims.windowPhysicalPixels){dims=JSON.parse(JSON.stringify(dims));var windowPhysicalPixels=dims.windowPhysicalPixels;dims.window={width:windowPhysicalPixels.width/windowPhysicalPixels.scale,height:windowPhysicalPixels.height/windowPhysicalPixels.scale,scale:windowPhysicalPixels.scale,fontScale:windowPhysicalPixels.fontScale};if(Platform.OS==='android'){var screenPhysicalPixels=dims.screenPhysicalPixels;dims.screen={width:screenPhysicalPixels.width/screenPhysicalPixels.scale,height:screenPhysicalPixels.height/screenPhysicalPixels.scale,scale:screenPhysicalPixels.scale,fontScale:screenPhysicalPixels.fontScale};delete dims.screenPhysicalPixels;}else{dims.screen=dims.window;}delete dims.windowPhysicalPixels;}(0,_extends2.default)(dimensions,dims);if(dimensionsInitialized){eventEmitter.emit('change',{window:dimensions.window,screen:dimensions.screen});}else{dimensionsInitialized=true;}}},{key:\"get\",value:function get(dim){invariant(dimensions[dim],'No dimension set for key '+dim);return dimensions[dim];}},{key:\"addEventListener\",value:function addEventListener(type,handler){invariant(type==='change','Trying to subscribe to unknown event: \"%s\"',type);eventEmitter.addListener(type,handler);}},{key:\"removeEventListener\",value:function removeEventListener(type,handler){invariant(type==='change','Trying to remove listener for unknown event: \"%s\"',type);eventEmitter.removeListener(type,handler);}}]);return Dimensions;}();var dims=global.nativeExtensions&&global.nativeExtensions.DeviceInfo&&global.nativeExtensions.DeviceInfo.Dimensions;var nativeExtensionsEnabled=true;if(!dims){var DeviceInfo=require('DeviceInfo');dims=DeviceInfo.Dimensions;nativeExtensionsEnabled=false;}invariant(dims,'Either DeviceInfo native extension or DeviceInfo Native Module must be registered');Dimensions.set(dims);if(!nativeExtensionsEnabled){RCTDeviceEventEmitter.addListener('didUpdateDimensions',function(update){Dimensions.set(update);});}module.exports=Dimensions;;(function(){var reactHotLoader=require('react-hot-loader').default;var leaveModule=require('react-hot-loader').leaveModule;if(!reactHotLoader){return;}reactHotLoader.register(eventEmitter,\"eventEmitter\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Utilities/Dimensions.js\");reactHotLoader.register(dimensionsInitialized,\"dimensionsInitialized\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Utilities/Dimensions.js\");reactHotLoader.register(dimensions,\"dimensions\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Utilities/Dimensions.js\");reactHotLoader.register(Dimensions,\"Dimensions\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Utilities/Dimensions.js\");reactHotLoader.register(dims,\"dims\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Utilities/Dimensions.js\");reactHotLoader.register(nativeExtensionsEnabled,\"nativeExtensionsEnabled\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Utilities/Dimensions.js\");leaveModule(module);})();;",{"version":3,"sources":["/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Utilities/Dimensions.js"],"names":["EventEmitter","require","Platform","RCTDeviceEventEmitter","invariant","eventEmitter","dimensionsInitialized","dimensions","Dimensions","dims","windowPhysicalPixels","JSON","parse","stringify","window","width","scale","height","fontScale","OS","screenPhysicalPixels","screen","emit","dim","type","handler","addListener","removeListener","global","nativeExtensions","DeviceInfo","nativeExtensionsEnabled","set","update","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst EventEmitter = require('EventEmitter');\nconst Platform = require('Platform');\nconst RCTDeviceEventEmitter = require('RCTDeviceEventEmitter');\n\nconst invariant = require('fbjs/lib/invariant');\n\nconst eventEmitter = new EventEmitter();\nlet dimensionsInitialized = false;\nconst dimensions = {};\nclass Dimensions {\n  /**\n   * This should only be called from native code by sending the\n   * didUpdateDimensions event.\n   *\n   * @param {object} dims Simple string-keyed object of dimensions to set\n   */\n  static set(dims: {[key: string]: any}): void {\n    // We calculate the window dimensions in JS so that we don't encounter loss of\n    // precision in transferring the dimensions (which could be non-integers) over\n    // the bridge.\n    if (dims && dims.windowPhysicalPixels) {\n      // parse/stringify => Clone hack\n      dims = JSON.parse(JSON.stringify(dims));\n\n      const windowPhysicalPixels = dims.windowPhysicalPixels;\n      dims.window = {\n        width: windowPhysicalPixels.width / windowPhysicalPixels.scale,\n        height: windowPhysicalPixels.height / windowPhysicalPixels.scale,\n        scale: windowPhysicalPixels.scale,\n        fontScale: windowPhysicalPixels.fontScale,\n      };\n      if (Platform.OS === 'android') {\n        // Screen and window dimensions are different on android\n        const screenPhysicalPixels = dims.screenPhysicalPixels;\n        dims.screen = {\n          width: screenPhysicalPixels.width / screenPhysicalPixels.scale,\n          height: screenPhysicalPixels.height / screenPhysicalPixels.scale,\n          scale: screenPhysicalPixels.scale,\n          fontScale: screenPhysicalPixels.fontScale,\n        };\n\n        // delete so no callers rely on this existing\n        delete dims.screenPhysicalPixels;\n      } else {\n        dims.screen = dims.window;\n      }\n      // delete so no callers rely on this existing\n      delete dims.windowPhysicalPixels;\n    }\n\n    Object.assign(dimensions, dims);\n    if (dimensionsInitialized) {\n      // Don't fire 'change' the first time the dimensions are set.\n      eventEmitter.emit('change', {\n        window: dimensions.window,\n        screen: dimensions.screen,\n      });\n    } else {\n      dimensionsInitialized = true;\n    }\n  }\n\n  /**\n   * Initial dimensions are set before `runApplication` is called so they should\n   * be available before any other require's are run, but may be updated later.\n   *\n   * Note: Although dimensions are available immediately, they may change (e.g\n   * due to device rotation) so any rendering logic or styles that depend on\n   * these constants should try to call this function on every render, rather\n   * than caching the value (for example, using inline styles rather than\n   * setting a value in a `StyleSheet`).\n   *\n   * Example: `var {height, width} = Dimensions.get('window');`\n   *\n   * @param {string} dim Name of dimension as defined when calling `set`.\n   * @returns {Object?} Value for the dimension.\n   */\n  static get(dim: string): Object {\n    invariant(dimensions[dim], 'No dimension set for key ' + dim);\n    return dimensions[dim];\n  }\n\n  /**\n   * Add an event handler. Supported events:\n   *\n   * - `change`: Fires when a property within the `Dimensions` object changes. The argument\n   *   to the event handler is an object with `window` and `screen` properties whose values\n   *   are the same as the return values of `Dimensions.get('window')` and\n   *   `Dimensions.get('screen')`, respectively.\n   */\n  static addEventListener(type: string, handler: Function) {\n    invariant(\n      type === 'change',\n      'Trying to subscribe to unknown event: \"%s\"',\n      type,\n    );\n    eventEmitter.addListener(type, handler);\n  }\n\n  /**\n   * Remove an event handler.\n   */\n  static removeEventListener(type: string, handler: Function) {\n    invariant(\n      type === 'change',\n      'Trying to remove listener for unknown event: \"%s\"',\n      type,\n    );\n    eventEmitter.removeListener(type, handler);\n  }\n}\n\nlet dims: ?{[key: string]: any} =\n  global.nativeExtensions &&\n  global.nativeExtensions.DeviceInfo &&\n  global.nativeExtensions.DeviceInfo.Dimensions;\nlet nativeExtensionsEnabled = true;\nif (!dims) {\n  const DeviceInfo = require('DeviceInfo');\n  dims = DeviceInfo.Dimensions;\n  nativeExtensionsEnabled = false;\n}\n\ninvariant(\n  dims,\n  'Either DeviceInfo native extension or DeviceInfo Native Module must be registered',\n);\nDimensions.set(dims);\nif (!nativeExtensionsEnabled) {\n  RCTDeviceEventEmitter.addListener('didUpdateDimensions', function(update) {\n    Dimensions.set(update);\n  });\n}\n\nmodule.exports = Dimensions;\n"]}]}