{"remainingRequest":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js??ref--5-2!/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Image/ImageEditor.js","dependencies":[{"path":"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Image/ImageEditor.js","mtime":1539700108130},{"path":"/Users/jeffrey/HaulTesting/node_modules/cache-loader/dist/cjs.js","mtime":1539652983212},{"path":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js","mtime":1539652983315},{"path":"/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js","mtime":1539615827828}],"contextDependencies":[],"result":["'use strict';var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));(function(){var enterModule=require('react-hot-loader').enterModule;enterModule&&enterModule(module);})();var RCTImageEditingManager=require('NativeModules').ImageEditingManager;var ImageEditor=function(){function ImageEditor(){(0,_classCallCheck2.default)(this,ImageEditor);}(0,_createClass2.default)(ImageEditor,null,[{key:\"cropImage\",value:function cropImage(uri,cropData,success,failure){RCTImageEditingManager.cropImage(uri,cropData,success,failure);}}]);return ImageEditor;}();module.exports=ImageEditor;;(function(){var reactHotLoader=require('react-hot-loader').default;var leaveModule=require('react-hot-loader').leaveModule;if(!reactHotLoader){return;}reactHotLoader.register(RCTImageEditingManager,\"RCTImageEditingManager\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Image/ImageEditor.js\");reactHotLoader.register(ImageEditor,\"ImageEditor\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Image/ImageEditor.js\");leaveModule(module);})();;",{"version":3,"sources":["/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Image/ImageEditor.js"],"names":["RCTImageEditingManager","require","ImageEditingManager","ImageEditor","uri","cropData","success","failure","cropImage","module","exports"],"mappings":"AASA,a,mXAEA,GAAMA,CAAAA,sBAAsB,CAAGC,OAAO,CAAC,eAAD,CAAP,CAAyBC,mBAAxD,C,GAqCMC,CAAAA,W,yKAcFC,G,CACAC,Q,CACAC,O,CACAC,O,CACA,CACAP,sBAAsB,CAACQ,SAAvB,CAAiCJ,GAAjC,CAAsCC,QAAtC,CAAgDC,OAAhD,CAAyDC,OAAzD,EACD,C,2BAGHE,MAAM,CAACC,OAAP,CAAiBP,WAAjB,C,gLA5DMH,sB,yIAqCAG,W","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst RCTImageEditingManager = require('NativeModules').ImageEditingManager;\n\ntype ImageCropData = {\n  /**\n   * The top-left corner of the cropped image, specified in the original\n   * image's coordinate space.\n   */\n  offset: {\n    x: number,\n    y: number,\n  },\n  /**\n   * The size (dimensions) of the cropped image, specified in the original\n   * image's coordinate space.\n   */\n  size: {\n    width: number,\n    height: number,\n  },\n  /**\n   * (Optional) size to scale the cropped image to.\n   */\n  displaySize?: ?{\n    width: number,\n    height: number,\n  },\n  /**\n   * (Optional) the resizing mode to use when scaling the image. If the\n   * `displaySize` param is not specified, this has no effect.\n   */\n  resizeMode?: ?$Enum<{\n    contain: string,\n    cover: string,\n    stretch: string,\n  }>,\n};\n\nclass ImageEditor {\n  /**\n   * Crop the image specified by the URI param. If URI points to a remote\n   * image, it will be downloaded automatically. If the image cannot be\n   * loaded/downloaded, the failure callback will be called. On Android, a\n   * downloaded image may be cached in external storage, a publicly accessible\n   * location, if it has more available space than internal storage.\n   *\n   * If the cropping process is successful, the resultant cropped image\n   * will be stored in the ImageStore, and the URI returned in the success\n   * callback will point to the image in the store. Remember to delete the\n   * cropped image from the ImageStore when you are done with it.\n   */\n  static cropImage(\n    uri: string,\n    cropData: ImageCropData,\n    success: (uri: string) => void,\n    failure: (error: Object) => void,\n  ) {\n    RCTImageEditingManager.cropImage(uri, cropData, success, failure);\n  }\n}\n\nmodule.exports = ImageEditor;\n"]}]}