{"remainingRequest":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js??ref--5-2!/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/RefreshControl/RefreshControl.js","dependencies":[{"path":"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/RefreshControl/RefreshControl.js","mtime":1539700108130},{"path":"/Users/jeffrey/HaulTesting/node_modules/cache-loader/dist/cjs.js","mtime":1539652983212},{"path":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js","mtime":1539652983315},{"path":"/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js","mtime":1539615827828}],"contextDependencies":[],"result":["'use strict';var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _possibleConstructorReturn2=_interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));var _getPrototypeOf3=_interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));var _inherits2=_interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));var _jsxFileName=\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/RefreshControl/RefreshControl.js\";(function(){var enterModule=require('react-hot-loader').enterModule;enterModule&&enterModule(module);})();var Platform=require('Platform');var React=require('React');var _require=require('ReactNative'),NativeComponent=_require.NativeComponent;var requireNativeComponent=require('requireNativeComponent');var nullthrows=require('fbjs/lib/nullthrows');if(Platform.OS==='android'){var AndroidSwipeRefreshLayout=require('UIManager').AndroidSwipeRefreshLayout;var RefreshLayoutConsts=AndroidSwipeRefreshLayout?AndroidSwipeRefreshLayout.Constants:{SIZE:{}};}else{var RefreshLayoutConsts={SIZE:{}};}var NativeRefreshControl=Platform.OS==='ios'?requireNativeComponent('RCTRefreshControl'):requireNativeComponent('AndroidSwipeRefreshLayout');var RefreshControl=function(_React$Component){(0,_inherits2.default)(RefreshControl,_React$Component);function RefreshControl(){var _getPrototypeOf2;var _this;(0,_classCallCheck2.default)(this,RefreshControl);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=(0,_possibleConstructorReturn2.default)(this,(_getPrototypeOf2=(0,_getPrototypeOf3.default)(RefreshControl)).call.apply(_getPrototypeOf2,[this].concat(args)));_this._nativeRef=null;_this._lastNativeRefreshing=false;_this._onRefresh=function(){_this._lastNativeRefreshing=true;_this.props.onRefresh&&_this.props.onRefresh();_this.forceUpdate();};return _this;}(0,_createClass2.default)(RefreshControl,[{key:\"componentDidMount\",value:function componentDidMount(){this._lastNativeRefreshing=this.props.refreshing;}},{key:\"componentDidUpdate\",value:function componentDidUpdate(prevProps){if(this.props.refreshing!==prevProps.refreshing){this._lastNativeRefreshing=this.props.refreshing;}else if(this.props.refreshing!==this._lastNativeRefreshing){nullthrows(this._nativeRef).setNativeProps({refreshing:this.props.refreshing});this._lastNativeRefreshing=this.props.refreshing;}}},{key:\"render\",value:function render(){var _this2=this;return React.createElement(NativeRefreshControl,(0,_extends2.default)({},this.props,{ref:function ref(_ref){_this2._nativeRef=_ref;},onRefresh:this._onRefresh,__source:{fileName:_jsxFileName,lineNumber:167}}));}},{key:\"__reactstandin__regenerateByEval\",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code);}}]);return RefreshControl;}(React.Component);RefreshControl.SIZE=RefreshLayoutConsts.SIZE;module.exports=RefreshControl;;(function(){var reactHotLoader=require('react-hot-loader').default;var leaveModule=require('react-hot-loader').leaveModule;if(!reactHotLoader){return;}reactHotLoader.register(RefreshLayoutConsts,\"RefreshLayoutConsts\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/RefreshControl/RefreshControl.js\");reactHotLoader.register(NativeRefreshControl,\"NativeRefreshControl\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/RefreshControl/RefreshControl.js\");reactHotLoader.register(RefreshControl,\"RefreshControl\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/RefreshControl/RefreshControl.js\");leaveModule(module);})();;",{"version":3,"sources":["/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/RefreshControl/RefreshControl.js"],"names":["Platform","require","React","NativeComponent","requireNativeComponent","nullthrows","OS","AndroidSwipeRefreshLayout","RefreshLayoutConsts","Constants","SIZE","NativeRefreshControl","RefreshControl","_nativeRef","_lastNativeRefreshing","_onRefresh","props","onRefresh","forceUpdate","refreshing","prevProps","setNativeProps","ref","Component","module","exports"],"mappings":"AAUA,a,q2BAEA,GAAMA,CAAAA,QAAQ,CAAGC,OAAO,CAAC,UAAD,CAAxB,CACA,GAAMC,CAAAA,KAAK,CAAGD,OAAO,CAAC,OAAD,CAArB,C,aAC0BA,OAAO,CAAC,aAAD,C,CAA1BE,e,UAAAA,e,CAEP,GAAMC,CAAAA,sBAAsB,CAAGH,OAAO,CAAC,wBAAD,CAAtC,CACA,GAAMI,CAAAA,UAAU,CAAGJ,OAAO,CAAC,qBAAD,CAA1B,CAKA,GAAID,QAAQ,CAACM,EAAT,GAAgB,SAApB,CAA+B,CAC7B,GAAMC,CAAAA,yBAAyB,CAAGN,OAAO,CAAC,WAAD,CAAP,CAC/BM,yBADH,CAEA,GAAIC,CAAAA,mBAAmB,CAAGD,yBAAyB,CAC/CA,yBAAyB,CAACE,SADqB,CAE/C,CAACC,IAAI,CAAE,EAAP,CAFJ,CAGD,CAND,IAMO,CACL,GAAIF,CAAAA,mBAAmB,CAAG,CAACE,IAAI,CAAE,EAAP,CAA1B,CACD,CAGD,GAAMC,CAAAA,oBAA8C,CAClDX,QAAQ,CAACM,EAAT,GAAgB,KAAhB,CACKF,sBAAsB,CAAC,mBAAD,CAD3B,CAEKA,sBAAsB,CAAC,2BAAD,CAH7B,C,GA2GMQ,CAAAA,c,kdAGJC,U,CAA0D,I,OAC1DC,qB,CAAwB,K,OAgCxBC,U,CAAa,UAAM,CACjB,MAAKD,qBAAL,CAA6B,IAA7B,CAEA,MAAKE,KAAL,CAAWC,SAAX,EAAwB,MAAKD,KAAL,CAAWC,SAAX,EAAxB,CAIA,MAAKC,WAAL,GACD,C,oHAtCmB,CAClB,KAAKJ,qBAAL,CAA6B,KAAKE,KAAL,CAAWG,UAAxC,CACD,C,8DAEkBC,S,CAAkB,CAInC,GAAI,KAAKJ,KAAL,CAAWG,UAAX,GAA0BC,SAAS,CAACD,UAAxC,CAAoD,CAClD,KAAKL,qBAAL,CAA6B,KAAKE,KAAL,CAAWG,UAAxC,CACD,CAFD,IAEO,IAAI,KAAKH,KAAL,CAAWG,UAAX,GAA0B,KAAKL,qBAAnC,CAA0D,CAC/DT,UAAU,CAAC,KAAKQ,UAAN,CAAV,CAA4BQ,cAA5B,CAA2C,CACzCF,UAAU,CAAE,KAAKH,KAAL,CAAWG,UADkB,CAA3C,EAGA,KAAKL,qBAAL,CAA6B,KAAKE,KAAL,CAAWG,UAAxC,CACD,CACF,C,uCAEQ,iBACP,MACE,qBAAC,oBAAD,0BACM,KAAKH,KADX,EAEE,GAAG,CAAE,aAAAM,IAAG,CAAI,CACV,MAAI,CAACT,UAAL,CAAkBS,IAAlB,CACD,CAJH,CAKE,SAAS,CAAE,KAAKP,UALlB,mDADF,CASD,C,sJAlC0Bb,KAAK,CAACqB,S,EAA7BX,c,CACGF,I,CAAOF,mBAAmB,CAACE,I,CA8CpCc,MAAM,CAACC,OAAP,CAAiBb,cAAjB,C,gLAlKMJ,mB,6JAQAG,oB,8JA2GAC,c","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst Platform = require('Platform');\nconst React = require('React');\nconst {NativeComponent} = require('ReactNative');\n\nconst requireNativeComponent = require('requireNativeComponent');\nconst nullthrows = require('fbjs/lib/nullthrows');\n\nimport type {ColorValue} from 'StyleSheetTypes';\nimport type {ViewProps} from 'ViewPropTypes';\n\nif (Platform.OS === 'android') {\n  const AndroidSwipeRefreshLayout = require('UIManager')\n    .AndroidSwipeRefreshLayout;\n  var RefreshLayoutConsts = AndroidSwipeRefreshLayout\n    ? AndroidSwipeRefreshLayout.Constants\n    : {SIZE: {}};\n} else {\n  var RefreshLayoutConsts = {SIZE: {}};\n}\ntype NativeRefreshControlType = Class<NativeComponent<Props>>;\n\nconst NativeRefreshControl: NativeRefreshControlType =\n  Platform.OS === 'ios'\n    ? (requireNativeComponent('RCTRefreshControl'): any)\n    : (requireNativeComponent('AndroidSwipeRefreshLayout'): any);\n\ntype IOSProps = $ReadOnly<{|\n  /**\n   * The color of the refresh indicator.\n   */\n  tintColor?: ?ColorValue,\n  /**\n   * Title color.\n   */\n  titleColor?: ?ColorValue,\n  /**\n   * The title displayed under the refresh indicator.\n   */\n  title?: ?string,\n|}>;\n\ntype AndroidProps = $ReadOnly<{|\n  /**\n   * Whether the pull to refresh functionality is enabled.\n   */\n  enabled?: ?boolean,\n  /**\n   * The colors (at least one) that will be used to draw the refresh indicator.\n   */\n  colors?: ?$ReadOnlyArray<ColorValue>,\n  /**\n   * The background color of the refresh indicator.\n   */\n  progressBackgroundColor?: ?ColorValue,\n  /**\n   * Size of the refresh indicator, see RefreshControl.SIZE.\n   */\n  size?: ?(\n    | typeof RefreshLayoutConsts.SIZE.DEFAULT\n    | typeof RefreshLayoutConsts.SIZE.LARGE\n  ),\n  /**\n   * Progress view top offset\n   */\n  progressViewOffset?: ?number,\n|}>;\n\ntype Props = $ReadOnly<{|\n  ...ViewProps,\n  ...IOSProps,\n  ...AndroidProps,\n\n  /**\n   * Called when the view starts refreshing.\n   */\n  onRefresh?: ?Function,\n\n  /**\n   * Whether the view should be indicating an active refresh.\n   */\n  refreshing: boolean,\n|}>;\n\n/**\n * This component is used inside a ScrollView or ListView to add pull to refresh\n * functionality. When the ScrollView is at `scrollY: 0`, swiping down\n * triggers an `onRefresh` event.\n *\n * ### Usage example\n *\n * ``` js\n * class RefreshableList extends Component {\n *   constructor(props) {\n *     super(props);\n *     this.state = {\n *       refreshing: false,\n *     };\n *   }\n *\n *   _onRefresh() {\n *     this.setState({refreshing: true});\n *     fetchData().then(() => {\n *       this.setState({refreshing: false});\n *     });\n *   }\n *\n *   render() {\n *     return (\n *       <ListView\n *         refreshControl={\n *           <RefreshControl\n *             refreshing={this.state.refreshing}\n *             onRefresh={this._onRefresh.bind(this)}\n *           />\n *         }\n *         ...\n *       >\n *       ...\n *       </ListView>\n *     );\n *   }\n *   ...\n * }\n * ```\n *\n * __Note:__ `refreshing` is a controlled prop, this is why it needs to be set to true\n * in the `onRefresh` function otherwise the refresh indicator will stop immediately.\n */\nclass RefreshControl extends React.Component<Props> {\n  static SIZE = RefreshLayoutConsts.SIZE;\n\n  _nativeRef: ?React.ElementRef<NativeRefreshControlType> = null;\n  _lastNativeRefreshing = false;\n\n  componentDidMount() {\n    this._lastNativeRefreshing = this.props.refreshing;\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    // RefreshControl is a controlled component so if the native refreshing\n    // value doesn't match the current js refreshing prop update it to\n    // the js value.\n    if (this.props.refreshing !== prevProps.refreshing) {\n      this._lastNativeRefreshing = this.props.refreshing;\n    } else if (this.props.refreshing !== this._lastNativeRefreshing) {\n      nullthrows(this._nativeRef).setNativeProps({\n        refreshing: this.props.refreshing,\n      });\n      this._lastNativeRefreshing = this.props.refreshing;\n    }\n  }\n\n  render() {\n    return (\n      <NativeRefreshControl\n        {...this.props}\n        ref={ref => {\n          this._nativeRef = ref;\n        }}\n        onRefresh={this._onRefresh}\n      />\n    );\n  }\n\n  _onRefresh = () => {\n    this._lastNativeRefreshing = true;\n\n    this.props.onRefresh && this.props.onRefresh();\n\n    // The native component will start refreshing so force an update to\n    // make sure it stays in sync with the js component.\n    this.forceUpdate();\n  };\n}\n\nmodule.exports = RefreshControl;\n"]}]}