{"remainingRequest":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js??ref--5-2!/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/TextInput/InputAccessoryView.js","dependencies":[{"path":"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/TextInput/InputAccessoryView.js","mtime":1539700108130},{"path":"/Users/jeffrey/HaulTesting/node_modules/cache-loader/dist/cjs.js","mtime":1539652983212},{"path":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js","mtime":1539652983315},{"path":"/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js","mtime":1539615827828}],"contextDependencies":[],"result":["'use strict';var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _possibleConstructorReturn2=_interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));var _getPrototypeOf2=_interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));var _inherits2=_interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));var _jsxFileName=\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/TextInput/InputAccessoryView.js\";(function(){var enterModule=require('react-hot-loader').enterModule;enterModule&&enterModule(module);})();var ColorPropType=require('ColorPropType');var React=require('React');var StyleSheet=require('StyleSheet');var ViewPropTypes=require('ViewPropTypes');var requireNativeComponent=require('requireNativeComponent');var RCTInputAccessoryView=requireNativeComponent('RCTInputAccessoryView');var InputAccessoryView=function(_React$Component){(0,_inherits2.default)(InputAccessoryView,_React$Component);function InputAccessoryView(){(0,_classCallCheck2.default)(this,InputAccessoryView);return(0,_possibleConstructorReturn2.default)(this,(0,_getPrototypeOf2.default)(InputAccessoryView).apply(this,arguments));}(0,_createClass2.default)(InputAccessoryView,[{key:\"render\",value:function render(){console.warn('<InputAccessoryView> is not supported on Android yet.');if(React.Children.count(this.props.children)===0){return null;}return React.createElement(RCTInputAccessoryView,{style:[this.props.style,styles.container],nativeID:this.props.nativeID,backgroundColor:this.props.backgroundColor,__source:{fileName:_jsxFileName,lineNumber:99}},this.props.children);}},{key:\"__reactstandin__regenerateByEval\",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code);}}]);return InputAccessoryView;}(React.Component);var styles=StyleSheet.create({container:{position:'absolute'}});module.exports=InputAccessoryView;;(function(){var reactHotLoader=require('react-hot-loader').default;var leaveModule=require('react-hot-loader').leaveModule;if(!reactHotLoader){return;}reactHotLoader.register(RCTInputAccessoryView,\"RCTInputAccessoryView\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/TextInput/InputAccessoryView.js\");reactHotLoader.register(InputAccessoryView,\"InputAccessoryView\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/TextInput/InputAccessoryView.js\");reactHotLoader.register(styles,\"styles\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/TextInput/InputAccessoryView.js\");leaveModule(module);})();;",{"version":3,"sources":["/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/TextInput/InputAccessoryView.js"],"names":["ColorPropType","require","React","StyleSheet","ViewPropTypes","requireNativeComponent","RCTInputAccessoryView","InputAccessoryView","console","warn","Children","count","props","children","style","styles","container","nativeID","backgroundColor","Component","create","position","module","exports"],"mappings":"AASA,a,oxBAEA,GAAMA,CAAAA,aAAa,CAAGC,OAAO,CAAC,eAAD,CAA7B,CACA,GAAMC,CAAAA,KAAK,CAAGD,OAAO,CAAC,OAAD,CAArB,CACA,GAAME,CAAAA,UAAU,CAAGF,OAAO,CAAC,YAAD,CAA1B,CACA,GAAMG,CAAAA,aAAa,CAAGH,OAAO,CAAC,eAAD,CAA7B,CAEA,GAAMI,CAAAA,sBAAsB,CAAGJ,OAAO,CAAC,wBAAD,CAAtC,CAEA,GAAMK,CAAAA,qBAAqB,CAAGD,sBAAsB,CAAC,uBAAD,CAApD,C,GAuEME,CAAAA,kB,2XACiB,CACnBC,OAAO,CAACC,IAAR,CAAa,uDAAb,EAEA,GAAIP,KAAK,CAACQ,QAAN,CAAeC,KAAf,CAAqB,KAAKC,KAAL,CAAWC,QAAhC,IAA8C,CAAlD,CAAqD,CACnD,MAAO,KAAP,CACD,CAED,MACE,qBAAC,qBAAD,EACE,KAAK,CAAE,CAAC,KAAKD,KAAL,CAAWE,KAAZ,CAAmBC,MAAM,CAACC,SAA1B,CADT,CAEE,QAAQ,CAAE,KAAKJ,KAAL,CAAWK,QAFvB,CAGE,eAAe,CAAE,KAAKL,KAAL,CAAWM,eAH9B,iDAIG,KAAKN,KAAL,CAAWC,QAJd,CADF,CAQD,C,0JAhB8BX,KAAK,CAACiB,S,EAmBvC,GAAMJ,CAAAA,MAAM,CAAGZ,UAAU,CAACiB,MAAX,CAAkB,CAC/BJ,SAAS,CAAE,CACTK,QAAQ,CAAE,UADD,CADoB,CAAlB,CAAf,CAMAC,MAAM,CAACC,OAAP,CAAiBhB,kBAAjB,C,gLAhGMD,qB,8JAuEAC,kB,2JAmBAQ,M","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst ColorPropType = require('ColorPropType');\nconst React = require('React');\nconst StyleSheet = require('StyleSheet');\nconst ViewPropTypes = require('ViewPropTypes');\n\nconst requireNativeComponent = require('requireNativeComponent');\n\nconst RCTInputAccessoryView = requireNativeComponent('RCTInputAccessoryView');\n\n/**\n * Note: iOS only\n *\n * A component which enables customization of the keyboard input accessory view.\n * The input accessory view is displayed above the keyboard whenever a TextInput\n * has focus. This component can be used to create custom toolbars.\n *\n * To use this component wrap your custom toolbar with the\n * InputAccessoryView component, and set a nativeID. Then, pass that nativeID\n * as the inputAccessoryViewID of whatever TextInput you desire. A simple\n * example:\n *\n * ```ReactNativeWebPlayer\n * import React, { Component } from 'react';\n * import { AppRegistry, TextInput, InputAccessoryView, Button } from 'react-native';\n *\n * export default class UselessTextInput extends Component {\n *   constructor(props) {\n *     super(props);\n *     this.state = {text: 'Placeholder Text'};\n *   }\n *\n *   render() {\n *     const inputAccessoryViewID = \"uniqueID\";\n *     return (\n *       <View>\n *         <ScrollView keyboardDismissMode=\"interactive\">\n *           <TextInput\n *             style={{\n *               padding: 10,\n *               paddingTop: 50,\n *             }}\n *             inputAccessoryViewID=inputAccessoryViewID\n *             onChangeText={text => this.setState({text})}\n *             value={this.state.text}\n *           />\n *         </ScrollView>\n *         <InputAccessoryView nativeID=inputAccessoryViewID>\n *           <Button\n *             onPress={() => this.setState({text: 'Placeholder Text'})}\n *             title=\"Reset Text\"\n *           />\n *         </InputAccessoryView>\n *       </View>\n *     );\n *   }\n * }\n *\n * // skip this line if using Create React Native App\n * AppRegistry.registerComponent('AwesomeProject', () => UselessTextInput);\n * ```\n *\n * This component can also be used to create sticky text inputs (text inputs\n * which are anchored to the top of the keyboard). To do this, wrap a\n * TextInput with the InputAccessoryView component, and don't set a nativeID.\n * For an example, look at InputAccessoryViewExample.js in RNTester.\n */\n\ntype Props = {\n  +children: React.Node,\n  /**\n   * An ID which is used to associate this `InputAccessoryView` to\n   * specified TextInput(s).\n   */\n  nativeID?: string,\n  style?: ViewPropTypes.style,\n  backgroundColor?: ColorPropType,\n};\n\nclass InputAccessoryView extends React.Component<Props> {\n  render(): React.Node {\n    console.warn('<InputAccessoryView> is not supported on Android yet.');\n\n    if (React.Children.count(this.props.children) === 0) {\n      return null;\n    }\n\n    return (\n      <RCTInputAccessoryView\n        style={[this.props.style, styles.container]}\n        nativeID={this.props.nativeID}\n        backgroundColor={this.props.backgroundColor}>\n        {this.props.children}\n      </RCTInputAccessoryView>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n  },\n});\n\nmodule.exports = InputAccessoryView;\n"]}]}