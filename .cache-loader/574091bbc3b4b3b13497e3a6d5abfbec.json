{"remainingRequest":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js??ref--5-2!/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Interaction/FrameRateLogger.js","dependencies":[{"path":"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Interaction/FrameRateLogger.js","mtime":1539700108130},{"path":"/Users/jeffrey/HaulTesting/node_modules/cache-loader/dist/cjs.js","mtime":1539652983212},{"path":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js","mtime":1539652983315},{"path":"/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js","mtime":1539615827828}],"contextDependencies":[],"result":["'use strict';(function(){var enterModule=require('react-hot-loader').enterModule;enterModule&&enterModule(module);})();var NativeModules=require('NativeModules');var invariant=require('fbjs/lib/invariant');var FrameRateLogger={setGlobalOptions:function setGlobalOptions(options){if(options.debug!==undefined){invariant(NativeModules.FrameRateLogger,'Trying to debug FrameRateLogger without the native module!');}if(NativeModules.FrameRateLogger){var optionsClone={debug:!!options.debug,reportStackTraces:!!options.reportStackTraces};Object.freeze(optionsClone);Object.seal(optionsClone);NativeModules.FrameRateLogger.setGlobalOptions(optionsClone);}},setContext:function setContext(context){NativeModules.FrameRateLogger&&NativeModules.FrameRateLogger.setContext(context);},beginScroll:function beginScroll(){NativeModules.FrameRateLogger&&NativeModules.FrameRateLogger.beginScroll();},endScroll:function endScroll(){NativeModules.FrameRateLogger&&NativeModules.FrameRateLogger.endScroll();}};module.exports=FrameRateLogger;;(function(){var reactHotLoader=require('react-hot-loader').default;var leaveModule=require('react-hot-loader').leaveModule;if(!reactHotLoader){return;}reactHotLoader.register(FrameRateLogger,\"FrameRateLogger\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Interaction/FrameRateLogger.js\");leaveModule(module);})();;",{"version":3,"sources":["/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Interaction/FrameRateLogger.js"],"names":["NativeModules","require","invariant","FrameRateLogger","setGlobalOptions","options","debug","undefined","optionsClone","reportStackTraces","Object","freeze","seal","setContext","context","beginScroll","endScroll","module","exports"],"mappings":"AAUA,a,0GAEA,GAAMA,CAAAA,aAAa,CAAGC,OAAO,CAAC,eAAD,CAA7B,CAEA,GAAMC,CAAAA,SAAS,CAAGD,OAAO,CAAC,oBAAD,CAAzB,CAkBA,GAAME,CAAAA,eAAe,CAAG,CAKtBC,gBAAgB,CAAE,0BAASC,OAAT,CAGf,CACD,GAAIA,OAAO,CAACC,KAAR,GAAkBC,SAAtB,CAAiC,CAC/BL,SAAS,CACPF,aAAa,CAACG,eADP,CAEP,4DAFO,CAAT,CAID,CACD,GAAIH,aAAa,CAACG,eAAlB,CAAmC,CAIjC,GAAMK,CAAAA,YAAY,CAAG,CACnBF,KAAK,CAAE,CAAC,CAACD,OAAO,CAACC,KADE,CAEnBG,iBAAiB,CAAE,CAAC,CAACJ,OAAO,CAACI,iBAFV,CAArB,CAIAC,MAAM,CAACC,MAAP,CAAcH,YAAd,EACAE,MAAM,CAACE,IAAP,CAAYJ,YAAZ,EACAR,aAAa,CAACG,eAAd,CAA8BC,gBAA9B,CAA+CI,YAA/C,EACD,CACF,CA3BqB,CAiCtBK,UAAU,CAAE,oBAASC,OAAT,CAA0B,CACpCd,aAAa,CAACG,eAAd,EACEH,aAAa,CAACG,eAAd,CAA8BU,UAA9B,CAAyCC,OAAzC,CADF,CAED,CApCqB,CA0CtBC,WA1CsB,uBA0CR,CACZf,aAAa,CAACG,eAAd,EACEH,aAAa,CAACG,eAAd,CAA8BY,WAA9B,EADF,CAED,CA7CqB,CAmDtBC,SAnDsB,qBAmDV,CACVhB,aAAa,CAACG,eAAd,EAAiCH,aAAa,CAACG,eAAd,CAA8Ba,SAA9B,EAAjC,CACD,CArDqB,CAAxB,CAwDAC,MAAM,CAACC,OAAP,CAAiBf,eAAjB,C,gLAxDMA,e","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n'use strict';\n\nconst NativeModules = require('NativeModules');\n\nconst invariant = require('fbjs/lib/invariant');\n\n/**\n * Flow API for native FrameRateLogger module. If the native module is not installed, function calls\n * are just no-ops.\n *\n * Typical behavior is that `setContext` is called when a new screen is loaded (e.g. via a\n * navigation integration), and then `beginScroll` is called by `ScrollResponder` at which point the\n * native module then begins tracking frame drops. When `ScrollResponder` calls `endScroll`, the\n * native module gathers up all it's frame drop data and reports it via an analytics pipeline for\n * analysis.\n *\n * Note that `beginScroll` may be called multiple times by `ScrollResponder` - unclear if that's a\n * bug, but the native module should be robust to that.\n *\n * In the future we may add support for tracking frame drops in other types of interactions beyond\n * scrolling.\n */\nconst FrameRateLogger = {\n  /**\n   * Enable `debug` to see local logs of what's going on. `reportStackTraces` will grab stack traces\n   * during UI thread stalls and upload them if the native module supports it.\n   */\n  setGlobalOptions: function(options: {\n    debug?: boolean,\n    reportStackTraces?: boolean,\n  }) {\n    if (options.debug !== undefined) {\n      invariant(\n        NativeModules.FrameRateLogger,\n        'Trying to debug FrameRateLogger without the native module!',\n      );\n    }\n    if (NativeModules.FrameRateLogger) {\n      // Freeze the object to avoid the prepack warning (PP0017) about leaking\n      // unfrozen objects.\n      // Needs to clone the object first to avoid modifying the argument.\n      const optionsClone = {\n        debug: !!options.debug,\n        reportStackTraces: !!options.reportStackTraces,\n      };\n      Object.freeze(optionsClone);\n      Object.seal(optionsClone);\n      NativeModules.FrameRateLogger.setGlobalOptions(optionsClone);\n    }\n  },\n\n  /**\n   * Must call `setContext` before any events can be properly tracked, which is done automatically\n   * in `AppRegistry`, but navigation is also a common place to hook in.\n   */\n  setContext: function(context: string) {\n    NativeModules.FrameRateLogger &&\n      NativeModules.FrameRateLogger.setContext(context);\n  },\n\n  /**\n   * Called in `ScrollResponder` so any component that uses that module will handle this\n   * automatically.\n   */\n  beginScroll() {\n    NativeModules.FrameRateLogger &&\n      NativeModules.FrameRateLogger.beginScroll();\n  },\n\n  /**\n   * Called in `ScrollResponder` so any component that uses that module will handle this\n   * automatically.\n   */\n  endScroll() {\n    NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.endScroll();\n  },\n};\n\nmodule.exports = FrameRateLogger;\n"]}]}