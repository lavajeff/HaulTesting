{"remainingRequest":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js??ref--5-2!/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/Subscribable.js","dependencies":[{"path":"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/Subscribable.js","mtime":1539700108130},{"path":"/Users/jeffrey/HaulTesting/node_modules/cache-loader/dist/cjs.js","mtime":1539652983212},{"path":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js","mtime":1539652983315},{"path":"/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js","mtime":1539615827828}],"contextDependencies":[],"result":["'use strict';(function(){var enterModule=require('react-hot-loader').enterModule;enterModule&&enterModule(module);})();var Subscribable={};Subscribable.Mixin={UNSAFE_componentWillMount:function UNSAFE_componentWillMount(){this._subscribableSubscriptions=[];},componentWillUnmount:function componentWillUnmount(){this._subscribableSubscriptions&&this._subscribableSubscriptions.forEach(function(subscription){return subscription.remove();});this._subscribableSubscriptions=null;},addListenerOn:function addListenerOn(eventEmitter,eventType,listener,context){this._subscribableSubscriptions.push(eventEmitter.addListener(eventType,listener,context));}};module.exports=Subscribable;;(function(){var reactHotLoader=require('react-hot-loader').default;var leaveModule=require('react-hot-loader').leaveModule;if(!reactHotLoader){return;}reactHotLoader.register(Subscribable,\"Subscribable\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/Subscribable.js\");leaveModule(module);})();;",{"version":3,"sources":["/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/Subscribable.js"],"names":["Subscribable","Mixin","UNSAFE_componentWillMount","_subscribableSubscriptions","componentWillUnmount","forEach","subscription","remove","addListenerOn","eventEmitter","eventType","listener","context","push","addListener","module","exports"],"mappings":"AAUA,a,0GAYA,GAAMA,CAAAA,YAAY,CAAG,EAArB,CAEAA,YAAY,CAACC,KAAb,CAAqB,CACnBC,yBAAyB,CAAE,oCAAW,CACpC,KAAKC,0BAAL,CAAkC,EAAlC,CACD,CAHkB,CAKnBC,oBAAoB,CAAE,+BAAW,CAG/B,KAAKD,0BAAL,EACE,KAAKA,0BAAL,CAAgCE,OAAhC,CAAwC,SAAAC,YAAY,QAClDA,CAAAA,YAAY,CAACC,MAAb,EADkD,EAApD,CADF,CAIA,KAAKJ,0BAAL,CAAkC,IAAlC,CACD,CAbkB,CA4BnBK,aAAa,CAAE,uBACbC,YADa,CAEbC,SAFa,CAGbC,QAHa,CAIbC,OAJa,CAKb,CACA,KAAKT,0BAAL,CAAgCU,IAAhC,CACEJ,YAAY,CAACK,WAAb,CAAyBJ,SAAzB,CAAoCC,QAApC,CAA8CC,OAA9C,CADF,EAGD,CArCkB,CAArB,CAwCAG,MAAM,CAACC,OAAP,CAAiBhB,YAAjB,C,gLA1CMA,Y","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nimport type EventEmitter from 'EventEmitter';\n\n/**\n * Subscribable provides a mixin for safely subscribing a component to an\n * eventEmitter\n *\n * This will be replaced with the observe interface that will be coming soon to\n * React Core\n */\n\nconst Subscribable = {};\n\nSubscribable.Mixin = {\n  UNSAFE_componentWillMount: function() {\n    this._subscribableSubscriptions = [];\n  },\n\n  componentWillUnmount: function() {\n    // This null check is a fix for a broken version of uglify-es. Should be deleted eventually\n    // https://github.com/facebook/react-native/issues/17348\n    this._subscribableSubscriptions &&\n      this._subscribableSubscriptions.forEach(subscription =>\n        subscription.remove(),\n      );\n    this._subscribableSubscriptions = null;\n  },\n\n  /**\n   * Special form of calling `addListener` that *guarantees* that a\n   * subscription *must* be tied to a component instance, and therefore will\n   * be cleaned up when the component is unmounted. It is impossible to create\n   * the subscription and pass it in - this method must be the one to create\n   * the subscription and therefore can guarantee it is retained in a way that\n   * will be cleaned up.\n   *\n   * @param {EventEmitter} eventEmitter emitter to subscribe to.\n   * @param {string} eventType Type of event to listen to.\n   * @param {function} listener Function to invoke when event occurs.\n   * @param {object} context Object to use as listener context.\n   */\n  addListenerOn: function(\n    eventEmitter: EventEmitter,\n    eventType: string,\n    listener: Function,\n    context: Object,\n  ) {\n    this._subscribableSubscriptions.push(\n      eventEmitter.addListener(eventType, listener, context),\n    );\n  },\n};\n\nmodule.exports = Subscribable;\n"]}]}