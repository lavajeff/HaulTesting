{"remainingRequest":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js??ref--5-2!/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Network/convertRequestBody.js","dependencies":[{"path":"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Network/convertRequestBody.js","mtime":1539700108130},{"path":"/Users/jeffrey/HaulTesting/node_modules/cache-loader/dist/cjs.js","mtime":1539652983212},{"path":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js","mtime":1539652983315},{"path":"/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js","mtime":1539615827828}],"contextDependencies":[],"result":["'use strict';(function(){var enterModule=require('react-hot-loader').enterModule;enterModule&&enterModule(module);})();var binaryToBase64=require('binaryToBase64');var Blob=require('Blob');var FormData=require('FormData');function convertRequestBody(body){if(typeof body==='string'){return{string:body};}if(body instanceof Blob){return{blob:body.data};}if(body instanceof FormData){return{formData:body.getParts()};}if(body instanceof ArrayBuffer||ArrayBuffer.isView(body)){return{base64:binaryToBase64(body)};}return body;}module.exports=convertRequestBody;;(function(){var reactHotLoader=require('react-hot-loader').default;var leaveModule=require('react-hot-loader').leaveModule;if(!reactHotLoader){return;}reactHotLoader.register(convertRequestBody,\"convertRequestBody\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Network/convertRequestBody.js\");leaveModule(module);})();;",{"version":3,"sources":["/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Network/convertRequestBody.js"],"names":["binaryToBase64","require","Blob","FormData","convertRequestBody","body","string","blob","data","formData","getParts","ArrayBuffer","isView","base64","module","exports"],"mappings":"AASA,a,0GAEA,GAAMA,CAAAA,cAAc,CAAGC,OAAO,CAAC,gBAAD,CAA9B,CAEA,GAAMC,CAAAA,IAAI,CAAGD,OAAO,CAAC,MAAD,CAApB,CACA,GAAME,CAAAA,QAAQ,CAAGF,OAAO,CAAC,UAAD,CAAxB,CAUA,QAASG,CAAAA,kBAAT,CAA4BC,IAA5B,CAAuD,CACrD,GAAI,MAAOA,CAAAA,IAAP,GAAgB,QAApB,CAA8B,CAC5B,MAAO,CAACC,MAAM,CAAED,IAAT,CAAP,CACD,CACD,GAAIA,IAAI,WAAYH,CAAAA,IAApB,CAA0B,CACxB,MAAO,CAACK,IAAI,CAAEF,IAAI,CAACG,IAAZ,CAAP,CACD,CACD,GAAIH,IAAI,WAAYF,CAAAA,QAApB,CAA8B,CAC5B,MAAO,CAACM,QAAQ,CAAEJ,IAAI,CAACK,QAAL,EAAX,CAAP,CACD,CACD,GAAIL,IAAI,WAAYM,CAAAA,WAAhB,EAA+BA,WAAW,CAACC,MAAZ,CAAmBP,IAAnB,CAAnC,CAA6D,CAE3D,MAAO,CAACQ,MAAM,CAAEb,cAAc,CAACK,IAAD,CAAvB,CAAP,CACD,CACD,MAAOA,CAAAA,IAAP,CACD,CAEDS,MAAM,CAACC,OAAP,CAAiBX,kBAAjB,C,gLAjBSA,kB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst binaryToBase64 = require('binaryToBase64');\n\nconst Blob = require('Blob');\nconst FormData = require('FormData');\n\nexport type RequestBody =\n  | string\n  | Blob\n  | FormData\n  | {uri: string}\n  | ArrayBuffer\n  | $ArrayBufferView;\n\nfunction convertRequestBody(body: RequestBody): Object {\n  if (typeof body === 'string') {\n    return {string: body};\n  }\n  if (body instanceof Blob) {\n    return {blob: body.data};\n  }\n  if (body instanceof FormData) {\n    return {formData: body.getParts()};\n  }\n  if (body instanceof ArrayBuffer || ArrayBuffer.isView(body)) {\n    // $FlowFixMe: no way to assert that 'body' is indeed an ArrayBufferView\n    return {base64: binaryToBase64(body)};\n  }\n  return body;\n}\n\nmodule.exports = convertRequestBody;\n"]}]}