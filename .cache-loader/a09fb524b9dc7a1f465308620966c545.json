{"remainingRequest":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js??ref--5-2!/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/vendor/emitter/EventEmitter.js","dependencies":[{"path":"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/vendor/emitter/EventEmitter.js","mtime":1539700108130},{"path":"/Users/jeffrey/HaulTesting/node_modules/cache-loader/dist/cjs.js","mtime":1539652983212},{"path":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js","mtime":1539652983315},{"path":"/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js","mtime":1539615827828}],"contextDependencies":[],"result":["'use strict';var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));(function(){var enterModule=require('react-hot-loader').enterModule;enterModule&&enterModule(module);})();var EmitterSubscription=require('EmitterSubscription');var EventSubscriptionVendor=require('EventSubscriptionVendor');var emptyFunction=require('fbjs/lib/emptyFunction');var invariant=require('fbjs/lib/invariant');var EventEmitter=function(){function EventEmitter(subscriber){(0,_classCallCheck2.default)(this,EventEmitter);this._subscriber=subscriber||new EventSubscriptionVendor();}(0,_createClass2.default)(EventEmitter,[{key:\"addListener\",value:function addListener(eventType,listener,context){return this._subscriber.addSubscription(eventType,new EmitterSubscription(this,this._subscriber,listener,context));}},{key:\"once\",value:function once(eventType,listener,context){var _this=this;return this.addListener(eventType,function(){_this.removeCurrentListener();for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}listener.apply(context,args);});}},{key:\"removeAllListeners\",value:function removeAllListeners(eventType){this._subscriber.removeAllSubscriptions(eventType);}},{key:\"removeCurrentListener\",value:function removeCurrentListener(){invariant(!!this._currentSubscription,'Not in an emitting cycle; there is no current subscription');this.removeSubscription(this._currentSubscription);}},{key:\"removeSubscription\",value:function removeSubscription(subscription){invariant(subscription.emitter===this,'Subscription does not belong to this emitter.');this._subscriber.removeSubscription(subscription);}},{key:\"listeners\",value:function listeners(eventType){var subscriptions=this._subscriber.getSubscriptionsForType(eventType);return subscriptions?subscriptions.filter(emptyFunction.thatReturnsTrue).map(function(subscription){return subscription.listener;}):[];}},{key:\"emit\",value:function emit(eventType){var subscriptions=this._subscriber.getSubscriptionsForType(eventType);if(subscriptions){for(var i=0,l=subscriptions.length;i<l;i++){var subscription=subscriptions[i];if(subscription){this._currentSubscription=subscription;subscription.listener.apply(subscription.context,Array.prototype.slice.call(arguments,1));}}this._currentSubscription=null;}}},{key:\"removeListener\",value:function removeListener(eventType,listener){var subscriptions=this._subscriber.getSubscriptionsForType(eventType);if(subscriptions){for(var i=0,l=subscriptions.length;i<l;i++){var subscription=subscriptions[i];if(subscription&&subscription.listener===listener){subscription.remove();}}}}},{key:\"__reactstandin__regenerateByEval\",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code);}}]);return EventEmitter;}();module.exports=EventEmitter;;(function(){var reactHotLoader=require('react-hot-loader').default;var leaveModule=require('react-hot-loader').leaveModule;if(!reactHotLoader){return;}reactHotLoader.register(EventEmitter,\"EventEmitter\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/vendor/emitter/EventEmitter.js\");leaveModule(module);})();;",{"version":3,"sources":["/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/vendor/emitter/EventEmitter.js"],"names":["EmitterSubscription","require","EventSubscriptionVendor","emptyFunction","invariant","EventEmitter","subscriber","_subscriber","eventType","listener","context","addSubscription","addListener","removeCurrentListener","args","apply","removeAllSubscriptions","_currentSubscription","removeSubscription","subscription","emitter","subscriptions","getSubscriptionsForType","filter","thatReturnsTrue","map","i","l","length","Array","prototype","slice","call","arguments","remove","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @noflow\n * @typecheck\n */\n\n'use strict';\n\nconst EmitterSubscription = require('EmitterSubscription');\nconst EventSubscriptionVendor = require('EventSubscriptionVendor');\n\nconst emptyFunction = require('fbjs/lib/emptyFunction');\nconst invariant = require('fbjs/lib/invariant');\n\n/**\n * @class EventEmitter\n * @description\n * An EventEmitter is responsible for managing a set of listeners and publishing\n * events to them when it is told that such events happened. In addition to the\n * data for the given event it also sends a event control object which allows\n * the listeners/handlers to prevent the default behavior of the given event.\n *\n * The emitter is designed to be generic enough to support all the different\n * contexts in which one might want to emit events. It is a simple multicast\n * mechanism on top of which extra functionality can be composed. For example, a\n * more advanced emitter may use an EventHolder and EventFactory.\n */\nclass EventEmitter {\n  _subscriber: EventSubscriptionVendor;\n  _currentSubscription: ?EmitterSubscription;\n\n  /**\n   * @constructor\n   *\n   * @param {EventSubscriptionVendor} subscriber - Optional subscriber instance\n   *   to use. If omitted, a new subscriber will be created for the emitter.\n   */\n  constructor(subscriber: ?EventSubscriptionVendor) {\n    this._subscriber = subscriber || new EventSubscriptionVendor();\n  }\n\n  /**\n   * Adds a listener to be invoked when events of the specified type are\n   * emitted. An optional calling context may be provided. The data arguments\n   * emitted will be passed to the listener function.\n   *\n   * TODO: Annotate the listener arg's type. This is tricky because listeners\n   *       can be invoked with varargs.\n   *\n   * @param {string} eventType - Name of the event to listen to\n   * @param {function} listener - Function to invoke when the specified event is\n   *   emitted\n   * @param {*} context - Optional context object to use when invoking the\n   *   listener\n   */\n  addListener(\n    eventType: string,\n    listener: Function,\n    context: ?Object,\n  ): EmitterSubscription {\n    return (this._subscriber.addSubscription(\n      eventType,\n      new EmitterSubscription(this, this._subscriber, listener, context),\n    ): any);\n  }\n\n  /**\n   * Similar to addListener, except that the listener is removed after it is\n   * invoked once.\n   *\n   * @param {string} eventType - Name of the event to listen to\n   * @param {function} listener - Function to invoke only once when the\n   *   specified event is emitted\n   * @param {*} context - Optional context object to use when invoking the\n   *   listener\n   */\n  once(\n    eventType: string,\n    listener: Function,\n    context: ?Object,\n  ): EmitterSubscription {\n    return this.addListener(eventType, (...args) => {\n      this.removeCurrentListener();\n      listener.apply(context, args);\n    });\n  }\n\n  /**\n   * Removes all of the registered listeners, including those registered as\n   * listener maps.\n   *\n   * @param {?string} eventType - Optional name of the event whose registered\n   *   listeners to remove\n   */\n  removeAllListeners(eventType: ?string) {\n    this._subscriber.removeAllSubscriptions(eventType);\n  }\n\n  /**\n   * Provides an API that can be called during an eventing cycle to remove the\n   * last listener that was invoked. This allows a developer to provide an event\n   * object that can remove the listener (or listener map) during the\n   * invocation.\n   *\n   * If it is called when not inside of an emitting cycle it will throw.\n   *\n   * @throws {Error} When called not during an eventing cycle\n   *\n   * @example\n   *   var subscription = emitter.addListenerMap({\n   *     someEvent: function(data, event) {\n   *       console.log(data);\n   *       emitter.removeCurrentListener();\n   *     }\n   *   });\n   *\n   *   emitter.emit('someEvent', 'abc'); // logs 'abc'\n   *   emitter.emit('someEvent', 'def'); // does not log anything\n   */\n  removeCurrentListener() {\n    invariant(\n      !!this._currentSubscription,\n      'Not in an emitting cycle; there is no current subscription',\n    );\n    this.removeSubscription(this._currentSubscription);\n  }\n\n  /**\n   * Removes a specific subscription. Called by the `remove()` method of the\n   * subscription itself to ensure any necessary cleanup is performed.\n   */\n  removeSubscription(subscription: EmitterSubscription) {\n    invariant(\n      subscription.emitter === this,\n      'Subscription does not belong to this emitter.',\n    );\n    this._subscriber.removeSubscription(subscription);\n  }\n\n  /**\n   * Returns an array of listeners that are currently registered for the given\n   * event.\n   *\n   * @param {string} eventType - Name of the event to query\n   * @returns {array}\n   */\n  listeners(eventType: string): [EmitterSubscription] {\n    const subscriptions: ?[\n      EmitterSubscription,\n    ] = (this._subscriber.getSubscriptionsForType(eventType): any);\n    return subscriptions\n      ? subscriptions\n          .filter(emptyFunction.thatReturnsTrue)\n          .map(function(subscription) {\n            return subscription.listener;\n          })\n      : [];\n  }\n\n  /**\n   * Emits an event of the given type with the given data. All handlers of that\n   * particular type will be notified.\n   *\n   * @param {string} eventType - Name of the event to emit\n   * @param {...*} Arbitrary arguments to be passed to each registered listener\n   *\n   * @example\n   *   emitter.addListener('someEvent', function(message) {\n   *     console.log(message);\n   *   });\n   *\n   *   emitter.emit('someEvent', 'abc'); // logs 'abc'\n   */\n  emit(eventType: string) {\n    const subscriptions: ?[\n      EmitterSubscription,\n    ] = (this._subscriber.getSubscriptionsForType(eventType): any);\n    if (subscriptions) {\n      for (let i = 0, l = subscriptions.length; i < l; i++) {\n        const subscription = subscriptions[i];\n\n        // The subscription may have been removed during this event loop.\n        if (subscription) {\n          this._currentSubscription = subscription;\n          subscription.listener.apply(\n            subscription.context,\n            Array.prototype.slice.call(arguments, 1),\n          );\n        }\n      }\n      this._currentSubscription = null;\n    }\n  }\n\n  /**\n   * Removes the given listener for event of specific type.\n   *\n   * @param {string} eventType - Name of the event to emit\n   * @param {function} listener - Function to invoke when the specified event is\n   *   emitted\n   *\n   * @example\n   *   emitter.removeListener('someEvent', function(message) {\n   *     console.log(message);\n   *   }); // removes the listener if already registered\n   *\n   */\n  removeListener(eventType: String, listener) {\n    const subscriptions: ?[\n      EmitterSubscription,\n    ] = (this._subscriber.getSubscriptionsForType(eventType): any);\n    if (subscriptions) {\n      for (let i = 0, l = subscriptions.length; i < l; i++) {\n        const subscription = subscriptions[i];\n\n        // The subscription may have been removed during this event loop.\n        // its listener matches the listener in method parameters\n        if (subscription && subscription.listener === listener) {\n          subscription.remove();\n        }\n      }\n    }\n  }\n}\n\nmodule.exports = EventEmitter;\n"]}]}