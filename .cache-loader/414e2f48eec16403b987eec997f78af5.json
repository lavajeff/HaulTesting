{"remainingRequest":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js??ref--5-2!/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Interaction/TouchHistoryMath.js","dependencies":[{"path":"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Interaction/TouchHistoryMath.js","mtime":1539700108130},{"path":"/Users/jeffrey/HaulTesting/node_modules/cache-loader/dist/cjs.js","mtime":1539652983212},{"path":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js","mtime":1539652983315},{"path":"/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js","mtime":1539615827828}],"contextDependencies":[],"result":["(function(){var enterModule=require('react-hot-loader').enterModule;enterModule&&enterModule(module);})();var TouchHistoryMath={centroidDimension:function centroidDimension(touchHistory,touchesChangedAfter,isXAxis,ofCurrent){var touchBank=touchHistory.touchBank;var total=0;var count=0;var oneTouchData=touchHistory.numberActiveTouches===1?touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch]:null;if(oneTouchData!==null){if(oneTouchData.touchActive&&oneTouchData.currentTimeStamp>touchesChangedAfter){total+=ofCurrent&&isXAxis?oneTouchData.currentPageX:ofCurrent&&!isXAxis?oneTouchData.currentPageY:!ofCurrent&&isXAxis?oneTouchData.previousPageX:oneTouchData.previousPageY;count=1;}}else{for(var i=0;i<touchBank.length;i++){var touchTrack=touchBank[i];if(touchTrack!==null&&touchTrack!==undefined&&touchTrack.touchActive&&touchTrack.currentTimeStamp>=touchesChangedAfter){var toAdd=void 0;if(ofCurrent&&isXAxis){toAdd=touchTrack.currentPageX;}else if(ofCurrent&&!isXAxis){toAdd=touchTrack.currentPageY;}else if(!ofCurrent&&isXAxis){toAdd=touchTrack.previousPageX;}else{toAdd=touchTrack.previousPageY;}total+=toAdd;count++;}}}return count>0?total/count:TouchHistoryMath.noCentroid;},currentCentroidXOfTouchesChangedAfter:function currentCentroidXOfTouchesChangedAfter(touchHistory,touchesChangedAfter){return TouchHistoryMath.centroidDimension(touchHistory,touchesChangedAfter,true,true);},currentCentroidYOfTouchesChangedAfter:function currentCentroidYOfTouchesChangedAfter(touchHistory,touchesChangedAfter){return TouchHistoryMath.centroidDimension(touchHistory,touchesChangedAfter,false,true);},previousCentroidXOfTouchesChangedAfter:function previousCentroidXOfTouchesChangedAfter(touchHistory,touchesChangedAfter){return TouchHistoryMath.centroidDimension(touchHistory,touchesChangedAfter,true,false);},previousCentroidYOfTouchesChangedAfter:function previousCentroidYOfTouchesChangedAfter(touchHistory,touchesChangedAfter){return TouchHistoryMath.centroidDimension(touchHistory,touchesChangedAfter,false,false);},currentCentroidX:function currentCentroidX(touchHistory){return TouchHistoryMath.centroidDimension(touchHistory,0,true,true);},currentCentroidY:function currentCentroidY(touchHistory){return TouchHistoryMath.centroidDimension(touchHistory,0,false,true);},noCentroid:-1};module.exports=TouchHistoryMath;;(function(){var reactHotLoader=require('react-hot-loader').default;var leaveModule=require('react-hot-loader').leaveModule;if(!reactHotLoader){return;}reactHotLoader.register(TouchHistoryMath,\"TouchHistoryMath\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Interaction/TouchHistoryMath.js\");leaveModule(module);})();;",{"version":3,"sources":["/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Interaction/TouchHistoryMath.js"],"names":["TouchHistoryMath","centroidDimension","touchHistory","touchesChangedAfter","isXAxis","ofCurrent","touchBank","total","count","oneTouchData","numberActiveTouches","indexOfSingleActiveTouch","touchActive","currentTimeStamp","currentPageX","currentPageY","previousPageX","previousPageY","i","length","touchTrack","undefined","toAdd","noCentroid","currentCentroidXOfTouchesChangedAfter","currentCentroidYOfTouchesChangedAfter","previousCentroidXOfTouchesChangedAfter","previousCentroidYOfTouchesChangedAfter","currentCentroidX","currentCentroidY","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2016-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nconst TouchHistoryMath = {\n  /**\n   * This code is optimized and not intended to look beautiful. This allows\n   * computing of touch centroids that have moved after `touchesChangedAfter`\n   * timeStamp. You can compute the current centroid involving all touches\n   * moves after `touchesChangedAfter`, or you can compute the previous\n   * centroid of all touches that were moved after `touchesChangedAfter`.\n   *\n   * @param {TouchHistoryMath} touchHistory Standard Responder touch track\n   * data.\n   * @param {number} touchesChangedAfter timeStamp after which moved touches\n   * are considered \"actively moving\" - not just \"active\".\n   * @param {boolean} isXAxis Consider `x` dimension vs. `y` dimension.\n   * @param {boolean} ofCurrent Compute current centroid for actively moving\n   * touches vs. previous centroid of now actively moving touches.\n   * @return {number} value of centroid in specified dimension.\n   */\n  centroidDimension: function(\n    touchHistory,\n    touchesChangedAfter,\n    isXAxis,\n    ofCurrent,\n  ) {\n    const touchBank = touchHistory.touchBank;\n    let total = 0;\n    let count = 0;\n\n    const oneTouchData =\n      touchHistory.numberActiveTouches === 1\n        ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch]\n        : null;\n\n    if (oneTouchData !== null) {\n      if (\n        oneTouchData.touchActive &&\n        oneTouchData.currentTimeStamp > touchesChangedAfter\n      ) {\n        total +=\n          ofCurrent && isXAxis\n            ? oneTouchData.currentPageX\n            : ofCurrent && !isXAxis\n              ? oneTouchData.currentPageY\n              : !ofCurrent && isXAxis\n                ? oneTouchData.previousPageX\n                : oneTouchData.previousPageY;\n        count = 1;\n      }\n    } else {\n      for (let i = 0; i < touchBank.length; i++) {\n        const touchTrack = touchBank[i];\n        if (\n          touchTrack !== null &&\n          touchTrack !== undefined &&\n          touchTrack.touchActive &&\n          touchTrack.currentTimeStamp >= touchesChangedAfter\n        ) {\n          let toAdd; // Yuck, program temporarily in invalid state.\n          if (ofCurrent && isXAxis) {\n            toAdd = touchTrack.currentPageX;\n          } else if (ofCurrent && !isXAxis) {\n            toAdd = touchTrack.currentPageY;\n          } else if (!ofCurrent && isXAxis) {\n            toAdd = touchTrack.previousPageX;\n          } else {\n            toAdd = touchTrack.previousPageY;\n          }\n          total += toAdd;\n          count++;\n        }\n      }\n    }\n    return count > 0 ? total / count : TouchHistoryMath.noCentroid;\n  },\n\n  currentCentroidXOfTouchesChangedAfter: function(\n    touchHistory,\n    touchesChangedAfter,\n  ) {\n    return TouchHistoryMath.centroidDimension(\n      touchHistory,\n      touchesChangedAfter,\n      true, // isXAxis\n      true, // ofCurrent\n    );\n  },\n\n  currentCentroidYOfTouchesChangedAfter: function(\n    touchHistory,\n    touchesChangedAfter,\n  ) {\n    return TouchHistoryMath.centroidDimension(\n      touchHistory,\n      touchesChangedAfter,\n      false, // isXAxis\n      true, // ofCurrent\n    );\n  },\n\n  previousCentroidXOfTouchesChangedAfter: function(\n    touchHistory,\n    touchesChangedAfter,\n  ) {\n    return TouchHistoryMath.centroidDimension(\n      touchHistory,\n      touchesChangedAfter,\n      true, // isXAxis\n      false, // ofCurrent\n    );\n  },\n\n  previousCentroidYOfTouchesChangedAfter: function(\n    touchHistory,\n    touchesChangedAfter,\n  ) {\n    return TouchHistoryMath.centroidDimension(\n      touchHistory,\n      touchesChangedAfter,\n      false, // isXAxis\n      false, // ofCurrent\n    );\n  },\n\n  currentCentroidX: function(touchHistory) {\n    return TouchHistoryMath.centroidDimension(\n      touchHistory,\n      0, // touchesChangedAfter\n      true, // isXAxis\n      true, // ofCurrent\n    );\n  },\n\n  currentCentroidY: function(touchHistory) {\n    return TouchHistoryMath.centroidDimension(\n      touchHistory,\n      0, // touchesChangedAfter\n      false, // isXAxis\n      true, // ofCurrent\n    );\n  },\n\n  noCentroid: -1,\n};\n\nmodule.exports = TouchHistoryMath;\n"]}]}