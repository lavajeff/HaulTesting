{"remainingRequest":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js??ref--5-2!/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/StatusBar/StatusBar.js","dependencies":[{"path":"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/StatusBar/StatusBar.js","mtime":1539700108130},{"path":"/Users/jeffrey/HaulTesting/node_modules/cache-loader/dist/cjs.js","mtime":1539652983212},{"path":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js","mtime":1539652983315},{"path":"/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js","mtime":1539615827828}],"contextDependencies":[],"result":["'use strict';var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _possibleConstructorReturn2=_interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));var _getPrototypeOf3=_interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));var _inherits2=_interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));(function(){var enterModule=require('react-hot-loader').enterModule;enterModule&&enterModule(module);})();var React=require('React');var PropTypes=require('prop-types');var ColorPropType=require('ColorPropType');var Platform=require('Platform');var processColor=require('processColor');var StatusBarManager=require('NativeModules').StatusBarManager;function mergePropsStack(propsStack,defaultValues){return propsStack.reduce(function(prev,cur){for(var prop in cur){if(cur[prop]!=null){prev[prop]=cur[prop];}}return prev;},(0,_extends2.default)({},defaultValues));}function createStackEntry(props){return{backgroundColor:props.backgroundColor!=null?{value:props.backgroundColor,animated:props.animated}:null,barStyle:props.barStyle!=null?{value:props.barStyle,animated:props.animated}:null,translucent:props.translucent,hidden:props.hidden!=null?{value:props.hidden,animated:props.animated,transition:props.showHideTransition}:null,networkActivityIndicatorVisible:props.networkActivityIndicatorVisible};}var StatusBar=function(_React$Component){(0,_inherits2.default)(StatusBar,_React$Component);function StatusBar(){var _getPrototypeOf2;var _this;(0,_classCallCheck2.default)(this,StatusBar);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=(0,_possibleConstructorReturn2.default)(this,(_getPrototypeOf2=(0,_getPrototypeOf3.default)(StatusBar)).call.apply(_getPrototypeOf2,[this].concat(args)));_this._stackEntry=null;_this._updatePropsStack=function(){clearImmediate(StatusBar._updateImmediate);StatusBar._updateImmediate=setImmediate(function(){var oldProps=StatusBar._currentValues;var mergedProps=mergePropsStack(StatusBar._propsStack,StatusBar._defaultProps);if(Platform.OS==='ios'){if(!oldProps||oldProps.barStyle.value!==mergedProps.barStyle.value){StatusBarManager.setStyle(mergedProps.barStyle.value,mergedProps.barStyle.animated);}if(!oldProps||oldProps.hidden.value!==mergedProps.hidden.value){StatusBarManager.setHidden(mergedProps.hidden.value,mergedProps.hidden.animated?mergedProps.hidden.transition:'none');}if(!oldProps||oldProps.networkActivityIndicatorVisible!==mergedProps.networkActivityIndicatorVisible){StatusBarManager.setNetworkActivityIndicatorVisible(mergedProps.networkActivityIndicatorVisible);}}else if(Platform.OS==='android'){if(!oldProps||oldProps.barStyle.value!==mergedProps.barStyle.value){StatusBarManager.setStyle(mergedProps.barStyle.value);}if(!oldProps||oldProps.backgroundColor.value!==mergedProps.backgroundColor.value){StatusBarManager.setColor(processColor(mergedProps.backgroundColor.value),mergedProps.backgroundColor.animated);}if(!oldProps||oldProps.hidden.value!==mergedProps.hidden.value){StatusBarManager.setHidden(mergedProps.hidden.value);}if(!oldProps||oldProps.translucent!==mergedProps.translucent){StatusBarManager.setTranslucent(mergedProps.translucent);}}StatusBar._currentValues=mergedProps;});};return _this;}(0,_createClass2.default)(StatusBar,[{key:\"componentDidMount\",value:function componentDidMount(){this._stackEntry=createStackEntry(this.props);StatusBar._propsStack.push(this._stackEntry);this._updatePropsStack();}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){var index=StatusBar._propsStack.indexOf(this._stackEntry);StatusBar._propsStack.splice(index,1);this._updatePropsStack();}},{key:\"componentDidUpdate\",value:function componentDidUpdate(){var index=StatusBar._propsStack.indexOf(this._stackEntry);this._stackEntry=createStackEntry(this.props);StatusBar._propsStack[index]=this._stackEntry;this._updatePropsStack();}},{key:\"render\",value:function render(){return null;}},{key:\"__reactstandin__regenerateByEval\",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code);}}],[{key:\"setHidden\",value:function setHidden(hidden,animation){animation=animation||'none';StatusBar._defaultProps.hidden.value=hidden;if(Platform.OS==='ios'){StatusBarManager.setHidden(hidden,animation);}else if(Platform.OS==='android'){StatusBarManager.setHidden(hidden);}}},{key:\"setBarStyle\",value:function setBarStyle(style,animated){animated=animated||false;StatusBar._defaultProps.barStyle.value=style;if(Platform.OS==='ios'){StatusBarManager.setStyle(style,animated);}else if(Platform.OS==='android'){StatusBarManager.setStyle(style);}}},{key:\"setNetworkActivityIndicatorVisible\",value:function setNetworkActivityIndicatorVisible(visible){if(Platform.OS!=='ios'){console.warn('`setNetworkActivityIndicatorVisible` is only available on iOS');return;}StatusBar._defaultProps.networkActivityIndicatorVisible=visible;StatusBarManager.setNetworkActivityIndicatorVisible(visible);}},{key:\"setBackgroundColor\",value:function setBackgroundColor(color,animated){if(Platform.OS!=='android'){console.warn('`setBackgroundColor` is only available on Android');return;}animated=animated||false;StatusBar._defaultProps.backgroundColor.value=color;StatusBarManager.setColor(processColor(color),animated);}},{key:\"setTranslucent\",value:function setTranslucent(translucent){if(Platform.OS!=='android'){console.warn('`setTranslucent` is only available on Android');return;}StatusBar._defaultProps.translucent=translucent;StatusBarManager.setTranslucent(translucent);}}]);return StatusBar;}(React.Component);StatusBar._propsStack=[];StatusBar._defaultProps=createStackEntry({animated:false,showHideTransition:'fade',backgroundColor:'black',barStyle:'default',translucent:false,hidden:false,networkActivityIndicatorVisible:false});StatusBar._updateImmediate=null;StatusBar._currentValues=null;StatusBar.currentHeight=StatusBarManager.HEIGHT;StatusBar.propTypes={hidden:PropTypes.bool,animated:PropTypes.bool,backgroundColor:ColorPropType,translucent:PropTypes.bool,barStyle:PropTypes.oneOf(['default','light-content','dark-content']),networkActivityIndicatorVisible:PropTypes.bool,showHideTransition:PropTypes.oneOf(['fade','slide'])};StatusBar.defaultProps={animated:false,showHideTransition:'fade'};module.exports=StatusBar;;(function(){var reactHotLoader=require('react-hot-loader').default;var leaveModule=require('react-hot-loader').leaveModule;if(!reactHotLoader){return;}reactHotLoader.register(StatusBarManager,\"StatusBarManager\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/StatusBar/StatusBar.js\");reactHotLoader.register(mergePropsStack,\"mergePropsStack\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/StatusBar/StatusBar.js\");reactHotLoader.register(createStackEntry,\"createStackEntry\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/StatusBar/StatusBar.js\");reactHotLoader.register(StatusBar,\"StatusBar\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/StatusBar/StatusBar.js\");leaveModule(module);})();;",{"version":3,"sources":["/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/StatusBar/StatusBar.js"],"names":["React","require","PropTypes","ColorPropType","Platform","processColor","StatusBarManager","mergePropsStack","propsStack","defaultValues","reduce","prev","cur","prop","createStackEntry","props","backgroundColor","value","animated","barStyle","translucent","hidden","transition","showHideTransition","networkActivityIndicatorVisible","StatusBar","_stackEntry","_updatePropsStack","clearImmediate","_updateImmediate","setImmediate","oldProps","_currentValues","mergedProps","_propsStack","_defaultProps","OS","setStyle","setHidden","setNetworkActivityIndicatorVisible","setColor","setTranslucent","push","index","indexOf","splice","animation","style","visible","console","warn","color","Component","currentHeight","HEIGHT","propTypes","bool","oneOf","defaultProps","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst React = require('React');\nconst PropTypes = require('prop-types');\nconst ColorPropType = require('ColorPropType');\nconst Platform = require('Platform');\n\nconst processColor = require('processColor');\n\nconst StatusBarManager = require('NativeModules').StatusBarManager;\n\n/**\n * Status bar style\n */\nexport type StatusBarStyle = $Enum<{\n  /**\n   * Default status bar style (dark for iOS, light for Android)\n   */\n  default: string,\n  /**\n   * Dark background, white texts and icons\n   */\n  'light-content': string,\n  /**\n   * Light background, dark texts and icons\n   */\n  'dark-content': string,\n}>;\n\n/**\n * Status bar animation\n */\nexport type StatusBarAnimation = $Enum<{\n  /**\n   * No animation\n   */\n  none: string,\n  /**\n   * Fade animation\n   */\n  fade: string,\n  /**\n   * Slide animation\n   */\n  slide: string,\n}>;\n\ntype DefaultProps = {\n  animated: boolean,\n};\n\n/**\n * Merges the prop stack with the default values.\n */\nfunction mergePropsStack(\n  propsStack: Array<Object>,\n  defaultValues: Object,\n): Object {\n  return propsStack.reduce((prev, cur) => {\n    for (const prop in cur) {\n      if (cur[prop] != null) {\n        prev[prop] = cur[prop];\n      }\n    }\n    return prev;\n  }, Object.assign({}, defaultValues));\n}\n\n/**\n * Returns an object to insert in the props stack from the props\n * and the transition/animation info.\n */\nfunction createStackEntry(props: any): any {\n  return {\n    backgroundColor:\n      props.backgroundColor != null\n        ? {\n            value: props.backgroundColor,\n            animated: props.animated,\n          }\n        : null,\n    barStyle:\n      props.barStyle != null\n        ? {\n            value: props.barStyle,\n            animated: props.animated,\n          }\n        : null,\n    translucent: props.translucent,\n    hidden:\n      props.hidden != null\n        ? {\n            value: props.hidden,\n            animated: props.animated,\n            transition: props.showHideTransition,\n          }\n        : null,\n    networkActivityIndicatorVisible: props.networkActivityIndicatorVisible,\n  };\n}\n\n/**\n * Component to control the app status bar.\n *\n * ### Usage with Navigator\n *\n * It is possible to have multiple `StatusBar` components mounted at the same\n * time. The props will be merged in the order the `StatusBar` components were\n * mounted. One use case is to specify status bar styles per route using `Navigator`.\n *\n * ```\n *  <View>\n *    <StatusBar\n *      backgroundColor=\"blue\"\n *      barStyle=\"light-content\"\n *    />\n *    <Navigator\n *      initialRoute={{statusBarHidden: true}}\n *      renderScene={(route, navigator) =>\n *        <View>\n *          <StatusBar hidden={route.statusBarHidden} />\n *          ...\n *        </View>\n *      }\n *    />\n *  </View>\n * ```\n *\n * ### Imperative API\n *\n * For cases where using a component is not ideal, there is also an imperative\n * API exposed as static functions on the component. It is however not recommended\n * to use the static API and the component for the same prop because any value\n * set by the static API will get overriden by the one set by the component in\n * the next render.\n *\n * ### Constants\n *\n * `currentHeight` (Android only) The height of the status bar.\n */\nclass StatusBar extends React.Component<{\n  hidden?: boolean,\n  animated?: boolean,\n  backgroundColor?: string,\n  translucent?: boolean,\n  barStyle?: 'default' | 'light-content' | 'dark-content',\n  networkActivityIndicatorVisible?: boolean,\n  showHideTransition?: 'fade' | 'slide',\n}> {\n  static _propsStack = [];\n\n  static _defaultProps = createStackEntry({\n    animated: false,\n    showHideTransition: 'fade',\n    backgroundColor: 'black',\n    barStyle: 'default',\n    translucent: false,\n    hidden: false,\n    networkActivityIndicatorVisible: false,\n  });\n\n  // Timer for updating the native module values at the end of the frame.\n  static _updateImmediate = null;\n\n  // The current merged values from the props stack.\n  static _currentValues = null;\n\n  // TODO(janic): Provide a real API to deal with status bar height. See the\n  // discussion in #6195.\n  /**\n   * The current height of the status bar on the device.\n   *\n   * @platform android\n   */\n  static currentHeight = StatusBarManager.HEIGHT;\n\n  // Provide an imperative API as static functions of the component.\n  // See the corresponding prop for more detail.\n\n  /**\n   * Show or hide the status bar\n   * @param hidden Hide the status bar.\n   * @param animation Optional animation when\n   *    changing the status bar hidden property.\n   */\n  static setHidden(hidden: boolean, animation?: StatusBarAnimation) {\n    animation = animation || 'none';\n    StatusBar._defaultProps.hidden.value = hidden;\n    if (Platform.OS === 'ios') {\n      StatusBarManager.setHidden(hidden, animation);\n    } else if (Platform.OS === 'android') {\n      StatusBarManager.setHidden(hidden);\n    }\n  }\n\n  /**\n   * Set the status bar style\n   * @param style Status bar style to set\n   * @param animated Animate the style change.\n   */\n  static setBarStyle(style: StatusBarStyle, animated?: boolean) {\n    animated = animated || false;\n    StatusBar._defaultProps.barStyle.value = style;\n    if (Platform.OS === 'ios') {\n      StatusBarManager.setStyle(style, animated);\n    } else if (Platform.OS === 'android') {\n      StatusBarManager.setStyle(style);\n    }\n  }\n\n  /**\n   * Control the visibility of the network activity indicator\n   * @param visible Show the indicator.\n   */\n  static setNetworkActivityIndicatorVisible(visible: boolean) {\n    if (Platform.OS !== 'ios') {\n      console.warn(\n        '`setNetworkActivityIndicatorVisible` is only available on iOS',\n      );\n      return;\n    }\n    StatusBar._defaultProps.networkActivityIndicatorVisible = visible;\n    StatusBarManager.setNetworkActivityIndicatorVisible(visible);\n  }\n\n  /**\n   * Set the background color for the status bar\n   * @param color Background color.\n   * @param animated Animate the style change.\n   */\n  static setBackgroundColor(color: string, animated?: boolean) {\n    if (Platform.OS !== 'android') {\n      console.warn('`setBackgroundColor` is only available on Android');\n      return;\n    }\n    animated = animated || false;\n    StatusBar._defaultProps.backgroundColor.value = color;\n    StatusBarManager.setColor(processColor(color), animated);\n  }\n\n  /**\n   * Control the translucency of the status bar\n   * @param translucent Set as translucent.\n   */\n  static setTranslucent(translucent: boolean) {\n    if (Platform.OS !== 'android') {\n      console.warn('`setTranslucent` is only available on Android');\n      return;\n    }\n    StatusBar._defaultProps.translucent = translucent;\n    StatusBarManager.setTranslucent(translucent);\n  }\n\n  static propTypes = {\n    /**\n     * If the status bar is hidden.\n     */\n    hidden: PropTypes.bool,\n    /**\n     * If the transition between status bar property changes should be animated.\n     * Supported for backgroundColor, barStyle and hidden.\n     */\n    animated: PropTypes.bool,\n    /**\n     * The background color of the status bar.\n     * @platform android\n     */\n    backgroundColor: ColorPropType,\n    /**\n     * If the status bar is translucent.\n     * When translucent is set to true, the app will draw under the status bar.\n     * This is useful when using a semi transparent status bar color.\n     *\n     * @platform android\n     */\n    translucent: PropTypes.bool,\n    /**\n     * Sets the color of the status bar text.\n     */\n    barStyle: PropTypes.oneOf(['default', 'light-content', 'dark-content']),\n    /**\n     * If the network activity indicator should be visible.\n     *\n     * @platform ios\n     */\n    networkActivityIndicatorVisible: PropTypes.bool,\n    /**\n     * The transition effect when showing and hiding the status bar using the `hidden`\n     * prop. Defaults to 'fade'.\n     *\n     * @platform ios\n     */\n    showHideTransition: PropTypes.oneOf(['fade', 'slide']),\n  };\n\n  static defaultProps = {\n    animated: false,\n    showHideTransition: 'fade',\n  };\n\n  _stackEntry = null;\n\n  componentDidMount() {\n    // Every time a StatusBar component is mounted, we push it's prop to a stack\n    // and always update the native status bar with the props from the top of then\n    // stack. This allows having multiple StatusBar components and the one that is\n    // added last or is deeper in the view hierarchy will have priority.\n    this._stackEntry = createStackEntry(this.props);\n    StatusBar._propsStack.push(this._stackEntry);\n    this._updatePropsStack();\n  }\n\n  componentWillUnmount() {\n    // When a StatusBar is unmounted, remove itself from the stack and update\n    // the native bar with the next props.\n    const index = StatusBar._propsStack.indexOf(this._stackEntry);\n    StatusBar._propsStack.splice(index, 1);\n\n    this._updatePropsStack();\n  }\n\n  componentDidUpdate() {\n    const index = StatusBar._propsStack.indexOf(this._stackEntry);\n    this._stackEntry = createStackEntry(this.props);\n    StatusBar._propsStack[index] = this._stackEntry;\n\n    this._updatePropsStack();\n  }\n\n  /**\n   * Updates the native status bar with the props from the stack.\n   */\n  _updatePropsStack = () => {\n    // Send the update to the native module only once at the end of the frame.\n    clearImmediate(StatusBar._updateImmediate);\n    StatusBar._updateImmediate = setImmediate(() => {\n      const oldProps = StatusBar._currentValues;\n      const mergedProps = mergePropsStack(\n        StatusBar._propsStack,\n        StatusBar._defaultProps,\n      );\n\n      // Update the props that have changed using the merged values from the props stack.\n      if (Platform.OS === 'ios') {\n        if (\n          !oldProps ||\n          oldProps.barStyle.value !== mergedProps.barStyle.value\n        ) {\n          StatusBarManager.setStyle(\n            mergedProps.barStyle.value,\n            mergedProps.barStyle.animated,\n          );\n        }\n        if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {\n          StatusBarManager.setHidden(\n            mergedProps.hidden.value,\n            mergedProps.hidden.animated\n              ? mergedProps.hidden.transition\n              : 'none',\n          );\n        }\n\n        if (\n          !oldProps ||\n          oldProps.networkActivityIndicatorVisible !==\n            mergedProps.networkActivityIndicatorVisible\n        ) {\n          StatusBarManager.setNetworkActivityIndicatorVisible(\n            mergedProps.networkActivityIndicatorVisible,\n          );\n        }\n      } else if (Platform.OS === 'android') {\n        if (\n          !oldProps ||\n          oldProps.barStyle.value !== mergedProps.barStyle.value\n        ) {\n          StatusBarManager.setStyle(mergedProps.barStyle.value);\n        }\n        if (\n          !oldProps ||\n          oldProps.backgroundColor.value !== mergedProps.backgroundColor.value\n        ) {\n          StatusBarManager.setColor(\n            processColor(mergedProps.backgroundColor.value),\n            mergedProps.backgroundColor.animated,\n          );\n        }\n        if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {\n          StatusBarManager.setHidden(mergedProps.hidden.value);\n        }\n        if (!oldProps || oldProps.translucent !== mergedProps.translucent) {\n          StatusBarManager.setTranslucent(mergedProps.translucent);\n        }\n      }\n      // Update the current prop values.\n      StatusBar._currentValues = mergedProps;\n    });\n  };\n\n  render(): React.Node {\n    return null;\n  }\n}\n\nmodule.exports = StatusBar;\n"]}]}