{"remainingRequest":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js??ref--5-2!/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/TextInput/TextInput.js","dependencies":[{"path":"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/TextInput/TextInput.js","mtime":1539700108130},{"path":"/Users/jeffrey/HaulTesting/node_modules/cache-loader/dist/cjs.js","mtime":1539652983212},{"path":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js","mtime":1539652983315},{"path":"/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js","mtime":1539615827828}],"contextDependencies":[],"result":["'use strict';var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _possibleConstructorReturn2=_interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));var _getPrototypeOf2=_interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));var _inherits2=_interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _objectSpread2=_interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));var _jsxFileName=\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/TextInput/TextInput.js\";(function(){var enterModule=require('react-hot-loader').enterModule;enterModule&&enterModule(module);})();var ColorPropType=require('ColorPropType');var DocumentSelectionState=require('DocumentSelectionState');var EventEmitter=require('EventEmitter');var NativeMethodsMixin=require('NativeMethodsMixin');var Platform=require('Platform');var React=require('React');var createReactClass=require('create-react-class');var PropTypes=require('prop-types');var ReactNative=require('ReactNative');var StyleSheet=require('StyleSheet');var Text=require('Text');var TextAncestor=require('TextAncestor');var TextInputState=require('TextInputState');var TimerMixin=require('react-timer-mixin');var TouchableWithoutFeedback=require('TouchableWithoutFeedback');var UIManager=require('UIManager');var ViewPropTypes=require('ViewPropTypes');var emptyFunction=require('fbjs/lib/emptyFunction');var invariant=require('fbjs/lib/invariant');var requireNativeComponent=require('requireNativeComponent');var warning=require('fbjs/lib/warning');var AndroidTextInput;var RCTMultilineTextInputView;var RCTSinglelineTextInputView;if(Platform.OS==='android'){AndroidTextInput=requireNativeComponent('AndroidTextInput');}else if(Platform.OS==='ios'){RCTMultilineTextInputView=requireNativeComponent('RCTMultilineTextInputView');RCTSinglelineTextInputView=requireNativeComponent('RCTSinglelineTextInputView');}var onlyMultiline={onTextInput:true,children:true};var DataDetectorTypes=['phoneNumber','link','address','calendarEvent','none','all'];var TextInput=createReactClass({displayName:'TextInput',statics:{State:{currentlyFocusedField:TextInputState.currentlyFocusedField,focusTextInput:TextInputState.focusTextInput,blurTextInput:TextInputState.blurTextInput}},propTypes:(0,_objectSpread2.default)({},ViewPropTypes,{autoCapitalize:PropTypes.oneOf(['none','sentences','words','characters']),autoCorrect:PropTypes.bool,spellCheck:PropTypes.bool,autoFocus:PropTypes.bool,allowFontScaling:PropTypes.bool,editable:PropTypes.bool,keyboardType:PropTypes.oneOf(['default','email-address','numeric','phone-pad','number-pad','ascii-capable','numbers-and-punctuation','url','name-phone-pad','decimal-pad','twitter','web-search','visible-password']),keyboardAppearance:PropTypes.oneOf(['default','light','dark']),returnKeyType:PropTypes.oneOf(['done','go','next','search','send','none','previous','default','emergency-call','google','join','route','yahoo']),returnKeyLabel:PropTypes.string,maxLength:PropTypes.number,numberOfLines:PropTypes.number,disableFullscreenUI:PropTypes.bool,enablesReturnKeyAutomatically:PropTypes.bool,multiline:PropTypes.bool,textBreakStrategy:PropTypes.oneOf(['simple','highQuality','balanced']),onBlur:PropTypes.func,onFocus:PropTypes.func,onChange:PropTypes.func,onChangeText:PropTypes.func,onContentSizeChange:PropTypes.func,onTextInput:PropTypes.func,onEndEditing:PropTypes.func,onSelectionChange:PropTypes.func,onSubmitEditing:PropTypes.func,onKeyPress:PropTypes.func,onLayout:PropTypes.func,onScroll:PropTypes.func,placeholder:PropTypes.string,placeholderTextColor:ColorPropType,scrollEnabled:PropTypes.bool,secureTextEntry:PropTypes.bool,selectionColor:ColorPropType,selectionState:PropTypes.instanceOf(DocumentSelectionState),selection:PropTypes.shape({start:PropTypes.number.isRequired,end:PropTypes.number}),value:PropTypes.string,defaultValue:PropTypes.string,clearButtonMode:PropTypes.oneOf(['never','while-editing','unless-editing','always']),clearTextOnFocus:PropTypes.bool,selectTextOnFocus:PropTypes.bool,blurOnSubmit:PropTypes.bool,style:Text.propTypes.style,underlineColorAndroid:ColorPropType,inlineImageLeft:PropTypes.string,inlineImagePadding:PropTypes.number,dataDetectorTypes:PropTypes.oneOfType([PropTypes.oneOf(DataDetectorTypes),PropTypes.arrayOf(PropTypes.oneOf(DataDetectorTypes))]),caretHidden:PropTypes.bool,contextMenuHidden:PropTypes.bool,inputAccessoryViewID:PropTypes.string,textContentType:PropTypes.oneOf(['none','URL','addressCity','addressCityAndState','addressState','countryName','creditCardNumber','emailAddress','familyName','fullStreetAddress','givenName','jobTitle','location','middleName','name','namePrefix','nameSuffix','nickname','organizationName','postalCode','streetAddressLine1','streetAddressLine2','sublocality','telephoneNumber','username','password'])}),getDefaultProps:function getDefaultProps(){return{allowFontScaling:true,underlineColorAndroid:'transparent'};},mixins:[NativeMethodsMixin,TimerMixin],isFocused:function isFocused(){return TextInputState.currentlyFocusedField()===ReactNative.findNodeHandle(this._inputRef);},_inputRef:undefined,_focusSubscription:undefined,_lastNativeText:undefined,_lastNativeSelection:undefined,componentDidMount:function componentDidMount(){var _this=this;this._lastNativeText=this.props.value;var tag=ReactNative.findNodeHandle(this._inputRef);if(tag!=null){TextInputState.registerInput(tag);}if(this.context.focusEmitter){this._focusSubscription=this.context.focusEmitter.addListener('focus',function(el){if(_this===el){_this.requestAnimationFrame(_this.focus);}else if(_this.isFocused()){_this.blur();}});if(this.props.autoFocus){this.context.onFocusRequested(this);}}else{if(this.props.autoFocus){this.requestAnimationFrame(this.focus);}}},componentWillUnmount:function componentWillUnmount(){this._focusSubscription&&this._focusSubscription.remove();if(this.isFocused()){this.blur();}var tag=ReactNative.findNodeHandle(this._inputRef);if(tag!=null){TextInputState.unregisterInput(tag);}},contextTypes:{onFocusRequested:PropTypes.func,focusEmitter:PropTypes.instanceOf(EventEmitter)},clear:function clear(){this.setNativeProps({text:''});},render:function render(){var textInput;if(Platform.OS==='ios'){textInput=UIManager.RCTVirtualText?this._renderIOS():this._renderIOSLegacy();}else if(Platform.OS==='android'){textInput=this._renderAndroid();}return React.createElement(TextAncestor.Provider,{value:true,__source:{fileName:_jsxFileName,lineNumber:872}},textInput);},_getText:function _getText(){return typeof this.props.value==='string'?this.props.value:typeof this.props.defaultValue==='string'?this.props.defaultValue:'';},_setNativeRef:function _setNativeRef(ref){this._inputRef=ref;},_renderIOSLegacy:function _renderIOSLegacy(){var textContainer;var props=(0,_extends2.default)({},this.props);props.style=[this.props.style];if(props.selection&&props.selection.end==null){props.selection={start:props.selection.start,end:props.selection.start};}if(!props.multiline){if(__DEV__){for(var propKey in onlyMultiline){if(props[propKey]){var error=new Error('TextInput prop `'+propKey+'` is only supported with multiline.');warning(false,'%s',error.stack);}}}textContainer=React.createElement(RCTSinglelineTextInputView,(0,_extends2.default)({ref:this._setNativeRef},props,{onFocus:this._onFocus,onBlur:this._onBlur,onChange:this._onChange,onSelectionChange:this._onSelectionChange,onSelectionChangeShouldSetResponder:emptyFunction.thatReturnsTrue,text:this._getText(),__source:{fileName:_jsxFileName,lineNumber:915}}));}else{var children=props.children;var childCount=0;React.Children.forEach(children,function(){return++childCount;});invariant(!(props.value&&childCount),'Cannot specify both value and children.');if(childCount>=1){children=React.createElement(Text,{style:props.style,allowFontScaling:props.allowFontScaling,__source:{fileName:_jsxFileName,lineNumber:936}},children);}if(props.inputView){children=[children,props.inputView];}props.style.unshift(styles.multilineInput);textContainer=React.createElement(RCTMultilineTextInputView,(0,_extends2.default)({ref:this._setNativeRef},props,{children:children,onFocus:this._onFocus,onBlur:this._onBlur,onChange:this._onChange,onContentSizeChange:this.props.onContentSizeChange,onSelectionChange:this._onSelectionChange,onTextInput:this._onTextInput,onSelectionChangeShouldSetResponder:emptyFunction.thatReturnsTrue,text:this._getText(),dataDetectorTypes:this.props.dataDetectorTypes,onScroll:this._onScroll,__source:{fileName:_jsxFileName,lineNumber:946}}));}return React.createElement(TouchableWithoutFeedback,{onLayout:props.onLayout,onPress:this._onPress,rejectResponderTermination:true,accessible:props.accessible,accessibilityLabel:props.accessibilityLabel,accessibilityRole:props.accessibilityRole,accessibilityStates:props.accessibilityStates,nativeID:this.props.nativeID,testID:props.testID,__source:{fileName:_jsxFileName,lineNumber:965}},textContainer);},_renderIOS:function _renderIOS(){var props=(0,_extends2.default)({},this.props);props.style=[this.props.style];if(props.selection&&props.selection.end==null){props.selection={start:props.selection.start,end:props.selection.start};}var RCTTextInputView=props.multiline?RCTMultilineTextInputView:RCTSinglelineTextInputView;if(props.multiline){props.style.unshift(styles.multilineInput);}var textContainer=React.createElement(RCTTextInputView,(0,_extends2.default)({ref:this._setNativeRef},props,{onFocus:this._onFocus,onBlur:this._onBlur,onChange:this._onChange,onContentSizeChange:this.props.onContentSizeChange,onSelectionChange:this._onSelectionChange,onTextInput:this._onTextInput,onSelectionChangeShouldSetResponder:emptyFunction.thatReturnsTrue,text:this._getText(),dataDetectorTypes:this.props.dataDetectorTypes,onScroll:this._onScroll,__source:{fileName:_jsxFileName,lineNumber:1000}}));return React.createElement(TouchableWithoutFeedback,{onLayout:props.onLayout,onPress:this._onPress,rejectResponderTermination:true,accessible:props.accessible,accessibilityLabel:props.accessibilityLabel,accessibilityRole:props.accessibilityRole,accessibilityStates:props.accessibilityStates,nativeID:this.props.nativeID,testID:props.testID,__source:{fileName:_jsxFileName,lineNumber:1017}},textContainer);},_renderAndroid:function _renderAndroid(){var props=(0,_extends2.default)({},this.props);props.style=[this.props.style];props.autoCapitalize=UIManager.AndroidTextInput.Constants.AutoCapitalizationType[props.autoCapitalize||'sentences'];var children=this.props.children;var childCount=0;React.Children.forEach(children,function(){return++childCount;});invariant(!(this.props.value&&childCount),'Cannot specify both value and children.');if(childCount>1){children=React.createElement(Text,{__source:{fileName:_jsxFileName,lineNumber:1050}},children);}if(props.selection&&props.selection.end==null){props.selection={start:props.selection.start,end:props.selection.start};}var textContainer=React.createElement(AndroidTextInput,(0,_extends2.default)({ref:this._setNativeRef},props,{mostRecentEventCount:0,onFocus:this._onFocus,onBlur:this._onBlur,onChange:this._onChange,onSelectionChange:this._onSelectionChange,onTextInput:this._onTextInput,text:this._getText(),children:children,disableFullscreenUI:this.props.disableFullscreenUI,textBreakStrategy:this.props.textBreakStrategy,onScroll:this._onScroll,__source:{fileName:_jsxFileName,lineNumber:1061}}));return React.createElement(TouchableWithoutFeedback,{onLayout:props.onLayout,onPress:this._onPress,accessible:this.props.accessible,accessibilityLabel:this.props.accessibilityLabel,accessibilityRole:this.props.accessibilityRole,accessibilityStates:this.props.accessibilityStates,nativeID:this.props.nativeID,testID:this.props.testID,__source:{fileName:_jsxFileName,lineNumber:1079}},textContainer);},_onFocus:function _onFocus(event){if(this.props.onFocus){this.props.onFocus(event);}if(this.props.selectionState){this.props.selectionState.focus();}},_onPress:function _onPress(event){if(this.props.editable||this.props.editable===undefined){this.focus();}},_onChange:function _onChange(event){if(this._inputRef){this._inputRef.setNativeProps({mostRecentEventCount:event.nativeEvent.eventCount});}var text=event.nativeEvent.text;this.props.onChange&&this.props.onChange(event);this.props.onChangeText&&this.props.onChangeText(text);if(!this._inputRef){return;}this._lastNativeText=text;this.forceUpdate();},_onSelectionChange:function _onSelectionChange(event){this.props.onSelectionChange&&this.props.onSelectionChange(event);if(!this._inputRef){return;}this._lastNativeSelection=event.nativeEvent.selection;if(this.props.selection||this.props.selectionState){this.forceUpdate();}},componentDidUpdate:function componentDidUpdate(){var nativeProps={};if(this._lastNativeText!==this.props.value&&typeof this.props.value==='string'){nativeProps.text=this.props.value;}var selection=this.props.selection;if(this._lastNativeSelection&&selection&&(this._lastNativeSelection.start!==selection.start||this._lastNativeSelection.end!==selection.end)){nativeProps.selection=this.props.selection;}if(Object.keys(nativeProps).length>0&&this._inputRef){this._inputRef.setNativeProps(nativeProps);}if(this.props.selectionState&&selection){this.props.selectionState.update(selection.start,selection.end);}},_onBlur:function _onBlur(event){this.blur();if(this.props.onBlur){this.props.onBlur(event);}if(this.props.selectionState){this.props.selectionState.blur();}},_onTextInput:function _onTextInput(event){this.props.onTextInput&&this.props.onTextInput(event);},_onScroll:function _onScroll(event){this.props.onScroll&&this.props.onScroll(event);}});var InternalTextInputType=function(_ReactNative$NativeCo){(0,_inherits2.default)(InternalTextInputType,_ReactNative$NativeCo);function InternalTextInputType(){(0,_classCallCheck2.default)(this,InternalTextInputType);return(0,_possibleConstructorReturn2.default)(this,(0,_getPrototypeOf2.default)(InternalTextInputType).apply(this,arguments));}(0,_createClass2.default)(InternalTextInputType,[{key:\"clear\",value:function clear(){}},{key:\"isFocused\",value:function isFocused(){}},{key:\"__reactstandin__regenerateByEval\",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code);}}]);return InternalTextInputType;}(ReactNative.NativeComponent);var TypedTextInput=TextInput;var styles=StyleSheet.create({multilineInput:{paddingTop:5}});module.exports=TypedTextInput;;(function(){var reactHotLoader=require('react-hot-loader').default;var leaveModule=require('react-hot-loader').leaveModule;if(!reactHotLoader){return;}reactHotLoader.register(AndroidTextInput,\"AndroidTextInput\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/TextInput/TextInput.js\");reactHotLoader.register(RCTMultilineTextInputView,\"RCTMultilineTextInputView\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/TextInput/TextInput.js\");reactHotLoader.register(RCTSinglelineTextInputView,\"RCTSinglelineTextInputView\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/TextInput/TextInput.js\");reactHotLoader.register(onlyMultiline,\"onlyMultiline\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/TextInput/TextInput.js\");reactHotLoader.register(DataDetectorTypes,\"DataDetectorTypes\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/TextInput/TextInput.js\");reactHotLoader.register(TextInput,\"TextInput\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/TextInput/TextInput.js\");reactHotLoader.register(InternalTextInputType,\"InternalTextInputType\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/TextInput/TextInput.js\");reactHotLoader.register(TypedTextInput,\"TypedTextInput\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/TextInput/TextInput.js\");reactHotLoader.register(styles,\"styles\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/TextInput/TextInput.js\");leaveModule(module);})();;",{"version":3,"sources":["/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Components/TextInput/TextInput.js"],"names":["ColorPropType","require","DocumentSelectionState","EventEmitter","NativeMethodsMixin","Platform","React","createReactClass","PropTypes","ReactNative","StyleSheet","Text","TextAncestor","TextInputState","TimerMixin","TouchableWithoutFeedback","UIManager","ViewPropTypes","emptyFunction","invariant","requireNativeComponent","warning","AndroidTextInput","RCTMultilineTextInputView","RCTSinglelineTextInputView","OS","onlyMultiline","onTextInput","children","DataDetectorTypes","TextInput","displayName","statics","State","currentlyFocusedField","focusTextInput","blurTextInput","propTypes","autoCapitalize","oneOf","autoCorrect","bool","spellCheck","autoFocus","allowFontScaling","editable","keyboardType","keyboardAppearance","returnKeyType","returnKeyLabel","string","maxLength","number","numberOfLines","disableFullscreenUI","enablesReturnKeyAutomatically","multiline","textBreakStrategy","onBlur","func","onFocus","onChange","onChangeText","onContentSizeChange","onEndEditing","onSelectionChange","onSubmitEditing","onKeyPress","onLayout","onScroll","placeholder","placeholderTextColor","scrollEnabled","secureTextEntry","selectionColor","selectionState","instanceOf","selection","shape","start","isRequired","end","value","defaultValue","clearButtonMode","clearTextOnFocus","selectTextOnFocus","blurOnSubmit","style","underlineColorAndroid","inlineImageLeft","inlineImagePadding","dataDetectorTypes","oneOfType","arrayOf","caretHidden","contextMenuHidden","inputAccessoryViewID","textContentType","getDefaultProps","mixins","isFocused","findNodeHandle","_inputRef","undefined","_focusSubscription","_lastNativeText","_lastNativeSelection","componentDidMount","props","tag","registerInput","context","focusEmitter","addListener","el","requestAnimationFrame","focus","blur","onFocusRequested","componentWillUnmount","remove","unregisterInput","contextTypes","clear","setNativeProps","text","render","textInput","RCTVirtualText","_renderIOS","_renderIOSLegacy","_renderAndroid","_getText","_setNativeRef","ref","textContainer","__DEV__","propKey","error","Error","stack","_onFocus","_onBlur","_onChange","_onSelectionChange","thatReturnsTrue","childCount","Children","forEach","inputView","unshift","styles","multilineInput","_onTextInput","_onScroll","_onPress","accessible","accessibilityLabel","accessibilityRole","accessibilityStates","nativeID","testID","RCTTextInputView","Constants","AutoCapitalizationType","event","mostRecentEventCount","nativeEvent","eventCount","forceUpdate","componentDidUpdate","nativeProps","Object","keys","length","update","InternalTextInputType","NativeComponent","TypedTextInput","create","paddingTop","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst ColorPropType = require('ColorPropType');\nconst DocumentSelectionState = require('DocumentSelectionState');\nconst EventEmitter = require('EventEmitter');\nconst NativeMethodsMixin = require('NativeMethodsMixin');\nconst Platform = require('Platform');\nconst React = require('React');\nconst createReactClass = require('create-react-class');\nconst PropTypes = require('prop-types');\nconst ReactNative = require('ReactNative');\nconst StyleSheet = require('StyleSheet');\nconst Text = require('Text');\nconst TextAncestor = require('TextAncestor');\nconst TextInputState = require('TextInputState');\nconst TimerMixin = require('react-timer-mixin');\nconst TouchableWithoutFeedback = require('TouchableWithoutFeedback');\nconst UIManager = require('UIManager');\nconst ViewPropTypes = require('ViewPropTypes');\n\nconst emptyFunction = require('fbjs/lib/emptyFunction');\nconst invariant = require('fbjs/lib/invariant');\nconst requireNativeComponent = require('requireNativeComponent');\nconst warning = require('fbjs/lib/warning');\n\nimport type {ColorValue} from 'StyleSheetTypes';\nimport type {TextStyleProp} from 'StyleSheet';\nimport type {ViewProps} from 'ViewPropTypes';\n\nlet AndroidTextInput;\nlet RCTMultilineTextInputView;\nlet RCTSinglelineTextInputView;\n\nif (Platform.OS === 'android') {\n  AndroidTextInput = requireNativeComponent('AndroidTextInput');\n} else if (Platform.OS === 'ios') {\n  RCTMultilineTextInputView = requireNativeComponent(\n    'RCTMultilineTextInputView',\n  );\n  RCTSinglelineTextInputView = requireNativeComponent(\n    'RCTSinglelineTextInputView',\n  );\n}\n\nconst onlyMultiline = {\n  onTextInput: true,\n  children: true,\n};\n\ntype Event = Object;\ntype Selection = {\n  start: number,\n  end?: number,\n};\n\nconst DataDetectorTypes = [\n  'phoneNumber',\n  'link',\n  'address',\n  'calendarEvent',\n  'none',\n  'all',\n];\n\ntype DataDetectorTypesType =\n  | 'phoneNumber'\n  | 'link'\n  | 'address'\n  | 'calendarEvent'\n  | 'none'\n  | 'all';\n\nexport type KeyboardType =\n  // Cross Platform\n  | 'default'\n  | 'email-address'\n  | 'numeric'\n  | 'phone-pad'\n  | 'number-pad'\n  | 'decimal-pad'\n  // iOS-only\n  | 'ascii-capable'\n  | 'numbers-and-punctuation'\n  | 'url'\n  | 'name-phone-pad'\n  | 'twitter'\n  | 'web-search'\n  // Android-only\n  | 'visible-password';\n\nexport type ReturnKeyType =\n  // Cross Platform\n  | 'done'\n  | 'go'\n  | 'next'\n  | 'search'\n  | 'send'\n  // Android-only\n  | 'none'\n  | 'previous'\n  // iOS-only\n  | 'default'\n  | 'emergency-call'\n  | 'google'\n  | 'join'\n  | 'route'\n  | 'yahoo';\n\nexport type AutoCapitalize = 'none' | 'sentences' | 'words' | 'characters';\n\ntype IOSProps = $ReadOnly<{|\n  spellCheck?: ?boolean,\n  keyboardAppearance?: ?('default' | 'light' | 'dark'),\n  enablesReturnKeyAutomatically?: ?boolean,\n  selectionState?: ?DocumentSelectionState,\n  clearButtonMode?: ?('never' | 'while-editing' | 'unless-editing' | 'always'),\n  clearTextOnFocus?: ?boolean,\n  dataDetectorTypes?:\n    | ?DataDetectorTypesType\n    | $ReadOnlyArray<DataDetectorTypesType>,\n  inputAccessoryViewID?: ?string,\n  textContentType?: ?(\n    | 'none'\n    | 'URL'\n    | 'addressCity'\n    | 'addressCityAndState'\n    | 'addressState'\n    | 'countryName'\n    | 'creditCardNumber'\n    | 'emailAddress'\n    | 'familyName'\n    | 'fullStreetAddress'\n    | 'givenName'\n    | 'jobTitle'\n    | 'location'\n    | 'middleName'\n    | 'name'\n    | 'namePrefix'\n    | 'nameSuffix'\n    | 'nickname'\n    | 'organizationName'\n    | 'postalCode'\n    | 'streetAddressLine1'\n    | 'streetAddressLine2'\n    | 'sublocality'\n    | 'telephoneNumber'\n    | 'username'\n    | 'password'\n  ),\n  scrollEnabled?: ?boolean,\n|}>;\n\ntype AndroidProps = $ReadOnly<{|\n  returnKeyLabel?: ?string,\n  numberOfLines?: ?number,\n  disableFullscreenUI?: ?boolean,\n  textBreakStrategy?: ?('simple' | 'highQuality' | 'balanced'),\n  underlineColorAndroid?: ?ColorValue,\n  inlineImageLeft?: ?string,\n  inlineImagePadding?: ?number,\n|}>;\n\ntype Props = $ReadOnly<{|\n  ...ViewProps,\n  ...IOSProps,\n  ...AndroidProps,\n  autoCapitalize?: ?AutoCapitalize,\n  autoCorrect?: ?boolean,\n  autoFocus?: ?boolean,\n  allowFontScaling?: ?boolean,\n  editable?: ?boolean,\n  keyboardType?: ?KeyboardType,\n  returnKeyType?: ?ReturnKeyType,\n  maxLength?: ?number,\n  multiline?: ?boolean,\n  onBlur?: ?Function,\n  onFocus?: ?Function,\n  onChange?: ?Function,\n  onChangeText?: ?Function,\n  onContentSizeChange?: ?Function,\n  onTextInput?: ?Function,\n  onEndEditing?: ?Function,\n  onSelectionChange?: ?Function,\n  onSubmitEditing?: ?Function,\n  onKeyPress?: ?Function,\n  onScroll?: ?Function,\n  placeholder?: ?Stringish,\n  placeholderTextColor?: ?ColorValue,\n  secureTextEntry?: ?boolean,\n  selectionColor?: ?ColorValue,\n  selection?: ?$ReadOnly<{|\n    start: number,\n    end?: ?number,\n  |}>,\n  value?: ?Stringish,\n  defaultValue?: ?Stringish,\n  selectTextOnFocus?: ?boolean,\n  blurOnSubmit?: ?boolean,\n  style?: ?TextStyleProp,\n  caretHidden?: ?boolean,\n  contextMenuHidden?: ?boolean,\n|}>;\n\n/**\n * A foundational component for inputting text into the app via a\n * keyboard. Props provide configurability for several features, such as\n * auto-correction, auto-capitalization, placeholder text, and different keyboard\n * types, such as a numeric keypad.\n *\n * The simplest use case is to plop down a `TextInput` and subscribe to the\n * `onChangeText` events to read the user input. There are also other events,\n * such as `onSubmitEditing` and `onFocus` that can be subscribed to. A simple\n * example:\n *\n * ```ReactNativeWebPlayer\n * import React, { Component } from 'react';\n * import { AppRegistry, TextInput } from 'react-native';\n *\n * export default class UselessTextInput extends Component {\n *   constructor(props) {\n *     super(props);\n *     this.state = { text: 'Useless Placeholder' };\n *   }\n *\n *   render() {\n *     return (\n *       <TextInput\n *         style={{height: 40, borderColor: 'gray', borderWidth: 1}}\n *         onChangeText={(text) => this.setState({text})}\n *         value={this.state.text}\n *       />\n *     );\n *   }\n * }\n *\n * // skip this line if using Create React Native App\n * AppRegistry.registerComponent('AwesomeProject', () => UselessTextInput);\n * ```\n *\n * Two methods exposed via the native element are .focus() and .blur() that\n * will focus or blur the TextInput programmatically.\n *\n * Note that some props are only available with `multiline={true/false}`.\n * Additionally, border styles that apply to only one side of the element\n * (e.g., `borderBottomColor`, `borderLeftWidth`, etc.) will not be applied if\n * `multiline=false`. To achieve the same effect, you can wrap your `TextInput`\n * in a `View`:\n *\n * ```ReactNativeWebPlayer\n * import React, { Component } from 'react';\n * import { AppRegistry, View, TextInput } from 'react-native';\n *\n * class UselessTextInput extends Component {\n *   render() {\n *     return (\n *       <TextInput\n *         {...this.props} // Inherit any props passed to it; e.g., multiline, numberOfLines below\n *         editable = {true}\n *         maxLength = {40}\n *       />\n *     );\n *   }\n * }\n *\n * export default class UselessTextInputMultiline extends Component {\n *   constructor(props) {\n *     super(props);\n *     this.state = {\n *       text: 'Useless Multiline Placeholder',\n *     };\n *   }\n *\n *   // If you type something in the text box that is a color, the background will change to that\n *   // color.\n *   render() {\n *     return (\n *      <View style={{\n *        backgroundColor: this.state.text,\n *        borderBottomColor: '#000000',\n *        borderBottomWidth: 1 }}\n *      >\n *        <UselessTextInput\n *          multiline = {true}\n *          numberOfLines = {4}\n *          onChangeText={(text) => this.setState({text})}\n *          value={this.state.text}\n *        />\n *      </View>\n *     );\n *   }\n * }\n *\n * // skip these lines if using Create React Native App\n * AppRegistry.registerComponent(\n *  'AwesomeProject',\n *  () => UselessTextInputMultiline\n * );\n * ```\n *\n * `TextInput` has by default a border at the bottom of its view. This border\n * has its padding set by the background image provided by the system, and it\n * cannot be changed. Solutions to avoid this is to either not set height\n * explicitly, case in which the system will take care of displaying the border\n * in the correct position, or to not display the border by setting\n * `underlineColorAndroid` to transparent.\n *\n * Note that on Android performing text selection in input can change\n * app's activity `windowSoftInputMode` param to `adjustResize`.\n * This may cause issues with components that have position: 'absolute'\n * while keyboard is active. To avoid this behavior either specify `windowSoftInputMode`\n * in AndroidManifest.xml ( https://developer.android.com/guide/topics/manifest/activity-element.html )\n * or control this param programmatically with native code.\n *\n */\n\nconst TextInput = createReactClass({\n  displayName: 'TextInput',\n  statics: {\n    State: {\n      currentlyFocusedField: TextInputState.currentlyFocusedField,\n      focusTextInput: TextInputState.focusTextInput,\n      blurTextInput: TextInputState.blurTextInput,\n    },\n  },\n  propTypes: {\n    ...ViewPropTypes,\n    /**\n     * Can tell `TextInput` to automatically capitalize certain characters.\n     *\n     * - `characters`: all characters.\n     * - `words`: first letter of each word.\n     * - `sentences`: first letter of each sentence (*default*).\n     * - `none`: don't auto capitalize anything.\n     */\n    autoCapitalize: PropTypes.oneOf([\n      'none',\n      'sentences',\n      'words',\n      'characters',\n    ]),\n    /**\n     * If `false`, disables auto-correct. The default value is `true`.\n     */\n    autoCorrect: PropTypes.bool,\n    /**\n     * If `false`, disables spell-check style (i.e. red underlines).\n     * The default value is inherited from `autoCorrect`.\n     * @platform ios\n     */\n    spellCheck: PropTypes.bool,\n    /**\n     * If `true`, focuses the input on `componentDidMount`.\n     * The default value is `false`.\n     */\n    autoFocus: PropTypes.bool,\n    /**\n     * Specifies whether fonts should scale to respect Text Size accessibility settings. The\n     * default is `true`.\n     */\n    allowFontScaling: PropTypes.bool,\n    /**\n     * If `false`, text is not editable. The default value is `true`.\n     */\n    editable: PropTypes.bool,\n    /**\n     * Determines which keyboard to open, e.g.`numeric`.\n     *\n     * The following values work across platforms:\n     *\n     * - `default`\n     * - `numeric`\n     * - `number-pad`\n     * - `decimal-pad`\n     * - `email-address`\n     * - `phone-pad`\n     *\n     * *iOS Only*\n     *\n     * The following values work on iOS only:\n     *\n     * - `ascii-capable`\n     * - `numbers-and-punctuation`\n     * - `url`\n     * - `name-phone-pad`\n     * - `twitter`\n     * - `web-search`\n     *\n     * *Android Only*\n     *\n     * The following values work on Android only:\n     *\n     * - `visible-password`\n     */\n    keyboardType: PropTypes.oneOf([\n      // Cross-platform\n      'default',\n      'email-address',\n      'numeric',\n      'phone-pad',\n      'number-pad',\n      // iOS-only\n      'ascii-capable',\n      'numbers-and-punctuation',\n      'url',\n      'name-phone-pad',\n      'decimal-pad',\n      'twitter',\n      'web-search',\n      // Android-only\n      'visible-password',\n    ]),\n    /**\n     * Determines the color of the keyboard.\n     * @platform ios\n     */\n    keyboardAppearance: PropTypes.oneOf(['default', 'light', 'dark']),\n    /**\n     * Determines how the return key should look. On Android you can also use\n     * `returnKeyLabel`.\n     *\n     * *Cross platform*\n     *\n     * The following values work across platforms:\n     *\n     * - `done`\n     * - `go`\n     * - `next`\n     * - `search`\n     * - `send`\n     *\n     * *Android Only*\n     *\n     * The following values work on Android only:\n     *\n     * - `none`\n     * - `previous`\n     *\n     * *iOS Only*\n     *\n     * The following values work on iOS only:\n     *\n     * - `default`\n     * - `emergency-call`\n     * - `google`\n     * - `join`\n     * - `route`\n     * - `yahoo`\n     */\n    returnKeyType: PropTypes.oneOf([\n      // Cross-platform\n      'done',\n      'go',\n      'next',\n      'search',\n      'send',\n      // Android-only\n      'none',\n      'previous',\n      // iOS-only\n      'default',\n      'emergency-call',\n      'google',\n      'join',\n      'route',\n      'yahoo',\n    ]),\n    /**\n     * Sets the return key to the label. Use it instead of `returnKeyType`.\n     * @platform android\n     */\n    returnKeyLabel: PropTypes.string,\n    /**\n     * Limits the maximum number of characters that can be entered. Use this\n     * instead of implementing the logic in JS to avoid flicker.\n     */\n    maxLength: PropTypes.number,\n    /**\n     * Sets the number of lines for a `TextInput`. Use it with multiline set to\n     * `true` to be able to fill the lines.\n     * @platform android\n     */\n    numberOfLines: PropTypes.number,\n    /**\n     * When `false`, if there is a small amount of space available around a text input\n     * (e.g. landscape orientation on a phone), the OS may choose to have the user edit\n     * the text inside of a full screen text input mode. When `true`, this feature is\n     * disabled and users will always edit the text directly inside of the text input.\n     * Defaults to `false`.\n     * @platform android\n     */\n    disableFullscreenUI: PropTypes.bool,\n    /**\n     * If `true`, the keyboard disables the return key when there is no text and\n     * automatically enables it when there is text. The default value is `false`.\n     * @platform ios\n     */\n    enablesReturnKeyAutomatically: PropTypes.bool,\n    /**\n     * If `true`, the text input can be multiple lines.\n     * The default value is `false`.\n     */\n    multiline: PropTypes.bool,\n    /**\n     * Set text break strategy on Android API Level 23+, possible values are `simple`, `highQuality`, `balanced`\n     * The default value is `simple`.\n     * @platform android\n     */\n    textBreakStrategy: PropTypes.oneOf(['simple', 'highQuality', 'balanced']),\n    /**\n     * Callback that is called when the text input is blurred.\n     */\n    onBlur: PropTypes.func,\n    /**\n     * Callback that is called when the text input is focused.\n     */\n    onFocus: PropTypes.func,\n    /**\n     * Callback that is called when the text input's text changes.\n     */\n    onChange: PropTypes.func,\n    /**\n     * Callback that is called when the text input's text changes.\n     * Changed text is passed as an argument to the callback handler.\n     */\n    onChangeText: PropTypes.func,\n    /**\n     * Callback that is called when the text input's content size changes.\n     * This will be called with\n     * `{ nativeEvent: { contentSize: { width, height } } }`.\n     *\n     * Only called for multiline text inputs.\n     */\n    onContentSizeChange: PropTypes.func,\n    onTextInput: PropTypes.func,\n    /**\n     * Callback that is called when text input ends.\n     */\n    onEndEditing: PropTypes.func,\n    /**\n     * Callback that is called when the text input selection is changed.\n     * This will be called with\n     * `{ nativeEvent: { selection: { start, end } } }`.\n     */\n    onSelectionChange: PropTypes.func,\n    /**\n     * Callback that is called when the text input's submit button is pressed.\n     * Invalid if `multiline={true}` is specified.\n     */\n    onSubmitEditing: PropTypes.func,\n    /**\n     * Callback that is called when a key is pressed.\n     * This will be called with `{ nativeEvent: { key: keyValue } }`\n     * where `keyValue` is `'Enter'` or `'Backspace'` for respective keys and\n     * the typed-in character otherwise including `' '` for space.\n     * Fires before `onChange` callbacks.\n     */\n    onKeyPress: PropTypes.func,\n    /**\n     * Invoked on mount and layout changes with `{x, y, width, height}`.\n     */\n    onLayout: PropTypes.func,\n    /**\n     * Invoked on content scroll with `{ nativeEvent: { contentOffset: { x, y } } }`.\n     * May also contain other properties from ScrollEvent but on Android contentSize\n     * is not provided for performance reasons.\n     */\n    onScroll: PropTypes.func,\n    /**\n     * The string that will be rendered before text input has been entered.\n     */\n    placeholder: PropTypes.string,\n    /**\n     * The text color of the placeholder string.\n     */\n    placeholderTextColor: ColorPropType,\n    /**\n     * If `false`, scrolling of the text view will be disabled.\n     * The default value is `true`. Does only work with 'multiline={true}'.\n     * @platform ios\n     */\n    scrollEnabled: PropTypes.bool,\n    /**\n     * If `true`, the text input obscures the text entered so that sensitive text\n     * like passwords stay secure. The default value is `false`. Does not work with 'multiline={true}'.\n     */\n    secureTextEntry: PropTypes.bool,\n    /**\n     * The highlight and cursor color of the text input.\n     */\n    selectionColor: ColorPropType,\n    /**\n     * An instance of `DocumentSelectionState`, this is some state that is responsible for\n     * maintaining selection information for a document.\n     *\n     * Some functionality that can be performed with this instance is:\n     *\n     * - `blur()`\n     * - `focus()`\n     * - `update()`\n     *\n     * > You can reference `DocumentSelectionState` in\n     * > [`vendor/document/selection/DocumentSelectionState.js`](https://github.com/facebook/react-native/blob/master/Libraries/vendor/document/selection/DocumentSelectionState.js)\n     *\n     * @platform ios\n     */\n    selectionState: PropTypes.instanceOf(DocumentSelectionState),\n    /**\n     * The start and end of the text input's selection. Set start and end to\n     * the same value to position the cursor.\n     */\n    selection: PropTypes.shape({\n      start: PropTypes.number.isRequired,\n      end: PropTypes.number,\n    }),\n    /**\n     * The value to show for the text input. `TextInput` is a controlled\n     * component, which means the native value will be forced to match this\n     * value prop if provided. For most uses, this works great, but in some\n     * cases this may cause flickering - one common cause is preventing edits\n     * by keeping value the same. In addition to simply setting the same value,\n     * either set `editable={false}`, or set/update `maxLength` to prevent\n     * unwanted edits without flicker.\n     */\n    value: PropTypes.string,\n    /**\n     * Provides an initial value that will change when the user starts typing.\n     * Useful for simple use-cases where you do not want to deal with listening\n     * to events and updating the value prop to keep the controlled state in sync.\n     */\n    defaultValue: PropTypes.string,\n    /**\n     * When the clear button should appear on the right side of the text view.\n     * This property is supported only for single-line TextInput component.\n     * @platform ios\n     */\n    clearButtonMode: PropTypes.oneOf([\n      'never',\n      'while-editing',\n      'unless-editing',\n      'always',\n    ]),\n    /**\n     * If `true`, clears the text field automatically when editing begins.\n     * @platform ios\n     */\n    clearTextOnFocus: PropTypes.bool,\n    /**\n     * If `true`, all text will automatically be selected on focus.\n     */\n    selectTextOnFocus: PropTypes.bool,\n    /**\n     * If `true`, the text field will blur when submitted.\n     * The default value is true for single-line fields and false for\n     * multiline fields. Note that for multiline fields, setting `blurOnSubmit`\n     * to `true` means that pressing return will blur the field and trigger the\n     * `onSubmitEditing` event instead of inserting a newline into the field.\n     */\n    blurOnSubmit: PropTypes.bool,\n    /**\n     * Note that not all Text styles are supported, an incomplete list of what is not supported includes:\n     *\n     * - `borderLeftWidth`\n     * - `borderTopWidth`\n     * - `borderRightWidth`\n     * - `borderBottomWidth`\n     * - `borderTopLeftRadius`\n     * - `borderTopRightRadius`\n     * - `borderBottomRightRadius`\n     * - `borderBottomLeftRadius`\n     *\n     * see [Issue#7070](https://github.com/facebook/react-native/issues/7070)\n     * for more detail.\n     *\n     * [Styles](docs/style.html)\n     */\n    style: Text.propTypes.style,\n    /**\n     * The color of the `TextInput` underline.\n     * @platform android\n     */\n    underlineColorAndroid: ColorPropType,\n\n    /**\n     * If defined, the provided image resource will be rendered on the left.\n     * The image resource must be inside `/android/app/src/main/res/drawable` and referenced\n     * like\n     * ```\n     * <TextInput\n     *  inlineImageLeft='search_icon'\n     * />\n     * ```\n     * @platform android\n     */\n    inlineImageLeft: PropTypes.string,\n\n    /**\n     * Padding between the inline image, if any, and the text input itself.\n     * @platform android\n     */\n    inlineImagePadding: PropTypes.number,\n\n    /**\n     * Determines the types of data converted to clickable URLs in the text input.\n     * Only valid if `multiline={true}` and `editable={false}`.\n     * By default no data types are detected.\n     *\n     * You can provide one type or an array of many types.\n     *\n     * Possible values for `dataDetectorTypes` are:\n     *\n     * - `'phoneNumber'`\n     * - `'link'`\n     * - `'address'`\n     * - `'calendarEvent'`\n     * - `'none'`\n     * - `'all'`\n     *\n     * @platform ios\n     */\n    dataDetectorTypes: PropTypes.oneOfType([\n      PropTypes.oneOf(DataDetectorTypes),\n      PropTypes.arrayOf(PropTypes.oneOf(DataDetectorTypes)),\n    ]),\n    /**\n     * If `true`, caret is hidden. The default value is `false`.\n     * This property is supported only for single-line TextInput component on iOS.\n     */\n    caretHidden: PropTypes.bool,\n    /*\n     * If `true`, contextMenuHidden is hidden. The default value is `false`.\n     */\n    contextMenuHidden: PropTypes.bool,\n    /**\n     * An optional identifier which links a custom InputAccessoryView to\n     * this text input. The InputAccessoryView is rendered above the\n     * keyboard when this text input is focused.\n     * @platform ios\n     */\n    inputAccessoryViewID: PropTypes.string,\n    /**\n     * Give the keyboard and the system information about the\n     * expected semantic meaning for the content that users enter.\n     * @platform ios\n     */\n    textContentType: PropTypes.oneOf([\n      'none',\n      'URL',\n      'addressCity',\n      'addressCityAndState',\n      'addressState',\n      'countryName',\n      'creditCardNumber',\n      'emailAddress',\n      'familyName',\n      'fullStreetAddress',\n      'givenName',\n      'jobTitle',\n      'location',\n      'middleName',\n      'name',\n      'namePrefix',\n      'nameSuffix',\n      'nickname',\n      'organizationName',\n      'postalCode',\n      'streetAddressLine1',\n      'streetAddressLine2',\n      'sublocality',\n      'telephoneNumber',\n      'username',\n      'password',\n    ]),\n  },\n  getDefaultProps(): Object {\n    return {\n      allowFontScaling: true,\n      underlineColorAndroid: 'transparent',\n    };\n  },\n  /**\n   * `NativeMethodsMixin` will look for this when invoking `setNativeProps`. We\n   * make `this` look like an actual native component class.\n   */\n  mixins: [NativeMethodsMixin, TimerMixin],\n\n  /**\n   * Returns `true` if the input is currently focused; `false` otherwise.\n   */\n  isFocused: function(): boolean {\n    return (\n      TextInputState.currentlyFocusedField() ===\n      ReactNative.findNodeHandle(this._inputRef)\n    );\n  },\n\n  _inputRef: (undefined: any),\n  _focusSubscription: (undefined: ?Function),\n  _lastNativeText: (undefined: ?string),\n  _lastNativeSelection: (undefined: ?Selection),\n\n  componentDidMount: function() {\n    this._lastNativeText = this.props.value;\n    const tag = ReactNative.findNodeHandle(this._inputRef);\n    if (tag != null) {\n      // tag is null only in unit tests\n      TextInputState.registerInput(tag);\n    }\n\n    if (this.context.focusEmitter) {\n      this._focusSubscription = this.context.focusEmitter.addListener(\n        'focus',\n        el => {\n          if (this === el) {\n            this.requestAnimationFrame(this.focus);\n          } else if (this.isFocused()) {\n            this.blur();\n          }\n        },\n      );\n      if (this.props.autoFocus) {\n        this.context.onFocusRequested(this);\n      }\n    } else {\n      if (this.props.autoFocus) {\n        this.requestAnimationFrame(this.focus);\n      }\n    }\n  },\n\n  componentWillUnmount: function() {\n    this._focusSubscription && this._focusSubscription.remove();\n    if (this.isFocused()) {\n      this.blur();\n    }\n    const tag = ReactNative.findNodeHandle(this._inputRef);\n    if (tag != null) {\n      TextInputState.unregisterInput(tag);\n    }\n  },\n\n  contextTypes: {\n    onFocusRequested: PropTypes.func,\n    focusEmitter: PropTypes.instanceOf(EventEmitter),\n  },\n\n  /**\n   * Removes all text from the `TextInput`.\n   */\n  clear: function() {\n    this.setNativeProps({text: ''});\n  },\n\n  render: function() {\n    let textInput;\n    if (Platform.OS === 'ios') {\n      textInput = UIManager.RCTVirtualText\n        ? this._renderIOS()\n        : this._renderIOSLegacy();\n    } else if (Platform.OS === 'android') {\n      textInput = this._renderAndroid();\n    }\n    return (\n      <TextAncestor.Provider value={true}>{textInput}</TextAncestor.Provider>\n    );\n  },\n\n  _getText: function(): ?string {\n    return typeof this.props.value === 'string'\n      ? this.props.value\n      : typeof this.props.defaultValue === 'string'\n        ? this.props.defaultValue\n        : '';\n  },\n\n  _setNativeRef: function(ref: any) {\n    this._inputRef = ref;\n  },\n\n  _renderIOSLegacy: function() {\n    let textContainer;\n\n    const props = Object.assign({}, this.props);\n    props.style = [this.props.style];\n\n    if (props.selection && props.selection.end == null) {\n      props.selection = {\n        start: props.selection.start,\n        end: props.selection.start,\n      };\n    }\n\n    if (!props.multiline) {\n      if (__DEV__) {\n        for (const propKey in onlyMultiline) {\n          if (props[propKey]) {\n            const error = new Error(\n              'TextInput prop `' +\n                propKey +\n                '` is only supported with multiline.',\n            );\n            warning(false, '%s', error.stack);\n          }\n        }\n      }\n      textContainer = (\n        <RCTSinglelineTextInputView\n          ref={this._setNativeRef}\n          {...props}\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}\n          onChange={this._onChange}\n          onSelectionChange={this._onSelectionChange}\n          onSelectionChangeShouldSetResponder={emptyFunction.thatReturnsTrue}\n          text={this._getText()}\n        />\n      );\n    } else {\n      let children = props.children;\n      let childCount = 0;\n      React.Children.forEach(children, () => ++childCount);\n      invariant(\n        !(props.value && childCount),\n        'Cannot specify both value and children.',\n      );\n      if (childCount >= 1) {\n        children = (\n          <Text style={props.style} allowFontScaling={props.allowFontScaling}>\n            {children}\n          </Text>\n        );\n      }\n      if (props.inputView) {\n        children = [children, props.inputView];\n      }\n      props.style.unshift(styles.multilineInput);\n      textContainer = (\n        <RCTMultilineTextInputView\n          ref={this._setNativeRef}\n          {...props}\n          children={children}\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}\n          onChange={this._onChange}\n          onContentSizeChange={this.props.onContentSizeChange}\n          onSelectionChange={this._onSelectionChange}\n          onTextInput={this._onTextInput}\n          onSelectionChangeShouldSetResponder={emptyFunction.thatReturnsTrue}\n          text={this._getText()}\n          dataDetectorTypes={this.props.dataDetectorTypes}\n          onScroll={this._onScroll}\n        />\n      );\n    }\n\n    return (\n      <TouchableWithoutFeedback\n        onLayout={props.onLayout}\n        onPress={this._onPress}\n        rejectResponderTermination={true}\n        accessible={props.accessible}\n        accessibilityLabel={props.accessibilityLabel}\n        accessibilityRole={props.accessibilityRole}\n        accessibilityStates={props.accessibilityStates}\n        nativeID={this.props.nativeID}\n        testID={props.testID}>\n        {textContainer}\n      </TouchableWithoutFeedback>\n    );\n  },\n\n  _renderIOS: function() {\n    const props = Object.assign({}, this.props);\n    props.style = [this.props.style];\n\n    if (props.selection && props.selection.end == null) {\n      props.selection = {\n        start: props.selection.start,\n        end: props.selection.start,\n      };\n    }\n\n    const RCTTextInputView = props.multiline\n      ? RCTMultilineTextInputView\n      : RCTSinglelineTextInputView;\n\n    if (props.multiline) {\n      props.style.unshift(styles.multilineInput);\n    }\n\n    const textContainer = (\n      <RCTTextInputView\n        ref={this._setNativeRef}\n        {...props}\n        onFocus={this._onFocus}\n        onBlur={this._onBlur}\n        onChange={this._onChange}\n        onContentSizeChange={this.props.onContentSizeChange}\n        onSelectionChange={this._onSelectionChange}\n        onTextInput={this._onTextInput}\n        onSelectionChangeShouldSetResponder={emptyFunction.thatReturnsTrue}\n        text={this._getText()}\n        dataDetectorTypes={this.props.dataDetectorTypes}\n        onScroll={this._onScroll}\n      />\n    );\n\n    return (\n      <TouchableWithoutFeedback\n        onLayout={props.onLayout}\n        onPress={this._onPress}\n        rejectResponderTermination={true}\n        accessible={props.accessible}\n        accessibilityLabel={props.accessibilityLabel}\n        accessibilityRole={props.accessibilityRole}\n        accessibilityStates={props.accessibilityStates}\n        nativeID={this.props.nativeID}\n        testID={props.testID}>\n        {textContainer}\n      </TouchableWithoutFeedback>\n    );\n  },\n\n  _renderAndroid: function() {\n    const props = Object.assign({}, this.props);\n    props.style = [this.props.style];\n    props.autoCapitalize =\n      UIManager.AndroidTextInput.Constants.AutoCapitalizationType[\n        props.autoCapitalize || 'sentences'\n      ];\n    /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss) This comment\n     * suppresses an error when upgrading Flow's support for React. To see the\n     * error delete this comment and run Flow. */\n    let children = this.props.children;\n    let childCount = 0;\n    React.Children.forEach(children, () => ++childCount);\n    invariant(\n      !(this.props.value && childCount),\n      'Cannot specify both value and children.',\n    );\n    if (childCount > 1) {\n      children = <Text>{children}</Text>;\n    }\n\n    if (props.selection && props.selection.end == null) {\n      props.selection = {\n        start: props.selection.start,\n        end: props.selection.start,\n      };\n    }\n\n    const textContainer = (\n      <AndroidTextInput\n        ref={this._setNativeRef}\n        {...props}\n        mostRecentEventCount={0}\n        onFocus={this._onFocus}\n        onBlur={this._onBlur}\n        onChange={this._onChange}\n        onSelectionChange={this._onSelectionChange}\n        onTextInput={this._onTextInput}\n        text={this._getText()}\n        children={children}\n        disableFullscreenUI={this.props.disableFullscreenUI}\n        textBreakStrategy={this.props.textBreakStrategy}\n        onScroll={this._onScroll}\n      />\n    );\n\n    return (\n      <TouchableWithoutFeedback\n        onLayout={props.onLayout}\n        onPress={this._onPress}\n        accessible={this.props.accessible}\n        accessibilityLabel={this.props.accessibilityLabel}\n        accessibilityRole={this.props.accessibilityRole}\n        accessibilityStates={this.props.accessibilityStates}\n        nativeID={this.props.nativeID}\n        testID={this.props.testID}>\n        {textContainer}\n      </TouchableWithoutFeedback>\n    );\n  },\n\n  _onFocus: function(event: Event) {\n    if (this.props.onFocus) {\n      this.props.onFocus(event);\n    }\n\n    if (this.props.selectionState) {\n      this.props.selectionState.focus();\n    }\n  },\n\n  _onPress: function(event: Event) {\n    if (this.props.editable || this.props.editable === undefined) {\n      this.focus();\n    }\n  },\n\n  _onChange: function(event: Event) {\n    // Make sure to fire the mostRecentEventCount first so it is already set on\n    // native when the text value is set.\n    if (this._inputRef) {\n      this._inputRef.setNativeProps({\n        mostRecentEventCount: event.nativeEvent.eventCount,\n      });\n    }\n\n    const text = event.nativeEvent.text;\n    this.props.onChange && this.props.onChange(event);\n    this.props.onChangeText && this.props.onChangeText(text);\n\n    if (!this._inputRef) {\n      // calling `this.props.onChange` or `this.props.onChangeText`\n      // may clean up the input itself. Exits here.\n      return;\n    }\n\n    this._lastNativeText = text;\n    this.forceUpdate();\n  },\n\n  _onSelectionChange: function(event: Event) {\n    this.props.onSelectionChange && this.props.onSelectionChange(event);\n\n    if (!this._inputRef) {\n      // calling `this.props.onSelectionChange`\n      // may clean up the input itself. Exits here.\n      return;\n    }\n\n    this._lastNativeSelection = event.nativeEvent.selection;\n\n    if (this.props.selection || this.props.selectionState) {\n      this.forceUpdate();\n    }\n  },\n\n  componentDidUpdate: function() {\n    // This is necessary in case native updates the text and JS decides\n    // that the update should be ignored and we should stick with the value\n    // that we have in JS.\n    const nativeProps = {};\n\n    if (\n      this._lastNativeText !== this.props.value &&\n      typeof this.props.value === 'string'\n    ) {\n      nativeProps.text = this.props.value;\n    }\n\n    // Selection is also a controlled prop, if the native value doesn't match\n    // JS, update to the JS value.\n    const {selection} = this.props;\n    if (\n      this._lastNativeSelection &&\n      selection &&\n      (this._lastNativeSelection.start !== selection.start ||\n        this._lastNativeSelection.end !== selection.end)\n    ) {\n      nativeProps.selection = this.props.selection;\n    }\n\n    if (Object.keys(nativeProps).length > 0 && this._inputRef) {\n      this._inputRef.setNativeProps(nativeProps);\n    }\n\n    if (this.props.selectionState && selection) {\n      this.props.selectionState.update(selection.start, selection.end);\n    }\n  },\n\n  _onBlur: function(event: Event) {\n    this.blur();\n    if (this.props.onBlur) {\n      this.props.onBlur(event);\n    }\n\n    if (this.props.selectionState) {\n      this.props.selectionState.blur();\n    }\n  },\n\n  _onTextInput: function(event: Event) {\n    this.props.onTextInput && this.props.onTextInput(event);\n  },\n\n  _onScroll: function(event: Event) {\n    this.props.onScroll && this.props.onScroll(event);\n  },\n});\n\nclass InternalTextInputType extends ReactNative.NativeComponent<Props> {\n  clear() {}\n\n  // $FlowFixMe\n  isFocused(): boolean {}\n}\n\nconst TypedTextInput = ((TextInput: any): Class<InternalTextInputType>);\n\nconst styles = StyleSheet.create({\n  multilineInput: {\n    // This default top inset makes RCTMultilineTextInputView seem as close as possible\n    // to single-line RCTSinglelineTextInputView defaults, using the system defaults\n    // of font size 17 and a height of 31 points.\n    paddingTop: 5,\n  },\n});\n\nmodule.exports = TypedTextInput;\n"]}]}