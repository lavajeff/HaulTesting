{"remainingRequest":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js??ref--5-2!/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Utilities/HMRClient.js","dependencies":[{"path":"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Utilities/HMRClient.js","mtime":1539700108130},{"path":"/Users/jeffrey/HaulTesting/node_modules/cache-loader/dist/cjs.js","mtime":1539652983212},{"path":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js","mtime":1539652983315},{"path":"/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js","mtime":1539615827828}],"contextDependencies":[],"result":["'use strict';(function(){var enterModule=require('react-hot-loader').enterModule;enterModule&&enterModule(module);})();var Platform=require('Platform');var invariant=require('fbjs/lib/invariant');var MetroHMRClient=require('metro/src/lib/bundle-modules/HMRClient');var HMRClient={enable:function enable(platform,bundleEntry,host,port){invariant(platform,'Missing required parameter `platform`');invariant(bundleEntry,'Missing required paramenter `bundleEntry`');invariant(host,'Missing required paramenter `host`');var HMRLoadingView=require('HMRLoadingView');var wsHostPort=port!==null&&port!==''?host+\":\"+port:host;bundleEntry=bundleEntry.replace(/\\.(bundle|delta)/,'.js');var wsUrl=\"ws://\"+wsHostPort+\"/hot?\"+(\"platform=\"+platform+\"&\")+(\"bundleEntry=\"+bundleEntry);var hmrClient=new MetroHMRClient(wsUrl);hmrClient.on('connection-error',function(e){var error=\"Hot loading isn't working because it cannot connect to the development server.\\n\\nTry the following to fix the issue:\\n- Ensure that the packager server is running and available on the same network\";if(Platform.OS==='ios'){error+=\"\\n- Ensure that the Packager server URL is correctly set in AppDelegate\";}else{error+=\"\\n- Ensure that your device/emulator is connected to your machine and has USB debugging enabled - run 'adb devices' to see a list of connected devices\\n- If you're on a physical device connected to the same machine, run 'adb reverse tcp:8081 tcp:8081' to forward requests from your device\\n- If your device is on the same Wi-Fi network, set 'Debug server host & port for device' in 'Dev settings' to your machine's IP address and the port of the local dev server - e.g. 10.0.1.1:8081\";}error+=\"\\n\\nURL: \"+host+\":\"+port+\"\\n\\nError: \"+e.message;throw new Error(error);});hmrClient.on('update-start',function(){HMRLoadingView.showMessage('Hot Loading...');});hmrClient.on('update',function(){if(Platform.OS==='ios'){var RCTRedBox=require('NativeModules').RedBox;RCTRedBox&&RCTRedBox.dismiss&&RCTRedBox.dismiss();}else{var RCTExceptionsManager=require('NativeModules').ExceptionsManager;RCTExceptionsManager&&RCTExceptionsManager.dismissRedbox&&RCTExceptionsManager.dismissRedbox();}});hmrClient.on('update-done',function(){HMRLoadingView.hide();});hmrClient.on('error',function(data){HMRLoadingView.hide();throw new Error(data.type+\" \"+data.message);});hmrClient.enable();}};module.exports=HMRClient;;(function(){var reactHotLoader=require('react-hot-loader').default;var leaveModule=require('react-hot-loader').leaveModule;if(!reactHotLoader){return;}reactHotLoader.register(HMRClient,\"HMRClient\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Utilities/HMRClient.js\");leaveModule(module);})();;",{"version":3,"sources":["/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Utilities/HMRClient.js"],"names":["Platform","require","invariant","MetroHMRClient","HMRClient","enable","platform","bundleEntry","host","port","HMRLoadingView","wsHostPort","replace","wsUrl","hmrClient","on","e","error","OS","message","Error","showMessage","RCTRedBox","RedBox","dismiss","RCTExceptionsManager","ExceptionsManager","dismissRedbox","hide","data","type","module","exports"],"mappings":"AASA,a,0GAEA,GAAMA,CAAAA,QAAQ,CAAGC,OAAO,CAAC,UAAD,CAAxB,CACA,GAAMC,CAAAA,SAAS,CAAGD,OAAO,CAAC,oBAAD,CAAzB,CAEA,GAAME,CAAAA,cAAc,CAAGF,OAAO,CAAC,wCAAD,CAA9B,CAMA,GAAMG,CAAAA,SAAS,CAAG,CAChBC,MADgB,iBACTC,QADS,CACSC,WADT,CAC8BC,IAD9B,CAC4CC,IAD5C,CAC0D,CACxEP,SAAS,CAACI,QAAD,CAAW,uCAAX,CAAT,CACAJ,SAAS,CAACK,WAAD,CAAc,2CAAd,CAAT,CACAL,SAAS,CAACM,IAAD,CAAO,oCAAP,CAAT,CAGA,GAAME,CAAAA,cAAc,CAAGT,OAAO,CAAC,gBAAD,CAA9B,CAEA,GAAMU,CAAAA,UAAU,CAAGF,IAAI,GAAK,IAAT,EAAiBA,IAAI,GAAK,EAA1B,CAAkCD,IAAlC,KAA0CC,IAA1C,CAAmDD,IAAtE,CAEAD,WAAW,CAAGA,WAAW,CAACK,OAAZ,CAAoB,kBAApB,CAAwC,KAAxC,CAAd,CAGA,GAAMC,CAAAA,KAAK,CACT,QAAQF,UAAR,sBACYL,QADZ,sBAEeC,WAFf,CADF,CAKA,GAAMO,CAAAA,SAAS,CAAG,GAAIX,CAAAA,cAAJ,CAAmBU,KAAnB,CAAlB,CAEAC,SAAS,CAACC,EAAV,CAAa,kBAAb,CAAiC,SAAAC,CAAC,CAAI,CACpC,GAAIC,CAAAA,KAAK,wMAAT,CAKA,GAAIjB,QAAQ,CAACkB,EAAT,GAAgB,KAApB,CAA2B,CACzBD,KAAK,2EAAL,CAED,CAHD,IAGO,CACLA,KAAK,ueAAL,CAID,CAEDA,KAAK,cAEJT,IAFI,KAEIC,IAFJ,eAIFO,CAAC,CAACG,OAJL,CAMA,KAAM,IAAIC,CAAAA,KAAJ,CAAUH,KAAV,CAAN,CACD,CAvBD,EAyBAH,SAAS,CAACC,EAAV,CAAa,cAAb,CAA6B,UAAM,CACjCL,cAAc,CAACW,WAAf,CAA2B,gBAA3B,EACD,CAFD,EAIAP,SAAS,CAACC,EAAV,CAAa,QAAb,CAAuB,UAAM,CAC3B,GAAIf,QAAQ,CAACkB,EAAT,GAAgB,KAApB,CAA2B,CACzB,GAAMI,CAAAA,SAAS,CAAGrB,OAAO,CAAC,eAAD,CAAP,CAAyBsB,MAA3C,CACAD,SAAS,EAAIA,SAAS,CAACE,OAAvB,EAAkCF,SAAS,CAACE,OAAV,EAAlC,CACD,CAHD,IAGO,CACL,GAAMC,CAAAA,oBAAoB,CAAGxB,OAAO,CAAC,eAAD,CAAP,CAAyByB,iBAAtD,CACAD,oBAAoB,EAClBA,oBAAoB,CAACE,aADvB,EAEEF,oBAAoB,CAACE,aAArB,EAFF,CAGD,CACF,CAVD,EAYAb,SAAS,CAACC,EAAV,CAAa,aAAb,CAA4B,UAAM,CAChCL,cAAc,CAACkB,IAAf,GACD,CAFD,EAIAd,SAAS,CAACC,EAAV,CAAa,OAAb,CAAsB,SAAAc,IAAI,CAAI,CAC5BnB,cAAc,CAACkB,IAAf,GACA,KAAM,IAAIR,CAAAA,KAAJ,CAAaS,IAAI,CAACC,IAAlB,KAA0BD,IAAI,CAACV,OAA/B,CAAN,CACD,CAHD,EAKAL,SAAS,CAACT,MAAV,GACD,CAxEe,CAAlB,CA2EA0B,MAAM,CAACC,OAAP,CAAiB5B,SAAjB,C,gLA3EMA,S","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n'use strict';\n\nconst Platform = require('Platform');\nconst invariant = require('fbjs/lib/invariant');\n\nconst MetroHMRClient = require('metro/src/lib/bundle-modules/HMRClient');\n\n/**\n * HMR Client that receives from the server HMR updates and propagates them\n * runtime to reflects those changes.\n */\nconst HMRClient = {\n  enable(platform: string, bundleEntry: string, host: string, port: number) {\n    invariant(platform, 'Missing required parameter `platform`');\n    invariant(bundleEntry, 'Missing required paramenter `bundleEntry`');\n    invariant(host, 'Missing required paramenter `host`');\n\n    // Moving to top gives errors due to NativeModules not being initialized\n    const HMRLoadingView = require('HMRLoadingView');\n\n    const wsHostPort = port !== null && port !== '' ? `${host}:${port}` : host;\n\n    bundleEntry = bundleEntry.replace(/\\.(bundle|delta)/, '.js');\n\n    // Build the websocket url\n    const wsUrl =\n      `ws://${wsHostPort}/hot?` +\n      `platform=${platform}&` +\n      `bundleEntry=${bundleEntry}`;\n\n    const hmrClient = new MetroHMRClient(wsUrl);\n\n    hmrClient.on('connection-error', e => {\n      let error = `Hot loading isn't working because it cannot connect to the development server.\n\nTry the following to fix the issue:\n- Ensure that the packager server is running and available on the same network`;\n\n      if (Platform.OS === 'ios') {\n        error += `\n- Ensure that the Packager server URL is correctly set in AppDelegate`;\n      } else {\n        error += `\n- Ensure that your device/emulator is connected to your machine and has USB debugging enabled - run 'adb devices' to see a list of connected devices\n- If you're on a physical device connected to the same machine, run 'adb reverse tcp:8081 tcp:8081' to forward requests from your device\n- If your device is on the same Wi-Fi network, set 'Debug server host & port for device' in 'Dev settings' to your machine's IP address and the port of the local dev server - e.g. 10.0.1.1:8081`;\n      }\n\n      error += `\n\nURL: ${host}:${port}\n\nError: ${e.message}`;\n\n      throw new Error(error);\n    });\n\n    hmrClient.on('update-start', () => {\n      HMRLoadingView.showMessage('Hot Loading...');\n    });\n\n    hmrClient.on('update', () => {\n      if (Platform.OS === 'ios') {\n        const RCTRedBox = require('NativeModules').RedBox;\n        RCTRedBox && RCTRedBox.dismiss && RCTRedBox.dismiss();\n      } else {\n        const RCTExceptionsManager = require('NativeModules').ExceptionsManager;\n        RCTExceptionsManager &&\n          RCTExceptionsManager.dismissRedbox &&\n          RCTExceptionsManager.dismissRedbox();\n      }\n    });\n\n    hmrClient.on('update-done', () => {\n      HMRLoadingView.hide();\n    });\n\n    hmrClient.on('error', data => {\n      HMRLoadingView.hide();\n      throw new Error(`${data.type} ${data.message}`);\n    });\n\n    hmrClient.enable();\n  },\n};\n\nmodule.exports = HMRClient;\n"]}]}