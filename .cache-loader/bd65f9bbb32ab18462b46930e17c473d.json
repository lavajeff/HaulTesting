{"remainingRequest":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js??ref--5-2!/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Utilities/BackHandler.ios.js","dependencies":[{"path":"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Utilities/BackHandler.ios.js","mtime":1539700108130},{"path":"/Users/jeffrey/HaulTesting/node_modules/cache-loader/dist/cjs.js","mtime":1539652983212},{"path":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js","mtime":1539652983315},{"path":"/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js","mtime":1539615827828}],"contextDependencies":[],"result":["'use strict';(function(){var enterModule=require('react-hot-loader').enterModule;enterModule&&enterModule(module);})();var Platform=require('Platform');var TVEventHandler=require('TVEventHandler');function emptyFunction(){}var BackHandler;if(Platform.isTV){var _tvEventHandler=new TVEventHandler();var _backPressSubscriptions=new Set();_tvEventHandler.enable(this,function(cmp,evt){if(evt&&evt.eventType==='menu'){var invokeDefault=true;var subscriptions=Array.from(_backPressSubscriptions.values()).reverse();for(var i=0;i<subscriptions.length;++i){if(subscriptions[i]()){invokeDefault=false;break;}}if(invokeDefault){BackHandler.exitApp();}}});BackHandler={exitApp:emptyFunction,addEventListener:function addEventListener(eventName,handler){_backPressSubscriptions.add(handler);return{remove:function remove(){return BackHandler.removeEventListener(eventName,handler);}};},removeEventListener:function removeEventListener(eventName,handler){_backPressSubscriptions.delete(handler);}};}else{BackHandler={exitApp:emptyFunction,addEventListener:function addEventListener(){return{remove:emptyFunction};},removeEventListener:emptyFunction};}module.exports=BackHandler;;(function(){var reactHotLoader=require('react-hot-loader').default;var leaveModule=require('react-hot-loader').leaveModule;if(!reactHotLoader){return;}reactHotLoader.register(emptyFunction,\"emptyFunction\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Utilities/BackHandler.ios.js\");reactHotLoader.register(BackHandler,\"BackHandler\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Utilities/BackHandler.ios.js\");leaveModule(module);})();;",{"version":3,"sources":["/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Utilities/BackHandler.ios.js"],"names":["Platform","require","TVEventHandler","emptyFunction","BackHandler","isTV","_tvEventHandler","_backPressSubscriptions","Set","enable","cmp","evt","eventType","invokeDefault","subscriptions","Array","from","values","reverse","i","length","exitApp","addEventListener","eventName","handler","add","remove","removeEventListener","delete","module","exports"],"mappings":"AAYA,a,0GAEA,GAAMA,CAAAA,QAAQ,CAAGC,OAAO,CAAC,UAAD,CAAxB,CACA,GAAMC,CAAAA,cAAc,CAAGD,OAAO,CAAC,gBAAD,CAA9B,CAMA,QAASE,CAAAA,aAAT,EAAyB,CAAE,CAgC3B,GAAIC,CAAAA,WAAJ,CAEA,GAAIJ,QAAQ,CAACK,IAAb,CAAmB,CACjB,GAAMC,CAAAA,eAAe,CAAG,GAAIJ,CAAAA,cAAJ,EAAxB,CACA,GAAMK,CAAAA,uBAAuB,CAAG,GAAIC,CAAAA,GAAJ,EAAhC,CAEAF,eAAe,CAACG,MAAhB,CAAuB,IAAvB,CAA6B,SAASC,GAAT,CAAcC,GAAd,CAAmB,CAC9C,GAAIA,GAAG,EAAIA,GAAG,CAACC,SAAJ,GAAkB,MAA7B,CAAqC,CACnC,GAAIC,CAAAA,aAAa,CAAG,IAApB,CACA,GAAMC,CAAAA,aAAa,CAAGC,KAAK,CAACC,IAAN,CACpBT,uBAAuB,CAACU,MAAxB,EADoB,EAEpBC,OAFoB,EAAtB,CAIA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGL,aAAa,CAACM,MAAlC,CAA0C,EAAED,CAA5C,CAA+C,CAC7C,GAAIL,aAAa,CAACK,CAAD,CAAb,EAAJ,CAAwB,CACtBN,aAAa,CAAG,KAAhB,CACA,MACD,CACF,CAED,GAAIA,aAAJ,CAAmB,CACjBT,WAAW,CAACiB,OAAZ,GACD,CACF,CACF,CAlBD,EAoBAjB,WAAW,CAAG,CACZiB,OAAO,CAAElB,aADG,CAGZmB,gBAAgB,CAAE,0BAChBC,SADgB,CAEhBC,OAFgB,CAGM,CACtBjB,uBAAuB,CAACkB,GAAxB,CAA4BD,OAA5B,EACA,MAAO,CACLE,MAAM,CAAE,wBAAMtB,CAAAA,WAAW,CAACuB,mBAAZ,CAAgCJ,SAAhC,CAA2CC,OAA3C,CAAN,EADH,CAAP,CAGD,CAXW,CAaZG,mBAAmB,CAAE,6BACnBJ,SADmB,CAEnBC,OAFmB,CAGb,CACNjB,uBAAuB,CAACqB,MAAxB,CAA+BJ,OAA/B,EACD,CAlBW,CAAd,CAoBD,CA5CD,IA4CO,CACLpB,WAAW,CAAG,CACZiB,OAAO,CAAElB,aADG,CAEZmB,gBAFY,4BAEO,CACjB,MAAO,CACLI,MAAM,CAAEvB,aADH,CAAP,CAGD,CANW,CAOZwB,mBAAmB,CAAExB,aAPT,CAAd,CASD,CAED0B,MAAM,CAACC,OAAP,CAAiB1B,WAAjB,C,gLA1FSD,a,wIAgCLC,W","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * On Apple TV, this implements back navigation using the TV remote's menu button.\n * On iOS, this just implements a stub.\n *\n * @format\n */\n\n'use strict';\n\nconst Platform = require('Platform');\nconst TVEventHandler = require('TVEventHandler');\n\ntype BackPressEventName = $Enum<{\n  backPress: string,\n}>;\n\nfunction emptyFunction() {}\n\n/**\n * Detect hardware button presses for back navigation.\n *\n * Android: Detect hardware back button presses, and programmatically invoke the default back button\n * functionality to exit the app if there are no listeners or if none of the listeners return true.\n *\n * tvOS: Detect presses of the menu button on the TV remote.  (Still to be implemented:\n * programmatically disable menu button handling\n * functionality to exit the app if there are no listeners or if none of the listeners return true.)\n *\n * iOS: Not applicable.\n *\n * The event subscriptions are called in reverse order (i.e. last registered subscription first),\n * and if one subscription returns true then subscriptions registered earlier will not be called.\n *\n * Example:\n *\n * ```javascript\n * BackHandler.addEventListener('hardwareBackPress', function() {\n *  // this.onMainScreen and this.goBack are just examples, you need to use your own implementation here\n *  // Typically you would use the navigator here to go to the last state.\n *\n *  if (!this.onMainScreen()) {\n *    this.goBack();\n *    return true;\n *  }\n *  return false;\n * });\n * ```\n */\nlet BackHandler;\n\nif (Platform.isTV) {\n  const _tvEventHandler = new TVEventHandler();\n  const _backPressSubscriptions = new Set();\n\n  _tvEventHandler.enable(this, function(cmp, evt) {\n    if (evt && evt.eventType === 'menu') {\n      let invokeDefault = true;\n      const subscriptions = Array.from(\n        _backPressSubscriptions.values(),\n      ).reverse();\n\n      for (let i = 0; i < subscriptions.length; ++i) {\n        if (subscriptions[i]()) {\n          invokeDefault = false;\n          break;\n        }\n      }\n\n      if (invokeDefault) {\n        BackHandler.exitApp();\n      }\n    }\n  });\n\n  BackHandler = {\n    exitApp: emptyFunction,\n\n    addEventListener: function(\n      eventName: BackPressEventName,\n      handler: Function,\n    ): {remove: () => void} {\n      _backPressSubscriptions.add(handler);\n      return {\n        remove: () => BackHandler.removeEventListener(eventName, handler),\n      };\n    },\n\n    removeEventListener: function(\n      eventName: BackPressEventName,\n      handler: Function,\n    ): void {\n      _backPressSubscriptions.delete(handler);\n    },\n  };\n} else {\n  BackHandler = {\n    exitApp: emptyFunction,\n    addEventListener() {\n      return {\n        remove: emptyFunction,\n      };\n    },\n    removeEventListener: emptyFunction,\n  };\n}\n\nmodule.exports = BackHandler;\n"]}]}