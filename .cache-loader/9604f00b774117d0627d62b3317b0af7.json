{"remainingRequest":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js??ref--5-2!/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Interaction/TaskQueue.js","dependencies":[{"path":"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Interaction/TaskQueue.js","mtime":1539700108130},{"path":"/Users/jeffrey/HaulTesting/node_modules/cache-loader/dist/cjs.js","mtime":1539652983212},{"path":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js","mtime":1539652983315},{"path":"/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js","mtime":1539615827828}],"contextDependencies":[],"result":["'use strict';var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _objectSpread2=_interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));(function(){var enterModule=require('react-hot-loader').enterModule;enterModule&&enterModule(module);})();var infoLog=require('infoLog');var invariant=require('fbjs/lib/invariant');var DEBUG=false;var TaskQueue=function(){function TaskQueue(_ref){var onMoreTasks=_ref.onMoreTasks;(0,_classCallCheck2.default)(this,TaskQueue);this._onMoreTasks=onMoreTasks;this._queueStack=[{tasks:[],popable:false}];}(0,_createClass2.default)(TaskQueue,[{key:\"enqueue\",value:function enqueue(task){this._getCurrentQueue().push(task);}},{key:\"enqueueTasks\",value:function enqueueTasks(tasks){var _this=this;tasks.forEach(function(task){return _this.enqueue(task);});}},{key:\"cancelTasks\",value:function cancelTasks(tasksToCancel){this._queueStack=this._queueStack.map(function(queue){return(0,_objectSpread2.default)({},queue,{tasks:queue.tasks.filter(function(task){return tasksToCancel.indexOf(task)===-1;})});}).filter(function(queue,idx){return queue.tasks.length>0||idx===0;});}},{key:\"hasTasksToProcess\",value:function hasTasksToProcess(){return this._getCurrentQueue().length>0;}},{key:\"processNext\",value:function processNext(){var queue=this._getCurrentQueue();if(queue.length){var task=queue.shift();try{if(task.gen){DEBUG&&infoLog('genPromise for task '+task.name);this._genPromise(task);}else if(task.run){DEBUG&&infoLog('run task '+task.name);task.run();}else{invariant(typeof task==='function','Expected Function, SimpleTask, or PromiseTask, but got:\\n'+JSON.stringify(task,null,2));DEBUG&&infoLog('run anonymous task');task();}}catch(e){e.message='TaskQueue: Error with task '+(task.name||'')+': '+e.message;throw e;}}}},{key:\"_getCurrentQueue\",value:function _getCurrentQueue(){var stackIdx=this._queueStack.length-1;var queue=this._queueStack[stackIdx];if(queue.popable&&queue.tasks.length===0&&this._queueStack.length>1){this._queueStack.pop();DEBUG&&infoLog('popped queue: ',{stackIdx:stackIdx,queueStackSize:this._queueStack.length});return this._getCurrentQueue();}else{return queue.tasks;}}},{key:\"_genPromise\",value:function _genPromise(task){var _this2=this;this._queueStack.push({tasks:[],popable:false});var stackIdx=this._queueStack.length-1;DEBUG&&infoLog('push new queue: ',{stackIdx:stackIdx});DEBUG&&infoLog('exec gen task '+task.name);task.gen().then(function(){DEBUG&&infoLog('onThen for gen task '+task.name,{stackIdx:stackIdx,queueStackSize:_this2._queueStack.length});_this2._queueStack[stackIdx].popable=true;_this2.hasTasksToProcess()&&_this2._onMoreTasks();}).catch(function(ex){ex.message=\"TaskQueue: Error resolving Promise in task \"+task.name+\": \"+ex.message;throw ex;}).done();}},{key:\"__reactstandin__regenerateByEval\",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code);}}]);return TaskQueue;}();module.exports=TaskQueue;;(function(){var reactHotLoader=require('react-hot-loader').default;var leaveModule=require('react-hot-loader').leaveModule;if(!reactHotLoader){return;}reactHotLoader.register(DEBUG,\"DEBUG\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Interaction/TaskQueue.js\");reactHotLoader.register(TaskQueue,\"TaskQueue\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Interaction/TaskQueue.js\");leaveModule(module);})();;",{"version":3,"sources":["/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Interaction/TaskQueue.js"],"names":["infoLog","require","invariant","DEBUG","TaskQueue","onMoreTasks","_onMoreTasks","_queueStack","tasks","popable","task","_getCurrentQueue","push","forEach","enqueue","tasksToCancel","map","queue","filter","indexOf","idx","length","shift","gen","name","_genPromise","run","JSON","stringify","e","message","stackIdx","pop","queueStackSize","then","hasTasksToProcess","catch","ex","done","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst infoLog = require('infoLog');\nconst invariant = require('fbjs/lib/invariant');\n\ntype SimpleTask = {\n  name: string,\n  run: () => void,\n};\ntype PromiseTask = {\n  name: string,\n  gen: () => Promise<any>,\n};\nexport type Task = Function | SimpleTask | PromiseTask;\n\nconst DEBUG = false;\n\n/**\n * TaskQueue - A system for queueing and executing a mix of simple callbacks and\n * trees of dependent tasks based on Promises. No tasks are executed unless\n * `processNext` is called.\n *\n * `enqueue` takes a Task object with either a simple `run` callback, or a\n * `gen` function that returns a `Promise` and puts it in the queue.  If a gen\n * function is supplied, then the promise it returns will block execution of\n * tasks already in the queue until it resolves. This can be used to make sure\n * the first task is fully resolved (including asynchronous dependencies that\n * also schedule more tasks via `enqueue`) before starting on the next task.\n * The `onMoreTasks` constructor argument is used to inform the owner that an\n * async task has resolved and that the queue should be processed again.\n *\n * Note: Tasks are only actually executed with explicit calls to `processNext`.\n */\nclass TaskQueue {\n  /**\n   * TaskQueue instances are self contained and independent, so multiple tasks\n   * of varying semantics and priority can operate together.\n   *\n   * `onMoreTasks` is invoked when `PromiseTask`s resolve if there are more\n   * tasks to process.\n   */\n  constructor({onMoreTasks}: {onMoreTasks: () => void}) {\n    this._onMoreTasks = onMoreTasks;\n    this._queueStack = [{tasks: [], popable: false}];\n  }\n\n  /**\n   * Add a task to the queue.  It is recommended to name your tasks for easier\n   * async debugging. Tasks will not be executed until `processNext` is called\n   * explicitly.\n   */\n  enqueue(task: Task): void {\n    this._getCurrentQueue().push(task);\n  }\n\n  enqueueTasks(tasks: Array<Task>): void {\n    tasks.forEach(task => this.enqueue(task));\n  }\n\n  cancelTasks(tasksToCancel: Array<Task>): void {\n    // search through all tasks and remove them.\n    this._queueStack = this._queueStack\n      .map(queue => ({\n        ...queue,\n        tasks: queue.tasks.filter(task => tasksToCancel.indexOf(task) === -1),\n      }))\n      .filter((queue, idx) => queue.tasks.length > 0 || idx === 0);\n  }\n\n  /**\n   * Check to see if `processNext` should be called.\n   *\n   * @returns {boolean} Returns true if there are tasks that are ready to be\n   * processed with `processNext`, or returns false if there are no more tasks\n   * to be processed right now, although there may be tasks in the queue that\n   * are blocked by earlier `PromiseTask`s that haven't resolved yet.\n   * `onMoreTasks` will be called after each `PromiseTask` resolves if there are\n   * tasks ready to run at that point.\n   */\n  hasTasksToProcess(): boolean {\n    return this._getCurrentQueue().length > 0;\n  }\n\n  /**\n   * Executes the next task in the queue.\n   */\n  processNext(): void {\n    const queue = this._getCurrentQueue();\n    if (queue.length) {\n      const task = queue.shift();\n      try {\n        if (task.gen) {\n          DEBUG && infoLog('genPromise for task ' + task.name);\n          this._genPromise((task: any)); // Rather than annoying tagged union\n        } else if (task.run) {\n          DEBUG && infoLog('run task ' + task.name);\n          task.run();\n        } else {\n          invariant(\n            typeof task === 'function',\n            'Expected Function, SimpleTask, or PromiseTask, but got:\\n' +\n              JSON.stringify(task, null, 2),\n          );\n          DEBUG && infoLog('run anonymous task');\n          task();\n        }\n      } catch (e) {\n        e.message =\n          'TaskQueue: Error with task ' + (task.name || '') + ': ' + e.message;\n        throw e;\n      }\n    }\n  }\n\n  _queueStack: Array<{tasks: Array<Task>, popable: boolean}>;\n  _onMoreTasks: () => void;\n\n  _getCurrentQueue(): Array<Task> {\n    const stackIdx = this._queueStack.length - 1;\n    const queue = this._queueStack[stackIdx];\n    if (\n      queue.popable &&\n      queue.tasks.length === 0 &&\n      this._queueStack.length > 1\n    ) {\n      this._queueStack.pop();\n      DEBUG &&\n        infoLog('popped queue: ', {\n          stackIdx,\n          queueStackSize: this._queueStack.length,\n        });\n      return this._getCurrentQueue();\n    } else {\n      return queue.tasks;\n    }\n  }\n\n  _genPromise(task: PromiseTask) {\n    // Each async task pushes it's own queue onto the queue stack. This\n    // effectively defers execution of previously queued tasks until the promise\n    // resolves, at which point we allow the new queue to be popped, which\n    // happens once it is fully processed.\n    this._queueStack.push({tasks: [], popable: false});\n    const stackIdx = this._queueStack.length - 1;\n    DEBUG && infoLog('push new queue: ', {stackIdx});\n    DEBUG && infoLog('exec gen task ' + task.name);\n    task\n      .gen()\n      .then(() => {\n        DEBUG &&\n          infoLog('onThen for gen task ' + task.name, {\n            stackIdx,\n            queueStackSize: this._queueStack.length,\n          });\n        this._queueStack[stackIdx].popable = true;\n        this.hasTasksToProcess() && this._onMoreTasks();\n      })\n      .catch(ex => {\n        ex.message = `TaskQueue: Error resolving Promise in task ${\n          task.name\n        }: ${ex.message}`;\n        throw ex;\n      })\n      .done();\n  }\n}\n\nmodule.exports = TaskQueue;\n"]}]}