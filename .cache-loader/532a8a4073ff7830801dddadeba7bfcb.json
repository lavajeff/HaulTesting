{"remainingRequest":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js??ref--5-2!/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Lists/ListView/ListViewDataSource.js","dependencies":[{"path":"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Lists/ListView/ListViewDataSource.js","mtime":1539700108130},{"path":"/Users/jeffrey/HaulTesting/node_modules/cache-loader/dist/cjs.js","mtime":1539652983212},{"path":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js","mtime":1539652983315},{"path":"/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js","mtime":1539615827828}],"contextDependencies":[],"result":["'use strict';var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _toConsumableArray2=_interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));(function(){var enterModule=require('react-hot-loader').enterModule;enterModule&&enterModule(module);})();var invariant=require('fbjs/lib/invariant');var isEmpty=require('isEmpty');var warning=require('fbjs/lib/warning');function defaultGetRowData(dataBlob,sectionID,rowID){return dataBlob[sectionID][rowID];}function defaultGetSectionHeaderData(dataBlob,sectionID){return dataBlob[sectionID];}var ListViewDataSource=function(){function ListViewDataSource(params){(0,_classCallCheck2.default)(this,ListViewDataSource);invariant(params&&typeof params.rowHasChanged==='function','Must provide a rowHasChanged function.');this._rowHasChanged=params.rowHasChanged;this._getRowData=params.getRowData||defaultGetRowData;this._sectionHeaderHasChanged=params.sectionHeaderHasChanged;this._getSectionHeaderData=params.getSectionHeaderData||defaultGetSectionHeaderData;this._dataBlob=null;this._dirtyRows=[];this._dirtySections=[];this._cachedRowCount=0;this.rowIdentities=[];this.sectionIdentities=[];}(0,_createClass2.default)(ListViewDataSource,[{key:\"cloneWithRows\",value:function cloneWithRows(dataBlob,rowIdentities){var rowIds=rowIdentities?[(0,_toConsumableArray2.default)(rowIdentities)]:null;if(!this._sectionHeaderHasChanged){this._sectionHeaderHasChanged=function(){return false;};}return this.cloneWithRowsAndSections({s1:dataBlob},['s1'],rowIds);}},{key:\"cloneWithRowsAndSections\",value:function cloneWithRowsAndSections(dataBlob,sectionIdentities,rowIdentities){invariant(typeof this._sectionHeaderHasChanged==='function','Must provide a sectionHeaderHasChanged function with section data.');invariant(!sectionIdentities||!rowIdentities||sectionIdentities.length===rowIdentities.length,'row and section ids lengths must be the same');var newSource=new ListViewDataSource({getRowData:this._getRowData,getSectionHeaderData:this._getSectionHeaderData,rowHasChanged:this._rowHasChanged,sectionHeaderHasChanged:this._sectionHeaderHasChanged});newSource._dataBlob=dataBlob;if(sectionIdentities){newSource.sectionIdentities=sectionIdentities;}else{newSource.sectionIdentities=Object.keys(dataBlob);}if(rowIdentities){newSource.rowIdentities=rowIdentities;}else{newSource.rowIdentities=[];newSource.sectionIdentities.forEach(function(sectionID){newSource.rowIdentities.push(Object.keys(dataBlob[sectionID]));});}newSource._cachedRowCount=countRows(newSource.rowIdentities);newSource._calculateDirtyArrays(this._dataBlob,this.sectionIdentities,this.rowIdentities);return newSource;}},{key:\"getRowCount\",value:function getRowCount(){return this._cachedRowCount;}},{key:\"getRowAndSectionCount\",value:function getRowAndSectionCount(){return this._cachedRowCount+this.sectionIdentities.length;}},{key:\"rowShouldUpdate\",value:function rowShouldUpdate(sectionIndex,rowIndex){var needsUpdate=this._dirtyRows[sectionIndex][rowIndex];warning(needsUpdate!==undefined,'missing dirtyBit for section, row: '+sectionIndex+', '+rowIndex);return needsUpdate;}},{key:\"getRowData\",value:function getRowData(sectionIndex,rowIndex){var sectionID=this.sectionIdentities[sectionIndex];var rowID=this.rowIdentities[sectionIndex][rowIndex];warning(sectionID!==undefined&&rowID!==undefined,'rendering invalid section, row: '+sectionIndex+', '+rowIndex);return this._getRowData(this._dataBlob,sectionID,rowID);}},{key:\"getRowIDForFlatIndex\",value:function getRowIDForFlatIndex(index){var accessIndex=index;for(var ii=0;ii<this.sectionIdentities.length;ii++){if(accessIndex>=this.rowIdentities[ii].length){accessIndex-=this.rowIdentities[ii].length;}else{return this.rowIdentities[ii][accessIndex];}}return null;}},{key:\"getSectionIDForFlatIndex\",value:function getSectionIDForFlatIndex(index){var accessIndex=index;for(var ii=0;ii<this.sectionIdentities.length;ii++){if(accessIndex>=this.rowIdentities[ii].length){accessIndex-=this.rowIdentities[ii].length;}else{return this.sectionIdentities[ii];}}return null;}},{key:\"getSectionLengths\",value:function getSectionLengths(){var results=[];for(var ii=0;ii<this.sectionIdentities.length;ii++){results.push(this.rowIdentities[ii].length);}return results;}},{key:\"sectionHeaderShouldUpdate\",value:function sectionHeaderShouldUpdate(sectionIndex){var needsUpdate=this._dirtySections[sectionIndex];warning(needsUpdate!==undefined,'missing dirtyBit for section: '+sectionIndex);return needsUpdate;}},{key:\"getSectionHeaderData\",value:function getSectionHeaderData(sectionIndex){if(!this._getSectionHeaderData){return null;}var sectionID=this.sectionIdentities[sectionIndex];warning(sectionID!==undefined,'renderSection called on invalid section: '+sectionIndex);return this._getSectionHeaderData(this._dataBlob,sectionID);}},{key:\"_calculateDirtyArrays\",value:function _calculateDirtyArrays(prevDataBlob,prevSectionIDs,prevRowIDs){var prevSectionsHash=keyedDictionaryFromArray(prevSectionIDs);var prevRowsHash={};for(var ii=0;ii<prevRowIDs.length;ii++){var sectionID=prevSectionIDs[ii];warning(!prevRowsHash[sectionID],'SectionID appears more than once: '+sectionID);prevRowsHash[sectionID]=keyedDictionaryFromArray(prevRowIDs[ii]);}this._dirtySections=[];this._dirtyRows=[];var dirty;for(var sIndex=0;sIndex<this.sectionIdentities.length;sIndex++){var sectionID=this.sectionIdentities[sIndex];dirty=!prevSectionsHash[sectionID];var sectionHeaderHasChanged=this._sectionHeaderHasChanged;if(!dirty&&sectionHeaderHasChanged){dirty=sectionHeaderHasChanged(this._getSectionHeaderData(prevDataBlob,sectionID),this._getSectionHeaderData(this._dataBlob,sectionID));}this._dirtySections.push(!!dirty);this._dirtyRows[sIndex]=[];for(var rIndex=0;rIndex<this.rowIdentities[sIndex].length;rIndex++){var rowID=this.rowIdentities[sIndex][rIndex];dirty=!prevSectionsHash[sectionID]||!prevRowsHash[sectionID][rowID]||this._rowHasChanged(this._getRowData(prevDataBlob,sectionID,rowID),this._getRowData(this._dataBlob,sectionID,rowID));this._dirtyRows[sIndex].push(!!dirty);}}}},{key:\"__reactstandin__regenerateByEval\",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code);}}]);return ListViewDataSource;}();function countRows(allRowIDs){var totalRows=0;for(var sectionIdx=0;sectionIdx<allRowIDs.length;sectionIdx++){var rowIDs=allRowIDs[sectionIdx];totalRows+=rowIDs.length;}return totalRows;}function keyedDictionaryFromArray(arr){if(isEmpty(arr)){return{};}var result={};for(var ii=0;ii<arr.length;ii++){var _key=arr[ii];warning(!result[_key],'Value appears more than once in array: '+_key);result[_key]=true;}return result;}module.exports=ListViewDataSource;;(function(){var reactHotLoader=require('react-hot-loader').default;var leaveModule=require('react-hot-loader').leaveModule;if(!reactHotLoader){return;}reactHotLoader.register(defaultGetRowData,\"defaultGetRowData\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Lists/ListView/ListViewDataSource.js\");reactHotLoader.register(defaultGetSectionHeaderData,\"defaultGetSectionHeaderData\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Lists/ListView/ListViewDataSource.js\");reactHotLoader.register(ListViewDataSource,\"ListViewDataSource\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Lists/ListView/ListViewDataSource.js\");reactHotLoader.register(countRows,\"countRows\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Lists/ListView/ListViewDataSource.js\");reactHotLoader.register(keyedDictionaryFromArray,\"keyedDictionaryFromArray\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Lists/ListView/ListViewDataSource.js\");leaveModule(module);})();;",{"version":3,"sources":["/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Lists/ListView/ListViewDataSource.js"],"names":["invariant","require","isEmpty","warning","defaultGetRowData","dataBlob","sectionID","rowID","defaultGetSectionHeaderData","ListViewDataSource","params","rowHasChanged","_rowHasChanged","_getRowData","getRowData","_sectionHeaderHasChanged","sectionHeaderHasChanged","_getSectionHeaderData","getSectionHeaderData","_dataBlob","_dirtyRows","_dirtySections","_cachedRowCount","rowIdentities","sectionIdentities","rowIds","cloneWithRowsAndSections","s1","length","newSource","Object","keys","forEach","push","countRows","_calculateDirtyArrays","sectionIndex","rowIndex","needsUpdate","undefined","index","accessIndex","ii","results","prevDataBlob","prevSectionIDs","prevRowIDs","prevSectionsHash","keyedDictionaryFromArray","prevRowsHash","dirty","sIndex","rIndex","allRowIDs","totalRows","sectionIdx","rowIDs","arr","result","key","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst invariant = require('fbjs/lib/invariant');\nconst isEmpty = require('isEmpty');\n/* $FlowFixMe(>=0.54.0 site=react_native_oss) This comment suppresses an error\n * found when Flow v0.54 was deployed. To see the error delete this comment and\n * run Flow. */\nconst warning = require('fbjs/lib/warning');\n\nfunction defaultGetRowData(\n  dataBlob: any,\n  sectionID: number | string,\n  rowID: number | string,\n): any {\n  return dataBlob[sectionID][rowID];\n}\n\nfunction defaultGetSectionHeaderData(\n  dataBlob: any,\n  sectionID: number | string,\n): any {\n  return dataBlob[sectionID];\n}\n\ntype differType = (data1: any, data2: any) => boolean;\n\ntype ParamType = {\n  rowHasChanged: differType,\n  getRowData?: ?typeof defaultGetRowData,\n  sectionHeaderHasChanged?: ?differType,\n  getSectionHeaderData?: ?typeof defaultGetSectionHeaderData,\n};\n\n/**\n * Provides efficient data processing and access to the\n * `ListView` component.  A `ListViewDataSource` is created with functions for\n * extracting data from the input blob, and comparing elements (with default\n * implementations for convenience).  The input blob can be as simple as an\n * array of strings, or an object with rows nested inside section objects.\n *\n * To update the data in the datasource, use `cloneWithRows` (or\n * `cloneWithRowsAndSections` if you care about sections).  The data in the\n * data source is immutable, so you can't modify it directly.  The clone methods\n * suck in the new data and compute a diff for each row so ListView knows\n * whether to re-render it or not.\n *\n * In this example, a component receives data in chunks, handled by\n * `_onDataArrived`, which concats the new data onto the old data and updates the\n * data source.  We use `concat` to create a new array - mutating `this._data`,\n * e.g. with `this._data.push(newRowData)`, would be an error. `_rowHasChanged`\n * understands the shape of the row data and knows how to efficiently compare\n * it.\n *\n * ```\n * getInitialState: function() {\n *   var ds = new ListView.DataSource({rowHasChanged: this._rowHasChanged});\n *   return {ds};\n * },\n * _onDataArrived(newData) {\n *   this._data = this._data.concat(newData);\n *   this.setState({\n *     ds: this.state.ds.cloneWithRows(this._data)\n *   });\n * }\n * ```\n */\n\nclass ListViewDataSource {\n  /**\n   * You can provide custom extraction and `hasChanged` functions for section\n   * headers and rows.  If absent, data will be extracted with the\n   * `defaultGetRowData` and `defaultGetSectionHeaderData` functions.\n   *\n   * The default extractor expects data of one of the following forms:\n   *\n   *      { sectionID_1: { rowID_1: <rowData1>, ... }, ... }\n   *\n   *    or\n   *\n   *      { sectionID_1: [ <rowData1>, <rowData2>, ... ], ... }\n   *\n   *    or\n   *\n   *      [ [ <rowData1>, <rowData2>, ... ], ... ]\n   *\n   * The constructor takes in a params argument that can contain any of the\n   * following:\n   *\n   * - getRowData(dataBlob, sectionID, rowID);\n   * - getSectionHeaderData(dataBlob, sectionID);\n   * - rowHasChanged(prevRowData, nextRowData);\n   * - sectionHeaderHasChanged(prevSectionData, nextSectionData);\n   */\n  constructor(params: ParamType) {\n    invariant(\n      params && typeof params.rowHasChanged === 'function',\n      'Must provide a rowHasChanged function.',\n    );\n    this._rowHasChanged = params.rowHasChanged;\n    this._getRowData = params.getRowData || defaultGetRowData;\n    this._sectionHeaderHasChanged = params.sectionHeaderHasChanged;\n    this._getSectionHeaderData =\n      params.getSectionHeaderData || defaultGetSectionHeaderData;\n\n    this._dataBlob = null;\n    this._dirtyRows = [];\n    this._dirtySections = [];\n    this._cachedRowCount = 0;\n\n    // These two private variables are accessed by outsiders because ListView\n    // uses them to iterate over the data in this class.\n    this.rowIdentities = [];\n    this.sectionIdentities = [];\n  }\n\n  /**\n   * Clones this `ListViewDataSource` with the specified `dataBlob` and\n   * `rowIdentities`. The `dataBlob` is just an arbitrary blob of data. At\n   * construction an extractor to get the interesting information was defined\n   * (or the default was used).\n   *\n   * The `rowIdentities` is a 2D array of identifiers for rows.\n   * ie. [['a1', 'a2'], ['b1', 'b2', 'b3'], ...].  If not provided, it's\n   * assumed that the keys of the section data are the row identities.\n   *\n   * Note: This function does NOT clone the data in this data source. It simply\n   * passes the functions defined at construction to a new data source with\n   * the data specified. If you wish to maintain the existing data you must\n   * handle merging of old and new data separately and then pass that into\n   * this function as the `dataBlob`.\n   */\n  cloneWithRows(\n    dataBlob: $ReadOnlyArray<any> | {+[key: string]: any},\n    rowIdentities: ?$ReadOnlyArray<string>,\n  ): ListViewDataSource {\n    const rowIds = rowIdentities ? [[...rowIdentities]] : null;\n    if (!this._sectionHeaderHasChanged) {\n      this._sectionHeaderHasChanged = () => false;\n    }\n    return this.cloneWithRowsAndSections({s1: dataBlob}, ['s1'], rowIds);\n  }\n\n  /**\n   * This performs the same function as the `cloneWithRows` function but here\n   * you also specify what your `sectionIdentities` are. If you don't care\n   * about sections you should safely be able to use `cloneWithRows`.\n   *\n   * `sectionIdentities` is an array of identifiers for sections.\n   * ie. ['s1', 's2', ...].  The identifiers should correspond to the keys or array indexes\n   * of the data you wish to include.  If not provided, it's assumed that the\n   * keys of dataBlob are the section identities.\n   *\n   * Note: this returns a new object!\n   *\n   * ```\n   * const dataSource = ds.cloneWithRowsAndSections({\n   *   addresses: ['row 1', 'row 2'],\n   *   phone_numbers: ['data 1', 'data 2'],\n   * }, ['phone_numbers']);\n   * ```\n   */\n  cloneWithRowsAndSections(\n    dataBlob: any,\n    sectionIdentities: ?Array<string>,\n    rowIdentities: ?Array<Array<string>>,\n  ): ListViewDataSource {\n    invariant(\n      typeof this._sectionHeaderHasChanged === 'function',\n      'Must provide a sectionHeaderHasChanged function with section data.',\n    );\n    invariant(\n      !sectionIdentities ||\n        !rowIdentities ||\n        sectionIdentities.length === rowIdentities.length,\n      'row and section ids lengths must be the same',\n    );\n\n    const newSource = new ListViewDataSource({\n      getRowData: this._getRowData,\n      getSectionHeaderData: this._getSectionHeaderData,\n      rowHasChanged: this._rowHasChanged,\n      sectionHeaderHasChanged: this._sectionHeaderHasChanged,\n    });\n    newSource._dataBlob = dataBlob;\n    if (sectionIdentities) {\n      newSource.sectionIdentities = sectionIdentities;\n    } else {\n      newSource.sectionIdentities = Object.keys(dataBlob);\n    }\n    if (rowIdentities) {\n      newSource.rowIdentities = rowIdentities;\n    } else {\n      newSource.rowIdentities = [];\n      newSource.sectionIdentities.forEach(sectionID => {\n        newSource.rowIdentities.push(Object.keys(dataBlob[sectionID]));\n      });\n    }\n    newSource._cachedRowCount = countRows(newSource.rowIdentities);\n\n    newSource._calculateDirtyArrays(\n      this._dataBlob,\n      this.sectionIdentities,\n      this.rowIdentities,\n    );\n\n    return newSource;\n  }\n\n  /**\n   * Returns the total number of rows in the data source.\n   *\n   * If you are specifying the rowIdentities or sectionIdentities, then `getRowCount` will return the number of rows in the filtered data source.\n   */\n  getRowCount(): number {\n    return this._cachedRowCount;\n  }\n\n  /**\n   * Returns the total number of rows in the data source (see `getRowCount` for how this is calculated) plus the number of sections in the data.\n   *\n   * If you are specifying the rowIdentities or sectionIdentities, then `getRowAndSectionCount` will return the number of rows & sections in the filtered data source.\n   */\n  getRowAndSectionCount(): number {\n    return this._cachedRowCount + this.sectionIdentities.length;\n  }\n\n  /**\n   * Returns if the row is dirtied and needs to be rerendered\n   */\n  rowShouldUpdate(sectionIndex: number, rowIndex: number): boolean {\n    const needsUpdate = this._dirtyRows[sectionIndex][rowIndex];\n    warning(\n      needsUpdate !== undefined,\n      'missing dirtyBit for section, row: ' + sectionIndex + ', ' + rowIndex,\n    );\n    return needsUpdate;\n  }\n\n  /**\n   * Gets the data required to render the row.\n   */\n  getRowData(sectionIndex: number, rowIndex: number): any {\n    const sectionID = this.sectionIdentities[sectionIndex];\n    const rowID = this.rowIdentities[sectionIndex][rowIndex];\n    warning(\n      sectionID !== undefined && rowID !== undefined,\n      'rendering invalid section, row: ' + sectionIndex + ', ' + rowIndex,\n    );\n    return this._getRowData(this._dataBlob, sectionID, rowID);\n  }\n\n  /**\n   * Gets the rowID at index provided if the dataSource arrays were flattened,\n   * or null of out of range indexes.\n   */\n  getRowIDForFlatIndex(index: number): ?string {\n    let accessIndex = index;\n    for (let ii = 0; ii < this.sectionIdentities.length; ii++) {\n      if (accessIndex >= this.rowIdentities[ii].length) {\n        accessIndex -= this.rowIdentities[ii].length;\n      } else {\n        return this.rowIdentities[ii][accessIndex];\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Gets the sectionID at index provided if the dataSource arrays were flattened,\n   * or null for out of range indexes.\n   */\n  getSectionIDForFlatIndex(index: number): ?string {\n    let accessIndex = index;\n    for (let ii = 0; ii < this.sectionIdentities.length; ii++) {\n      if (accessIndex >= this.rowIdentities[ii].length) {\n        accessIndex -= this.rowIdentities[ii].length;\n      } else {\n        return this.sectionIdentities[ii];\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns an array containing the number of rows in each section\n   */\n  getSectionLengths(): Array<number> {\n    const results = [];\n    for (let ii = 0; ii < this.sectionIdentities.length; ii++) {\n      results.push(this.rowIdentities[ii].length);\n    }\n    return results;\n  }\n\n  /**\n   * Returns if the section header is dirtied and needs to be rerendered\n   */\n  sectionHeaderShouldUpdate(sectionIndex: number): boolean {\n    const needsUpdate = this._dirtySections[sectionIndex];\n    warning(\n      needsUpdate !== undefined,\n      'missing dirtyBit for section: ' + sectionIndex,\n    );\n    return needsUpdate;\n  }\n\n  /**\n   * Gets the data required to render the section header\n   */\n  getSectionHeaderData(sectionIndex: number): any {\n    if (!this._getSectionHeaderData) {\n      return null;\n    }\n    const sectionID = this.sectionIdentities[sectionIndex];\n    warning(\n      sectionID !== undefined,\n      'renderSection called on invalid section: ' + sectionIndex,\n    );\n    return this._getSectionHeaderData(this._dataBlob, sectionID);\n  }\n\n  /**\n   * Private members and methods.\n   */\n\n  _getRowData: typeof defaultGetRowData;\n  _getSectionHeaderData: typeof defaultGetSectionHeaderData;\n  _rowHasChanged: differType;\n  _sectionHeaderHasChanged: ?differType;\n\n  _dataBlob: any;\n  _dirtyRows: Array<Array<boolean>>;\n  _dirtySections: Array<boolean>;\n  _cachedRowCount: number;\n\n  // These two 'protected' variables are accessed by ListView to iterate over\n  // the data in this class.\n  rowIdentities: Array<Array<string>>;\n  sectionIdentities: Array<string>;\n\n  _calculateDirtyArrays(\n    prevDataBlob: any,\n    prevSectionIDs: Array<string>,\n    prevRowIDs: Array<Array<string>>,\n  ): void {\n    // construct a hashmap of the existing (old) id arrays\n    const prevSectionsHash = keyedDictionaryFromArray(prevSectionIDs);\n    const prevRowsHash = {};\n    for (let ii = 0; ii < prevRowIDs.length; ii++) {\n      var sectionID = prevSectionIDs[ii];\n      warning(\n        !prevRowsHash[sectionID],\n        'SectionID appears more than once: ' + sectionID,\n      );\n      prevRowsHash[sectionID] = keyedDictionaryFromArray(prevRowIDs[ii]);\n    }\n\n    // compare the 2 identity array and get the dirtied rows\n    this._dirtySections = [];\n    this._dirtyRows = [];\n\n    let dirty;\n    for (let sIndex = 0; sIndex < this.sectionIdentities.length; sIndex++) {\n      var sectionID = this.sectionIdentities[sIndex];\n      // dirty if the sectionHeader is new or _sectionHasChanged is true\n      dirty = !prevSectionsHash[sectionID];\n      const sectionHeaderHasChanged = this._sectionHeaderHasChanged;\n      if (!dirty && sectionHeaderHasChanged) {\n        dirty = sectionHeaderHasChanged(\n          this._getSectionHeaderData(prevDataBlob, sectionID),\n          this._getSectionHeaderData(this._dataBlob, sectionID),\n        );\n      }\n      this._dirtySections.push(!!dirty);\n\n      this._dirtyRows[sIndex] = [];\n      for (\n        let rIndex = 0;\n        rIndex < this.rowIdentities[sIndex].length;\n        rIndex++\n      ) {\n        const rowID = this.rowIdentities[sIndex][rIndex];\n        // dirty if the section is new, row is new or _rowHasChanged is true\n        dirty =\n          !prevSectionsHash[sectionID] ||\n          !prevRowsHash[sectionID][rowID] ||\n          this._rowHasChanged(\n            this._getRowData(prevDataBlob, sectionID, rowID),\n            this._getRowData(this._dataBlob, sectionID, rowID),\n          );\n        this._dirtyRows[sIndex].push(!!dirty);\n      }\n    }\n  }\n}\n\nfunction countRows(allRowIDs) {\n  let totalRows = 0;\n  for (let sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {\n    const rowIDs = allRowIDs[sectionIdx];\n    totalRows += rowIDs.length;\n  }\n  return totalRows;\n}\n\nfunction keyedDictionaryFromArray(arr) {\n  if (isEmpty(arr)) {\n    return {};\n  }\n  const result = {};\n  for (let ii = 0; ii < arr.length; ii++) {\n    const key = arr[ii];\n    warning(!result[key], 'Value appears more than once in array: ' + key);\n    result[key] = true;\n  }\n  return result;\n}\n\nmodule.exports = ListViewDataSource;\n"]}]}