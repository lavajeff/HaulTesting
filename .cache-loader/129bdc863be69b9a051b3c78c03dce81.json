{"remainingRequest":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js??ref--5-2!/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/YellowBox/Data/YellowBoxSymbolication.js","dependencies":[{"path":"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/YellowBox/Data/YellowBoxSymbolication.js","mtime":1539700108130},{"path":"/Users/jeffrey/HaulTesting/node_modules/cache-loader/dist/cjs.js","mtime":1539652983212},{"path":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js","mtime":1539652983315},{"path":"/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js","mtime":1539615827828}],"contextDependencies":[],"result":["'use strict';(function(){var enterModule=require('react-hot-loader').enterModule;enterModule&&enterModule(module);})();var symbolicateStackTrace=require('symbolicateStackTrace');var cache=new Map();var YellowBoxSymbolication={symbolicate:function symbolicate(stack){var key=getCacheKey(stack);var promise=cache.get(key);if(promise==null){promise=symbolicateStackTrace(stack).then(sanitize);cache.set(key,promise);}return promise;}};var getCacheKey=function getCacheKey(stack){return JSON.stringify(stack);};var sanitize=function sanitize(maybeStack){if(!Array.isArray(maybeStack)){throw new Error('Expected stack to be an array.');}var stack=[];for(var _iterator=maybeStack,_isArray=Array.isArray(_iterator),_i=0,_iterator=_isArray?_iterator:_iterator[typeof Symbol===\"function\"?Symbol.iterator:\"@@iterator\"]();;){var _ref;if(_isArray){if(_i>=_iterator.length)break;_ref=_iterator[_i++];}else{_i=_iterator.next();if(_i.done)break;_ref=_i.value;}var _maybeFrame=_ref;if(typeof _maybeFrame!=='object'||_maybeFrame==null){throw new Error('Expected each stack frame to be an object.');}if(typeof _maybeFrame.column!=='number'&&_maybeFrame.column!=null){throw new Error('Expected stack frame `column` to be a nullable number.');}if(typeof _maybeFrame.file!=='string'){throw new Error('Expected stack frame `file` to be a string.');}if(typeof _maybeFrame.lineNumber!=='number'){throw new Error('Expected stack frame `lineNumber` to be a number.');}if(typeof _maybeFrame.methodName!=='string'){throw new Error('Expected stack frame `methodName` to be a string.');}stack.push({column:_maybeFrame.column,file:_maybeFrame.file,lineNumber:_maybeFrame.lineNumber,methodName:_maybeFrame.methodName});}return stack;};module.exports=YellowBoxSymbolication;;(function(){var reactHotLoader=require('react-hot-loader').default;var leaveModule=require('react-hot-loader').leaveModule;if(!reactHotLoader){return;}reactHotLoader.register(cache,\"cache\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/YellowBox/Data/YellowBoxSymbolication.js\");reactHotLoader.register(YellowBoxSymbolication,\"YellowBoxSymbolication\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/YellowBox/Data/YellowBoxSymbolication.js\");reactHotLoader.register(getCacheKey,\"getCacheKey\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/YellowBox/Data/YellowBoxSymbolication.js\");reactHotLoader.register(sanitize,\"sanitize\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/YellowBox/Data/YellowBoxSymbolication.js\");leaveModule(module);})();;",{"version":3,"sources":["/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/YellowBox/Data/YellowBoxSymbolication.js"],"names":["symbolicateStackTrace","require","cache","Map","YellowBoxSymbolication","symbolicate","stack","key","getCacheKey","promise","get","then","sanitize","set","JSON","stringify","maybeStack","Array","isArray","Error","maybeFrame","column","file","lineNumber","methodName","push","module","exports"],"mappings":"AAUA,a,0GAEA,GAAMA,CAAAA,qBAAqB,CAAGC,OAAO,CAAC,uBAAD,CAArC,CAQA,GAAMC,CAAAA,KAAoC,CAAG,GAAIC,CAAAA,GAAJ,EAA7C,CAEA,GAAMC,CAAAA,sBAAsB,CAAG,CAC7BC,WAD6B,sBACjBC,KADiB,CACa,CACxC,GAAMC,CAAAA,GAAG,CAAGC,WAAW,CAACF,KAAD,CAAvB,CAEA,GAAIG,CAAAA,OAAO,CAAGP,KAAK,CAACQ,GAAN,CAAUH,GAAV,CAAd,CACA,GAAIE,OAAO,EAAI,IAAf,CAAqB,CACnBA,OAAO,CAAGT,qBAAqB,CAACM,KAAD,CAArB,CAA6BK,IAA7B,CAAkCC,QAAlC,CAAV,CACAV,KAAK,CAACW,GAAN,CAAUN,GAAV,CAAeE,OAAf,EACD,CAED,MAAOA,CAAAA,OAAP,CACD,CAX4B,CAA/B,CAcA,GAAMD,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACF,KAAD,CAA4B,CAC9C,MAAOQ,CAAAA,IAAI,CAACC,SAAL,CAAeT,KAAf,CAAP,CACD,CAFD,CAOA,GAAMM,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACI,UAAD,CAA8B,CAC7C,GAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,UAAd,CAAL,CAAgC,CAC9B,KAAM,IAAIG,CAAAA,KAAJ,CAAU,gCAAV,CAAN,CACD,CACD,GAAMb,CAAAA,KAAK,CAAG,EAAd,CACA,kBAAyBU,UAAzB,4IAAqC,uIAA1BI,CAAAA,WAA0B,MACnC,GAAI,MAAOA,CAAAA,WAAP,GAAsB,QAAtB,EAAkCA,WAAU,EAAI,IAApD,CAA0D,CACxD,KAAM,IAAID,CAAAA,KAAJ,CAAU,4CAAV,CAAN,CACD,CACD,GAAI,MAAOC,CAAAA,WAAU,CAACC,MAAlB,GAA6B,QAA7B,EAAyCD,WAAU,CAACC,MAAX,EAAqB,IAAlE,CAAwE,CACtE,KAAM,IAAIF,CAAAA,KAAJ,CAAU,wDAAV,CAAN,CACD,CACD,GAAI,MAAOC,CAAAA,WAAU,CAACE,IAAlB,GAA2B,QAA/B,CAAyC,CACvC,KAAM,IAAIH,CAAAA,KAAJ,CAAU,6CAAV,CAAN,CACD,CACD,GAAI,MAAOC,CAAAA,WAAU,CAACG,UAAlB,GAAiC,QAArC,CAA+C,CAC7C,KAAM,IAAIJ,CAAAA,KAAJ,CAAU,mDAAV,CAAN,CACD,CACD,GAAI,MAAOC,CAAAA,WAAU,CAACI,UAAlB,GAAiC,QAArC,CAA+C,CAC7C,KAAM,IAAIL,CAAAA,KAAJ,CAAU,mDAAV,CAAN,CACD,CACDb,KAAK,CAACmB,IAAN,CAAW,CACTJ,MAAM,CAAED,WAAU,CAACC,MADV,CAETC,IAAI,CAAEF,WAAU,CAACE,IAFR,CAGTC,UAAU,CAAEH,WAAU,CAACG,UAHd,CAITC,UAAU,CAAEJ,WAAU,CAACI,UAJd,CAAX,EAMD,CACD,MAAOlB,CAAAA,KAAP,CACD,CA7BD,CA+BAoB,MAAM,CAACC,OAAP,CAAiBvB,sBAAjB,C,gLAtDMF,K,4IAEAE,sB,6JAcAI,W,kJAOAI,Q","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nconst symbolicateStackTrace = require('symbolicateStackTrace');\n\nimport type {StackFrame} from 'parseErrorStack';\n\ntype CacheKey = string;\n\nexport type Stack = Array<StackFrame>;\n\nconst cache: Map<CacheKey, Promise<Stack>> = new Map();\n\nconst YellowBoxSymbolication = {\n  symbolicate(stack: Stack): Promise<Stack> {\n    const key = getCacheKey(stack);\n\n    let promise = cache.get(key);\n    if (promise == null) {\n      promise = symbolicateStackTrace(stack).then(sanitize);\n      cache.set(key, promise);\n    }\n\n    return promise;\n  },\n};\n\nconst getCacheKey = (stack: Stack): CacheKey => {\n  return JSON.stringify(stack);\n};\n\n/**\n * Sanitize because sometimes, `symbolicateStackTrace` gives us invalid values.\n */\nconst sanitize = (maybeStack: mixed): Stack => {\n  if (!Array.isArray(maybeStack)) {\n    throw new Error('Expected stack to be an array.');\n  }\n  const stack = [];\n  for (const maybeFrame of maybeStack) {\n    if (typeof maybeFrame !== 'object' || maybeFrame == null) {\n      throw new Error('Expected each stack frame to be an object.');\n    }\n    if (typeof maybeFrame.column !== 'number' && maybeFrame.column != null) {\n      throw new Error('Expected stack frame `column` to be a nullable number.');\n    }\n    if (typeof maybeFrame.file !== 'string') {\n      throw new Error('Expected stack frame `file` to be a string.');\n    }\n    if (typeof maybeFrame.lineNumber !== 'number') {\n      throw new Error('Expected stack frame `lineNumber` to be a number.');\n    }\n    if (typeof maybeFrame.methodName !== 'string') {\n      throw new Error('Expected stack frame `methodName` to be a string.');\n    }\n    stack.push({\n      column: maybeFrame.column,\n      file: maybeFrame.file,\n      lineNumber: maybeFrame.lineNumber,\n      methodName: maybeFrame.methodName,\n    });\n  }\n  return stack;\n};\n\nmodule.exports = YellowBoxSymbolication;\n"]}]}