{"remainingRequest":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js??ref--5-2!/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Blob/BlobManager.js","dependencies":[{"path":"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Blob/BlobManager.js","mtime":1539700108130},{"path":"/Users/jeffrey/HaulTesting/node_modules/cache-loader/dist/cjs.js","mtime":1539652983212},{"path":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js","mtime":1539652983315},{"path":"/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js","mtime":1539615827828}],"contextDependencies":[],"result":["'use strict';var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));(function(){var enterModule=require('react-hot-loader').enterModule;enterModule&&enterModule(module);})();var Blob=require('Blob');var BlobRegistry=require('BlobRegistry');var _require=require('NativeModules'),BlobModule=_require.BlobModule;function uuidv4(){return'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g,function(c){var r=Math.random()*16|0,v=c=='x'?r:r&0x3|0x8;return v.toString(16);});}var BlobManager=function(){function BlobManager(){(0,_classCallCheck2.default)(this,BlobManager);}(0,_createClass2.default)(BlobManager,null,[{key:\"createFromParts\",value:function createFromParts(parts,options){var blobId=uuidv4();var items=parts.map(function(part){if(part instanceof ArrayBuffer||global.ArrayBufferView&&part instanceof global.ArrayBufferView){throw new Error(\"Creating blobs from 'ArrayBuffer' and 'ArrayBufferView' are not supported\");}if(part instanceof Blob){return{data:part.data,type:'blob'};}else{return{data:String(part),type:'string'};}});var size=items.reduce(function(acc,curr){if(curr.type==='string'){return acc+global.unescape(encodeURI(curr.data)).length;}else{return acc+curr.data.size;}},0);BlobModule.createFromParts(items,blobId);return BlobManager.createFromOptions({blobId:blobId,offset:0,size:size,type:options?options.type:'',lastModified:options?options.lastModified:Date.now()});}},{key:\"createFromOptions\",value:function createFromOptions(options){BlobRegistry.register(options.blobId);return(0,_extends2.default)(Object.create(Blob.prototype),{data:options});}},{key:\"release\",value:function release(blobId){BlobRegistry.unregister(blobId);if(BlobRegistry.has(blobId)){return;}BlobModule.release(blobId);}},{key:\"addNetworkingHandler\",value:function addNetworkingHandler(){BlobModule.addNetworkingHandler();}},{key:\"addWebSocketHandler\",value:function addWebSocketHandler(socketId){BlobModule.addWebSocketHandler(socketId);}},{key:\"removeWebSocketHandler\",value:function removeWebSocketHandler(socketId){BlobModule.removeWebSocketHandler(socketId);}},{key:\"sendOverSocket\",value:function sendOverSocket(blob,socketId){BlobModule.sendOverSocket(blob.data,socketId);}}]);return BlobManager;}();BlobManager.isAvailable=!!BlobModule;module.exports=BlobManager;;(function(){var reactHotLoader=require('react-hot-loader').default;var leaveModule=require('react-hot-loader').leaveModule;if(!reactHotLoader){return;}reactHotLoader.register(uuidv4,\"uuidv4\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Blob/BlobManager.js\");reactHotLoader.register(BlobManager,\"BlobManager\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Blob/BlobManager.js\");leaveModule(module);})();;",{"version":3,"sources":["/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Blob/BlobManager.js"],"names":["Blob","require","BlobRegistry","BlobModule","uuidv4","replace","c","r","Math","random","v","toString","BlobManager","parts","options","blobId","items","map","part","ArrayBuffer","global","ArrayBufferView","Error","data","type","String","size","reduce","acc","curr","unescape","encodeURI","length","createFromParts","createFromOptions","offset","lastModified","Date","now","register","Object","create","prototype","unregister","has","release","addNetworkingHandler","socketId","addWebSocketHandler","removeWebSocketHandler","blob","sendOverSocket","isAvailable","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nconst Blob = require('Blob');\nconst BlobRegistry = require('BlobRegistry');\nconst {BlobModule} = require('NativeModules');\n\nimport type {BlobData, BlobOptions} from 'BlobTypes';\n\n/*eslint-disable no-bitwise */\n/*eslint-disable eqeqeq */\n\n/**\n * Based on the rfc4122-compliant solution posted at\n * http://stackoverflow.com/questions/105034\n */\nfunction uuidv4(): string {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = (Math.random() * 16) | 0,\n      v = c == 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\n/**\n * Module to manage blobs. Wrapper around the native blob module.\n */\nclass BlobManager {\n  /**\n   * If the native blob module is available.\n   */\n  static isAvailable = !!BlobModule;\n\n  /**\n   * Create blob from existing array of blobs.\n   */\n  static createFromParts(\n    parts: Array<Blob | string>,\n    options?: BlobOptions,\n  ): Blob {\n    const blobId = uuidv4();\n    const items = parts.map(part => {\n      if (\n        part instanceof ArrayBuffer ||\n        (global.ArrayBufferView && part instanceof global.ArrayBufferView)\n      ) {\n        throw new Error(\n          \"Creating blobs from 'ArrayBuffer' and 'ArrayBufferView' are not supported\",\n        );\n      }\n      if (part instanceof Blob) {\n        return {\n          data: part.data,\n          type: 'blob',\n        };\n      } else {\n        return {\n          data: String(part),\n          type: 'string',\n        };\n      }\n    });\n    const size = items.reduce((acc, curr) => {\n      if (curr.type === 'string') {\n        return acc + global.unescape(encodeURI(curr.data)).length;\n      } else {\n        return acc + curr.data.size;\n      }\n    }, 0);\n\n    BlobModule.createFromParts(items, blobId);\n\n    return BlobManager.createFromOptions({\n      blobId,\n      offset: 0,\n      size,\n      type: options ? options.type : '',\n      lastModified: options ? options.lastModified : Date.now(),\n    });\n  }\n\n  /**\n   * Create blob instance from blob data from native.\n   * Used internally by modules like XHR, WebSocket, etc.\n   */\n  static createFromOptions(options: BlobData): Blob {\n    BlobRegistry.register(options.blobId);\n    return Object.assign(Object.create(Blob.prototype), {data: options});\n  }\n\n  /**\n   * Deallocate resources for a blob.\n   */\n  static release(blobId: string): void {\n    BlobRegistry.unregister(blobId);\n    if (BlobRegistry.has(blobId)) {\n      return;\n    }\n    BlobModule.release(blobId);\n  }\n\n  /**\n   * Inject the blob content handler in the networking module to support blob\n   * requests and responses.\n   */\n  static addNetworkingHandler(): void {\n    BlobModule.addNetworkingHandler();\n  }\n\n  /**\n   * Indicate the websocket should return a blob for incoming binary\n   * messages.\n   */\n  static addWebSocketHandler(socketId: number): void {\n    BlobModule.addWebSocketHandler(socketId);\n  }\n\n  /**\n   * Indicate the websocket should no longer return a blob for incoming\n   * binary messages.\n   */\n  static removeWebSocketHandler(socketId: number): void {\n    BlobModule.removeWebSocketHandler(socketId);\n  }\n\n  /**\n   * Send a blob message to a websocket.\n   */\n  static sendOverSocket(blob: Blob, socketId: number): void {\n    BlobModule.sendOverSocket(blob.data, socketId);\n  }\n}\n\nmodule.exports = BlobManager;\n"]}]}