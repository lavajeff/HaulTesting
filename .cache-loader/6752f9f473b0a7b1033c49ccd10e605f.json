{"remainingRequest":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js??ref--5-2!/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Lists/ViewabilityHelper.js","dependencies":[{"path":"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Lists/ViewabilityHelper.js","mtime":1539700108130},{"path":"/Users/jeffrey/HaulTesting/node_modules/cache-loader/dist/cjs.js","mtime":1539652983212},{"path":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js","mtime":1539652983315},{"path":"/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js","mtime":1539615827828}],"contextDependencies":[],"result":["'use strict';var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _objectSpread2=_interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));var _slicedToArray2=_interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));(function(){var enterModule=require('react-hot-loader').enterModule;enterModule&&enterModule(module);})();var invariant=require('fbjs/lib/invariant');var ViewabilityHelper=function(){function ViewabilityHelper(){var config=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{viewAreaCoveragePercentThreshold:0};(0,_classCallCheck2.default)(this,ViewabilityHelper);this._hasInteracted=false;this._timers=new Set();this._viewableIndices=[];this._viewableItems=new Map();this._config=config;}(0,_createClass2.default)(ViewabilityHelper,[{key:\"dispose\",value:function dispose(){this._timers.forEach(clearTimeout);}},{key:\"computeViewableItems\",value:function computeViewableItems(itemCount,scrollOffset,viewportHeight,getFrameMetrics,renderRange){var _this$_config=this._config,itemVisiblePercentThreshold=_this$_config.itemVisiblePercentThreshold,viewAreaCoveragePercentThreshold=_this$_config.viewAreaCoveragePercentThreshold;var viewAreaMode=viewAreaCoveragePercentThreshold!=null;var viewablePercentThreshold=viewAreaMode?viewAreaCoveragePercentThreshold:itemVisiblePercentThreshold;invariant(viewablePercentThreshold!=null&&itemVisiblePercentThreshold!=null!==(viewAreaCoveragePercentThreshold!=null),'Must set exactly one of itemVisiblePercentThreshold or viewAreaCoveragePercentThreshold');var viewableIndices=[];if(itemCount===0){return viewableIndices;}var firstVisible=-1;var _ref=renderRange||{first:0,last:itemCount-1},first=_ref.first,last=_ref.last;invariant(last<itemCount,'Invalid render range '+JSON.stringify({renderRange:renderRange,itemCount:itemCount}));for(var idx=first;idx<=last;idx++){var metrics=getFrameMetrics(idx);if(!metrics){continue;}var top=metrics.offset-scrollOffset;var bottom=top+metrics.length;if(top<viewportHeight&&bottom>0){firstVisible=idx;if(_isViewable(viewAreaMode,viewablePercentThreshold,top,bottom,viewportHeight,metrics.length)){viewableIndices.push(idx);}}else if(firstVisible>=0){break;}}return viewableIndices;}},{key:\"onUpdate\",value:function onUpdate(itemCount,scrollOffset,viewportHeight,getFrameMetrics,createViewToken,onViewableItemsChanged,renderRange){var _this=this;if(this._config.waitForInteraction&&!this._hasInteracted||itemCount===0||!getFrameMetrics(0)){return;}var viewableIndices=[];if(itemCount){viewableIndices=this.computeViewableItems(itemCount,scrollOffset,viewportHeight,getFrameMetrics,renderRange);}if(this._viewableIndices.length===viewableIndices.length&&this._viewableIndices.every(function(v,ii){return v===viewableIndices[ii];})){return;}this._viewableIndices=viewableIndices;if(this._config.minimumViewTime){var handle=setTimeout(function(){_this._timers.delete(handle);_this._onUpdateSync(viewableIndices,onViewableItemsChanged,createViewToken);},this._config.minimumViewTime);this._timers.add(handle);}else{this._onUpdateSync(viewableIndices,onViewableItemsChanged,createViewToken);}}},{key:\"resetViewableIndices\",value:function resetViewableIndices(){this._viewableIndices=[];}},{key:\"recordInteraction\",value:function recordInteraction(){this._hasInteracted=true;}},{key:\"_onUpdateSync\",value:function _onUpdateSync(viewableIndicesToCheck,onViewableItemsChanged,createViewToken){var _this2=this;viewableIndicesToCheck=viewableIndicesToCheck.filter(function(ii){return _this2._viewableIndices.includes(ii);});var prevItems=this._viewableItems;var nextItems=new Map(viewableIndicesToCheck.map(function(ii){var viewable=createViewToken(ii,true);return[viewable.key,viewable];}));var changed=[];for(var _iterator=nextItems,_isArray=Array.isArray(_iterator),_i=0,_iterator=_isArray?_iterator:_iterator[typeof Symbol===\"function\"?Symbol.iterator:\"@@iterator\"]();;){var _ref4;if(_isArray){if(_i>=_iterator.length)break;_ref4=_iterator[_i++];}else{_i=_iterator.next();if(_i.done)break;_ref4=_i.value;}var _ref8=_ref4;var _ref3=(0,_slicedToArray2.default)(_ref8,2);var _key2=_ref3[0];var _viewable2=_ref3[1];if(!prevItems.has(_key2)){changed.push(_viewable2);}}for(var _iterator2=prevItems,_isArray2=Array.isArray(_iterator2),_i2=0,_iterator2=_isArray2?_iterator2:_iterator2[typeof Symbol===\"function\"?Symbol.iterator:\"@@iterator\"]();;){var _ref7;if(_isArray2){if(_i2>=_iterator2.length)break;_ref7=_iterator2[_i2++];}else{_i2=_iterator2.next();if(_i2.done)break;_ref7=_i2.value;}var _ref9=_ref7;var _ref6=(0,_slicedToArray2.default)(_ref9,2);var _key3=_ref6[0];var _viewable3=_ref6[1];if(!nextItems.has(_key3)){changed.push((0,_objectSpread2.default)({},_viewable3,{isViewable:false}));}}if(changed.length>0){this._viewableItems=nextItems;onViewableItemsChanged({viewableItems:Array.from(nextItems.values()),changed:changed,viewabilityConfig:this._config});}}},{key:\"__reactstandin__regenerateByEval\",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code);}}]);return ViewabilityHelper;}();function _isViewable(viewAreaMode,viewablePercentThreshold,top,bottom,viewportHeight,itemLength){if(_isEntirelyVisible(top,bottom,viewportHeight)){return true;}else{var pixels=_getPixelsVisible(top,bottom,viewportHeight);var percent=100*(viewAreaMode?pixels/viewportHeight:pixels/itemLength);return percent>=viewablePercentThreshold;}}function _getPixelsVisible(top,bottom,viewportHeight){var visibleHeight=Math.min(bottom,viewportHeight)-Math.max(top,0);return Math.max(0,visibleHeight);}function _isEntirelyVisible(top,bottom,viewportHeight){return top>=0&&bottom<=viewportHeight&&bottom>top;}module.exports=ViewabilityHelper;;(function(){var reactHotLoader=require('react-hot-loader').default;var leaveModule=require('react-hot-loader').leaveModule;if(!reactHotLoader){return;}reactHotLoader.register(ViewabilityHelper,\"ViewabilityHelper\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Lists/ViewabilityHelper.js\");reactHotLoader.register(_isViewable,\"_isViewable\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Lists/ViewabilityHelper.js\");reactHotLoader.register(_getPixelsVisible,\"_getPixelsVisible\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Lists/ViewabilityHelper.js\");reactHotLoader.register(_isEntirelyVisible,\"_isEntirelyVisible\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Lists/ViewabilityHelper.js\");leaveModule(module);})();;",{"version":3,"sources":["/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Lists/ViewabilityHelper.js"],"names":["invariant","require","ViewabilityHelper","config","viewAreaCoveragePercentThreshold","_hasInteracted","_timers","Set","_viewableIndices","_viewableItems","Map","_config","forEach","clearTimeout","itemCount","scrollOffset","viewportHeight","getFrameMetrics","renderRange","itemVisiblePercentThreshold","viewAreaMode","viewablePercentThreshold","viewableIndices","firstVisible","first","last","JSON","stringify","idx","metrics","top","offset","bottom","length","_isViewable","push","createViewToken","onViewableItemsChanged","waitForInteraction","computeViewableItems","every","v","ii","minimumViewTime","handle","setTimeout","delete","_onUpdateSync","add","viewableIndicesToCheck","filter","includes","prevItems","nextItems","map","viewable","key","changed","has","isViewable","viewableItems","Array","from","values","viewabilityConfig","itemLength","_isEntirelyVisible","pixels","_getPixelsVisible","percent","visibleHeight","Math","min","max","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst invariant = require('fbjs/lib/invariant');\n\nexport type ViewToken = {\n  item: any,\n  key: string,\n  index: ?number,\n  isViewable: boolean,\n  section?: any,\n};\n\nexport type ViewabilityConfigCallbackPair = {\n  viewabilityConfig: ViewabilityConfig,\n  onViewableItemsChanged: (info: {\n    viewableItems: Array<ViewToken>,\n    changed: Array<ViewToken>,\n  }) => void,\n};\n\nexport type ViewabilityConfig = {|\n  /**\n   * Minimum amount of time (in milliseconds) that an item must be physically viewable before the\n   * viewability callback will be fired. A high number means that scrolling through content without\n   * stopping will not mark the content as viewable.\n   */\n  minimumViewTime?: number,\n\n  /**\n   * Percent of viewport that must be covered for a partially occluded item to count as\n   * \"viewable\", 0-100. Fully visible items are always considered viewable. A value of 0 means\n   * that a single pixel in the viewport makes the item viewable, and a value of 100 means that\n   * an item must be either entirely visible or cover the entire viewport to count as viewable.\n   */\n  viewAreaCoveragePercentThreshold?: number,\n\n  /**\n   * Similar to `viewAreaPercentThreshold`, but considers the percent of the item that is visible,\n   * rather than the fraction of the viewable area it covers.\n   */\n  itemVisiblePercentThreshold?: number,\n\n  /**\n   * Nothing is considered viewable until the user scrolls or `recordInteraction` is called after\n   * render.\n   */\n  waitForInteraction?: boolean,\n|};\n\n/**\n * A Utility class for calculating viewable items based on current metrics like scroll position and\n * layout.\n *\n * An item is said to be in a \"viewable\" state when any of the following\n * is true for longer than `minimumViewTime` milliseconds (after an interaction if `waitForInteraction`\n * is true):\n *\n * - Occupying >= `viewAreaCoveragePercentThreshold` of the view area XOR fraction of the item\n *   visible in the view area >= `itemVisiblePercentThreshold`.\n * - Entirely visible on screen\n */\nclass ViewabilityHelper {\n  _config: ViewabilityConfig;\n  _hasInteracted: boolean = false;\n  /* $FlowFixMe(>=0.63.0 site=react_native_fb) This comment suppresses an error\n   * found when Flow v0.63 was deployed. To see the error delete this comment\n   * and run Flow. */\n  _timers: Set<number> = new Set();\n  _viewableIndices: Array<number> = [];\n  _viewableItems: Map<string, ViewToken> = new Map();\n\n  constructor(\n    config: ViewabilityConfig = {viewAreaCoveragePercentThreshold: 0},\n  ) {\n    this._config = config;\n  }\n\n  /**\n   * Cleanup, e.g. on unmount. Clears any pending timers.\n   */\n  dispose() {\n    this._timers.forEach(clearTimeout);\n  }\n\n  /**\n   * Determines which items are viewable based on the current metrics and config.\n   */\n  computeViewableItems(\n    itemCount: number,\n    scrollOffset: number,\n    viewportHeight: number,\n    getFrameMetrics: (index: number) => ?{length: number, offset: number},\n    renderRange?: {first: number, last: number}, // Optional optimization to reduce the scan size\n  ): Array<number> {\n    const {\n      itemVisiblePercentThreshold,\n      viewAreaCoveragePercentThreshold,\n    } = this._config;\n    const viewAreaMode = viewAreaCoveragePercentThreshold != null;\n    const viewablePercentThreshold = viewAreaMode\n      ? viewAreaCoveragePercentThreshold\n      : itemVisiblePercentThreshold;\n    invariant(\n      viewablePercentThreshold != null &&\n        (itemVisiblePercentThreshold != null) !==\n          (viewAreaCoveragePercentThreshold != null),\n      'Must set exactly one of itemVisiblePercentThreshold or viewAreaCoveragePercentThreshold',\n    );\n    const viewableIndices = [];\n    if (itemCount === 0) {\n      return viewableIndices;\n    }\n    let firstVisible = -1;\n    const {first, last} = renderRange || {first: 0, last: itemCount - 1};\n    invariant(\n      last < itemCount,\n      'Invalid render range ' + JSON.stringify({renderRange, itemCount}),\n    );\n    for (let idx = first; idx <= last; idx++) {\n      const metrics = getFrameMetrics(idx);\n      if (!metrics) {\n        continue;\n      }\n      const top = metrics.offset - scrollOffset;\n      const bottom = top + metrics.length;\n      if (top < viewportHeight && bottom > 0) {\n        firstVisible = idx;\n        if (\n          _isViewable(\n            viewAreaMode,\n            viewablePercentThreshold,\n            top,\n            bottom,\n            viewportHeight,\n            metrics.length,\n          )\n        ) {\n          viewableIndices.push(idx);\n        }\n      } else if (firstVisible >= 0) {\n        break;\n      }\n    }\n    return viewableIndices;\n  }\n\n  /**\n   * Figures out which items are viewable and how that has changed from before and calls\n   * `onViewableItemsChanged` as appropriate.\n   */\n  onUpdate(\n    itemCount: number,\n    scrollOffset: number,\n    viewportHeight: number,\n    getFrameMetrics: (index: number) => ?{length: number, offset: number},\n    createViewToken: (index: number, isViewable: boolean) => ViewToken,\n    onViewableItemsChanged: ({\n      viewableItems: Array<ViewToken>,\n      changed: Array<ViewToken>,\n    }) => void,\n    renderRange?: {first: number, last: number}, // Optional optimization to reduce the scan size\n  ): void {\n    if (\n      (this._config.waitForInteraction && !this._hasInteracted) ||\n      itemCount === 0 ||\n      !getFrameMetrics(0)\n    ) {\n      return;\n    }\n    let viewableIndices = [];\n    if (itemCount) {\n      viewableIndices = this.computeViewableItems(\n        itemCount,\n        scrollOffset,\n        viewportHeight,\n        getFrameMetrics,\n        renderRange,\n      );\n    }\n    if (\n      this._viewableIndices.length === viewableIndices.length &&\n      this._viewableIndices.every((v, ii) => v === viewableIndices[ii])\n    ) {\n      // We might get a lot of scroll events where visibility doesn't change and we don't want to do\n      // extra work in those cases.\n      return;\n    }\n    this._viewableIndices = viewableIndices;\n    if (this._config.minimumViewTime) {\n      const handle = setTimeout(() => {\n        this._timers.delete(handle);\n        this._onUpdateSync(\n          viewableIndices,\n          onViewableItemsChanged,\n          createViewToken,\n        );\n      }, this._config.minimumViewTime);\n      this._timers.add(handle);\n    } else {\n      this._onUpdateSync(\n        viewableIndices,\n        onViewableItemsChanged,\n        createViewToken,\n      );\n    }\n  }\n\n  /**\n   * clean-up cached _viewableIndices to evaluate changed items on next update\n   */\n  resetViewableIndices() {\n    this._viewableIndices = [];\n  }\n\n  /**\n   * Records that an interaction has happened even if there has been no scroll.\n   */\n  recordInteraction() {\n    this._hasInteracted = true;\n  }\n\n  _onUpdateSync(\n    viewableIndicesToCheck,\n    onViewableItemsChanged,\n    createViewToken,\n  ) {\n    // Filter out indices that have gone out of view since this call was scheduled.\n    viewableIndicesToCheck = viewableIndicesToCheck.filter(ii =>\n      this._viewableIndices.includes(ii),\n    );\n    const prevItems = this._viewableItems;\n    const nextItems = new Map(\n      viewableIndicesToCheck.map(ii => {\n        const viewable = createViewToken(ii, true);\n        return [viewable.key, viewable];\n      }),\n    );\n\n    const changed = [];\n    for (const [key, viewable] of nextItems) {\n      if (!prevItems.has(key)) {\n        changed.push(viewable);\n      }\n    }\n    for (const [key, viewable] of prevItems) {\n      if (!nextItems.has(key)) {\n        changed.push({...viewable, isViewable: false});\n      }\n    }\n    if (changed.length > 0) {\n      this._viewableItems = nextItems;\n      onViewableItemsChanged({\n        viewableItems: Array.from(nextItems.values()),\n        changed,\n        viewabilityConfig: this._config,\n      });\n    }\n  }\n}\n\nfunction _isViewable(\n  viewAreaMode: boolean,\n  viewablePercentThreshold: number,\n  top: number,\n  bottom: number,\n  viewportHeight: number,\n  itemLength: number,\n): boolean {\n  if (_isEntirelyVisible(top, bottom, viewportHeight)) {\n    return true;\n  } else {\n    const pixels = _getPixelsVisible(top, bottom, viewportHeight);\n    const percent =\n      100 * (viewAreaMode ? pixels / viewportHeight : pixels / itemLength);\n    return percent >= viewablePercentThreshold;\n  }\n}\n\nfunction _getPixelsVisible(\n  top: number,\n  bottom: number,\n  viewportHeight: number,\n): number {\n  const visibleHeight = Math.min(bottom, viewportHeight) - Math.max(top, 0);\n  return Math.max(0, visibleHeight);\n}\n\nfunction _isEntirelyVisible(\n  top: number,\n  bottom: number,\n  viewportHeight: number,\n): boolean {\n  return top >= 0 && bottom <= viewportHeight && bottom > top;\n}\n\nmodule.exports = ViewabilityHelper;\n"]}]}