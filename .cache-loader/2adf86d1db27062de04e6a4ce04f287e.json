{"remainingRequest":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js??ref--5-2!/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/PushNotificationIOS/PushNotificationIOS.js","dependencies":[{"path":"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/PushNotificationIOS/PushNotificationIOS.js","mtime":1539700108130},{"path":"/Users/jeffrey/HaulTesting/node_modules/cache-loader/dist/cjs.js","mtime":1539652983212},{"path":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js","mtime":1539652983315},{"path":"/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js","mtime":1539615827828}],"contextDependencies":[],"result":["'use strict';var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));(function(){var enterModule=require('react-hot-loader').enterModule;enterModule&&enterModule(module);})();var NativeEventEmitter=require('NativeEventEmitter');var RCTPushNotificationManager=require('NativeModules').PushNotificationManager;var invariant=require('fbjs/lib/invariant');var PushNotificationEmitter=new NativeEventEmitter(RCTPushNotificationManager);var _notifHandlers=new Map();var DEVICE_NOTIF_EVENT='remoteNotificationReceived';var NOTIF_REGISTER_EVENT='remoteNotificationsRegistered';var NOTIF_REGISTRATION_ERROR_EVENT='remoteNotificationRegistrationError';var DEVICE_LOCAL_NOTIF_EVENT='localNotificationReceived';var PushNotificationIOS=function(){(0,_createClass2.default)(PushNotificationIOS,null,[{key:\"presentLocalNotification\",value:function presentLocalNotification(details){RCTPushNotificationManager.presentLocalNotification(details);}},{key:\"scheduleLocalNotification\",value:function scheduleLocalNotification(details){RCTPushNotificationManager.scheduleLocalNotification(details);}},{key:\"cancelAllLocalNotifications\",value:function cancelAllLocalNotifications(){RCTPushNotificationManager.cancelAllLocalNotifications();}},{key:\"removeAllDeliveredNotifications\",value:function removeAllDeliveredNotifications(){RCTPushNotificationManager.removeAllDeliveredNotifications();}},{key:\"getDeliveredNotifications\",value:function getDeliveredNotifications(callback){RCTPushNotificationManager.getDeliveredNotifications(callback);}},{key:\"removeDeliveredNotifications\",value:function removeDeliveredNotifications(identifiers){RCTPushNotificationManager.removeDeliveredNotifications(identifiers);}},{key:\"setApplicationIconBadgeNumber\",value:function setApplicationIconBadgeNumber(number){RCTPushNotificationManager.setApplicationIconBadgeNumber(number);}},{key:\"getApplicationIconBadgeNumber\",value:function getApplicationIconBadgeNumber(callback){RCTPushNotificationManager.getApplicationIconBadgeNumber(callback);}},{key:\"cancelLocalNotifications\",value:function cancelLocalNotifications(userInfo){RCTPushNotificationManager.cancelLocalNotifications(userInfo);}},{key:\"getScheduledLocalNotifications\",value:function getScheduledLocalNotifications(callback){RCTPushNotificationManager.getScheduledLocalNotifications(callback);}},{key:\"addEventListener\",value:function addEventListener(type,handler){invariant(type==='notification'||type==='register'||type==='registrationError'||type==='localNotification','PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events');var listener;if(type==='notification'){listener=PushNotificationEmitter.addListener(DEVICE_NOTIF_EVENT,function(notifData){handler(new PushNotificationIOS(notifData));});}else if(type==='localNotification'){listener=PushNotificationEmitter.addListener(DEVICE_LOCAL_NOTIF_EVENT,function(notifData){handler(new PushNotificationIOS(notifData));});}else if(type==='register'){listener=PushNotificationEmitter.addListener(NOTIF_REGISTER_EVENT,function(registrationInfo){handler(registrationInfo.deviceToken);});}else if(type==='registrationError'){listener=PushNotificationEmitter.addListener(NOTIF_REGISTRATION_ERROR_EVENT,function(errorInfo){handler(errorInfo);});}_notifHandlers.set(type,listener);}},{key:\"removeEventListener\",value:function removeEventListener(type,handler){invariant(type==='notification'||type==='register'||type==='registrationError'||type==='localNotification','PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events');var listener=_notifHandlers.get(type);if(!listener){return;}listener.remove();_notifHandlers.delete(type);}},{key:\"requestPermissions\",value:function requestPermissions(permissions){var requestedPermissions={};if(permissions){requestedPermissions={alert:!!permissions.alert,badge:!!permissions.badge,sound:!!permissions.sound};}else{requestedPermissions={alert:true,badge:true,sound:true};}return RCTPushNotificationManager.requestPermissions(requestedPermissions);}},{key:\"abandonPermissions\",value:function abandonPermissions(){RCTPushNotificationManager.abandonPermissions();}},{key:\"checkPermissions\",value:function checkPermissions(callback){invariant(typeof callback==='function','Must provide a valid callback');RCTPushNotificationManager.checkPermissions(callback);}},{key:\"getInitialNotification\",value:function getInitialNotification(){return RCTPushNotificationManager.getInitialNotification().then(function(notification){return notification&&new PushNotificationIOS(notification);});}}]);function PushNotificationIOS(nativeNotif){var _this=this;(0,_classCallCheck2.default)(this,PushNotificationIOS);this._data={};this._remoteNotificationCompleteCallbackCalled=false;this._isRemote=nativeNotif.remote;if(this._isRemote){this._notificationId=nativeNotif.notificationId;}if(nativeNotif.remote){Object.keys(nativeNotif).forEach(function(notifKey){var notifVal=nativeNotif[notifKey];if(notifKey==='aps'){_this._alert=notifVal.alert;_this._sound=notifVal.sound;_this._badgeCount=notifVal.badge;_this._category=notifVal.category;_this._contentAvailable=notifVal['content-available'];_this._threadID=notifVal['thread-id'];}else{_this._data[notifKey]=notifVal;}});}else{this._badgeCount=nativeNotif.applicationIconBadgeNumber;this._sound=nativeNotif.soundName;this._alert=nativeNotif.alertBody;this._data=nativeNotif.userInfo;this._category=nativeNotif.category;}}(0,_createClass2.default)(PushNotificationIOS,[{key:\"finish\",value:function finish(fetchResult){if(!this._isRemote||!this._notificationId||this._remoteNotificationCompleteCallbackCalled){return;}this._remoteNotificationCompleteCallbackCalled=true;RCTPushNotificationManager.onFinishRemoteNotification(this._notificationId,fetchResult);}},{key:\"getMessage\",value:function getMessage(){return this._alert;}},{key:\"getSound\",value:function getSound(){return this._sound;}},{key:\"getCategory\",value:function getCategory(){return this._category;}},{key:\"getAlert\",value:function getAlert(){return this._alert;}},{key:\"getContentAvailable\",value:function getContentAvailable(){return this._contentAvailable;}},{key:\"getBadgeCount\",value:function getBadgeCount(){return this._badgeCount;}},{key:\"getData\",value:function getData(){return this._data;}},{key:\"getThreadID\",value:function getThreadID(){return this._threadID;}},{key:\"__reactstandin__regenerateByEval\",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code);}}]);return PushNotificationIOS;}();PushNotificationIOS.FetchResult={NewData:'UIBackgroundFetchResultNewData',NoData:'UIBackgroundFetchResultNoData',ResultFailed:'UIBackgroundFetchResultFailed'};module.exports=PushNotificationIOS;;(function(){var reactHotLoader=require('react-hot-loader').default;var leaveModule=require('react-hot-loader').leaveModule;if(!reactHotLoader){return;}reactHotLoader.register(RCTPushNotificationManager,\"RCTPushNotificationManager\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/PushNotificationIOS/PushNotificationIOS.js\");reactHotLoader.register(PushNotificationEmitter,\"PushNotificationEmitter\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/PushNotificationIOS/PushNotificationIOS.js\");reactHotLoader.register(_notifHandlers,\"_notifHandlers\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/PushNotificationIOS/PushNotificationIOS.js\");reactHotLoader.register(DEVICE_NOTIF_EVENT,\"DEVICE_NOTIF_EVENT\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/PushNotificationIOS/PushNotificationIOS.js\");reactHotLoader.register(NOTIF_REGISTER_EVENT,\"NOTIF_REGISTER_EVENT\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/PushNotificationIOS/PushNotificationIOS.js\");reactHotLoader.register(NOTIF_REGISTRATION_ERROR_EVENT,\"NOTIF_REGISTRATION_ERROR_EVENT\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/PushNotificationIOS/PushNotificationIOS.js\");reactHotLoader.register(DEVICE_LOCAL_NOTIF_EVENT,\"DEVICE_LOCAL_NOTIF_EVENT\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/PushNotificationIOS/PushNotificationIOS.js\");reactHotLoader.register(PushNotificationIOS,\"PushNotificationIOS\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/PushNotificationIOS/PushNotificationIOS.js\");leaveModule(module);})();;",{"version":3,"sources":["/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/PushNotificationIOS/PushNotificationIOS.js"],"names":["NativeEventEmitter","require","RCTPushNotificationManager","PushNotificationManager","invariant","PushNotificationEmitter","_notifHandlers","Map","DEVICE_NOTIF_EVENT","NOTIF_REGISTER_EVENT","NOTIF_REGISTRATION_ERROR_EVENT","DEVICE_LOCAL_NOTIF_EVENT","PushNotificationIOS","details","presentLocalNotification","scheduleLocalNotification","cancelAllLocalNotifications","removeAllDeliveredNotifications","callback","getDeliveredNotifications","identifiers","removeDeliveredNotifications","number","setApplicationIconBadgeNumber","getApplicationIconBadgeNumber","userInfo","cancelLocalNotifications","getScheduledLocalNotifications","type","handler","listener","addListener","notifData","registrationInfo","deviceToken","errorInfo","set","get","remove","delete","permissions","requestedPermissions","alert","badge","sound","requestPermissions","abandonPermissions","checkPermissions","getInitialNotification","then","notification","nativeNotif","_data","_remoteNotificationCompleteCallbackCalled","_isRemote","remote","_notificationId","notificationId","Object","keys","forEach","notifKey","notifVal","_alert","_sound","_badgeCount","_category","category","_contentAvailable","_threadID","applicationIconBadgeNumber","soundName","alertBody","fetchResult","onFinishRemoteNotification","FetchResult","NewData","NoData","ResultFailed","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst NativeEventEmitter = require('NativeEventEmitter');\nconst RCTPushNotificationManager = require('NativeModules')\n  .PushNotificationManager;\nconst invariant = require('fbjs/lib/invariant');\n\nconst PushNotificationEmitter = new NativeEventEmitter(\n  RCTPushNotificationManager,\n);\n\nconst _notifHandlers = new Map();\n\nconst DEVICE_NOTIF_EVENT = 'remoteNotificationReceived';\nconst NOTIF_REGISTER_EVENT = 'remoteNotificationsRegistered';\nconst NOTIF_REGISTRATION_ERROR_EVENT = 'remoteNotificationRegistrationError';\nconst DEVICE_LOCAL_NOTIF_EVENT = 'localNotificationReceived';\n\nexport type ContentAvailable = 1 | null | void;\n\nexport type FetchResult = {\n  NewData: string,\n  NoData: string,\n  ResultFailed: string,\n};\n\n/**\n * An event emitted by PushNotificationIOS.\n */\nexport type PushNotificationEventName = $Enum<{\n  /**\n   * Fired when a remote notification is received. The handler will be invoked\n   * with an instance of `PushNotificationIOS`.\n   */\n  notification: string,\n  /**\n   * Fired when a local notification is received. The handler will be invoked\n   * with an instance of `PushNotificationIOS`.\n   */\n  localNotification: string,\n  /**\n   * Fired when the user registers for remote notifications. The handler will be\n   * invoked with a hex string representing the deviceToken.\n   */\n  register: string,\n  /**\n   * Fired when the user fails to register for remote notifications. Typically\n   * occurs when APNS is having issues, or the device is a simulator. The\n   * handler will be invoked with {message: string, code: number, details: any}.\n   */\n  registrationError: string,\n}>;\n\n/**\n *\n * Handle push notifications for your app, including permission handling and\n * icon badge number.\n *\n * See https://facebook.github.io/react-native/docs/pushnotificationios.html\n */\nclass PushNotificationIOS {\n  _data: Object;\n  _alert: string | Object;\n  _sound: string;\n  _category: string;\n  _contentAvailable: ContentAvailable;\n  _badgeCount: number;\n  _notificationId: string;\n  _isRemote: boolean;\n  _remoteNotificationCompleteCallbackCalled: boolean;\n  _threadID: string;\n\n  static FetchResult: FetchResult = {\n    NewData: 'UIBackgroundFetchResultNewData',\n    NoData: 'UIBackgroundFetchResultNoData',\n    ResultFailed: 'UIBackgroundFetchResultFailed',\n  };\n\n  /**\n   * Schedules the localNotification for immediate presentation.\n   *\n   * See https://facebook.github.io/react-native/docs/pushnotificationios.html#presentlocalnotification\n   */\n  static presentLocalNotification(details: Object) {\n    RCTPushNotificationManager.presentLocalNotification(details);\n  }\n\n  /**\n   * Schedules the localNotification for future presentation.\n   *\n   * See https://facebook.github.io/react-native/docs/pushnotificationios.html#schedulelocalnotification\n   */\n  static scheduleLocalNotification(details: Object) {\n    RCTPushNotificationManager.scheduleLocalNotification(details);\n  }\n\n  /**\n   * Cancels all scheduled localNotifications.\n   *\n   * See https://facebook.github.io/react-native/docs/pushnotificationios.html#cancelalllocalnotifications\n   */\n  static cancelAllLocalNotifications() {\n    RCTPushNotificationManager.cancelAllLocalNotifications();\n  }\n\n  /**\n   * Remove all delivered notifications from Notification Center.\n   *\n   * See https://facebook.github.io/react-native/docs/pushnotificationios.html#removealldeliverednotifications\n   */\n  static removeAllDeliveredNotifications(): void {\n    RCTPushNotificationManager.removeAllDeliveredNotifications();\n  }\n\n  /**\n   * Provides you with a list of the app’s notifications that are still displayed in Notification Center.\n   *\n   * See https://facebook.github.io/react-native/docs/pushnotificationios.html#getdeliverednotifications\n   */\n  static getDeliveredNotifications(\n    callback: (notifications: Array<Object>) => void,\n  ): void {\n    RCTPushNotificationManager.getDeliveredNotifications(callback);\n  }\n\n  /**\n   * Removes the specified notifications from Notification Center\n   *\n   * See https://facebook.github.io/react-native/docs/pushnotificationios.html#removedeliverednotifications\n   */\n  static removeDeliveredNotifications(identifiers: Array<string>): void {\n    RCTPushNotificationManager.removeDeliveredNotifications(identifiers);\n  }\n\n  /**\n   * Sets the badge number for the app icon on the home screen.\n   *\n   * See https://facebook.github.io/react-native/docs/pushnotificationios.html#setapplicationiconbadgenumber\n   */\n  static setApplicationIconBadgeNumber(number: number) {\n    RCTPushNotificationManager.setApplicationIconBadgeNumber(number);\n  }\n\n  /**\n   * Gets the current badge number for the app icon on the home screen.\n   *\n   * See https://facebook.github.io/react-native/docs/pushnotificationios.html#getapplicationiconbadgenumber\n   */\n  static getApplicationIconBadgeNumber(callback: Function) {\n    RCTPushNotificationManager.getApplicationIconBadgeNumber(callback);\n  }\n\n  /**\n   * Cancel local notifications.\n   *\n   * See https://facebook.github.io/react-native/docs/pushnotificationios.html#cancellocalnotification\n   */\n  static cancelLocalNotifications(userInfo: Object) {\n    RCTPushNotificationManager.cancelLocalNotifications(userInfo);\n  }\n\n  /**\n   * Gets the local notifications that are currently scheduled.\n   *\n   * See https://facebook.github.io/react-native/docs/pushnotificationios.html#getscheduledlocalnotifications\n   */\n  static getScheduledLocalNotifications(callback: Function) {\n    RCTPushNotificationManager.getScheduledLocalNotifications(callback);\n  }\n\n  /**\n   * Attaches a listener to remote or local notification events while the app\n   * is running in the foreground or the background.\n   *\n   * See https://facebook.github.io/react-native/docs/pushnotificationios.html#addeventlistener\n   */\n  static addEventListener(type: PushNotificationEventName, handler: Function) {\n    invariant(\n      type === 'notification' ||\n        type === 'register' ||\n        type === 'registrationError' ||\n        type === 'localNotification',\n      'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events',\n    );\n    let listener;\n    if (type === 'notification') {\n      listener = PushNotificationEmitter.addListener(\n        DEVICE_NOTIF_EVENT,\n        notifData => {\n          handler(new PushNotificationIOS(notifData));\n        },\n      );\n    } else if (type === 'localNotification') {\n      listener = PushNotificationEmitter.addListener(\n        DEVICE_LOCAL_NOTIF_EVENT,\n        notifData => {\n          handler(new PushNotificationIOS(notifData));\n        },\n      );\n    } else if (type === 'register') {\n      listener = PushNotificationEmitter.addListener(\n        NOTIF_REGISTER_EVENT,\n        registrationInfo => {\n          handler(registrationInfo.deviceToken);\n        },\n      );\n    } else if (type === 'registrationError') {\n      listener = PushNotificationEmitter.addListener(\n        NOTIF_REGISTRATION_ERROR_EVENT,\n        errorInfo => {\n          handler(errorInfo);\n        },\n      );\n    }\n    _notifHandlers.set(type, listener);\n  }\n\n  /**\n   * Removes the event listener. Do this in `componentWillUnmount` to prevent\n   * memory leaks.\n   *\n   * See https://facebook.github.io/react-native/docs/pushnotificationios.html#removeeventlistener\n   */\n  static removeEventListener(\n    type: PushNotificationEventName,\n    handler: Function,\n  ) {\n    invariant(\n      type === 'notification' ||\n        type === 'register' ||\n        type === 'registrationError' ||\n        type === 'localNotification',\n      'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events',\n    );\n    const listener = _notifHandlers.get(type);\n    if (!listener) {\n      return;\n    }\n    listener.remove();\n    _notifHandlers.delete(type);\n  }\n\n  /**\n   * Requests notification permissions from iOS, prompting the user's\n   * dialog box. By default, it will request all notification permissions, but\n   * a subset of these can be requested by passing a map of requested\n   * permissions.\n   *\n   * See https://facebook.github.io/react-native/docs/pushnotificationios.html#requestpermissions\n   */\n  static requestPermissions(permissions?: {\n    alert?: boolean,\n    badge?: boolean,\n    sound?: boolean,\n  }): Promise<{\n    alert: boolean,\n    badge: boolean,\n    sound: boolean,\n  }> {\n    let requestedPermissions = {};\n    if (permissions) {\n      requestedPermissions = {\n        alert: !!permissions.alert,\n        badge: !!permissions.badge,\n        sound: !!permissions.sound,\n      };\n    } else {\n      requestedPermissions = {\n        alert: true,\n        badge: true,\n        sound: true,\n      };\n    }\n    return RCTPushNotificationManager.requestPermissions(requestedPermissions);\n  }\n\n  /**\n   * Unregister for all remote notifications received via Apple Push Notification service.\n   *\n   * See https://facebook.github.io/react-native/docs/pushnotificationios.html#abandonpermissions\n   */\n  static abandonPermissions() {\n    RCTPushNotificationManager.abandonPermissions();\n  }\n\n  /**\n   * See what push permissions are currently enabled. `callback` will be\n   * invoked with a `permissions` object.\n   *\n   * See https://facebook.github.io/react-native/docs/pushnotificationios.html#checkpermissions\n   */\n  static checkPermissions(callback: Function) {\n    invariant(typeof callback === 'function', 'Must provide a valid callback');\n    RCTPushNotificationManager.checkPermissions(callback);\n  }\n\n  /**\n   * This method returns a promise that resolves to either the notification\n   * object if the app was launched by a push notification, or `null` otherwise.\n   *\n   * See https://facebook.github.io/react-native/docs/pushnotificationios.html#getinitialnotification\n   */\n  static getInitialNotification(): Promise<?PushNotificationIOS> {\n    return RCTPushNotificationManager.getInitialNotification().then(\n      notification => {\n        return notification && new PushNotificationIOS(notification);\n      },\n    );\n  }\n\n  /**\n   * You will never need to instantiate `PushNotificationIOS` yourself.\n   * Listening to the `notification` event and invoking\n   * `getInitialNotification` is sufficient\n   *\n   */\n  constructor(nativeNotif: Object) {\n    this._data = {};\n    this._remoteNotificationCompleteCallbackCalled = false;\n    this._isRemote = nativeNotif.remote;\n    if (this._isRemote) {\n      this._notificationId = nativeNotif.notificationId;\n    }\n\n    if (nativeNotif.remote) {\n      // Extract data from Apple's `aps` dict as defined:\n      // https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/ApplePushService.html\n      Object.keys(nativeNotif).forEach(notifKey => {\n        const notifVal = nativeNotif[notifKey];\n        if (notifKey === 'aps') {\n          this._alert = notifVal.alert;\n          this._sound = notifVal.sound;\n          this._badgeCount = notifVal.badge;\n          this._category = notifVal.category;\n          this._contentAvailable = notifVal['content-available'];\n          this._threadID = notifVal['thread-id'];\n        } else {\n          this._data[notifKey] = notifVal;\n        }\n      });\n    } else {\n      // Local notifications aren't being sent down with `aps` dict.\n      this._badgeCount = nativeNotif.applicationIconBadgeNumber;\n      this._sound = nativeNotif.soundName;\n      this._alert = nativeNotif.alertBody;\n      this._data = nativeNotif.userInfo;\n      this._category = nativeNotif.category;\n    }\n  }\n\n  /**\n   * This method is available for remote notifications that have been received via:\n   * `application:didReceiveRemoteNotification:fetchCompletionHandler:`\n   *\n   * See https://facebook.github.io/react-native/docs/pushnotificationios.html#finish\n   */\n  finish(fetchResult: string) {\n    if (\n      !this._isRemote ||\n      !this._notificationId ||\n      this._remoteNotificationCompleteCallbackCalled\n    ) {\n      return;\n    }\n    this._remoteNotificationCompleteCallbackCalled = true;\n\n    RCTPushNotificationManager.onFinishRemoteNotification(\n      this._notificationId,\n      fetchResult,\n    );\n  }\n\n  /**\n   * An alias for `getAlert` to get the notification's main message string\n   */\n  getMessage(): ?string | ?Object {\n    // alias because \"alert\" is an ambiguous name\n    return this._alert;\n  }\n\n  /**\n   * Gets the sound string from the `aps` object\n   *\n   * See https://facebook.github.io/react-native/docs/pushnotificationios.html#getsound\n   */\n  getSound(): ?string {\n    return this._sound;\n  }\n\n  /**\n   * Gets the category string from the `aps` object\n   *\n   * See https://facebook.github.io/react-native/docs/pushnotificationios.html#getcategory\n   */\n  getCategory(): ?string {\n    return this._category;\n  }\n\n  /**\n   * Gets the notification's main message from the `aps` object\n   *\n   * See https://facebook.github.io/react-native/docs/pushnotificationios.html#getalert\n   */\n  getAlert(): ?string | ?Object {\n    return this._alert;\n  }\n\n  /**\n   * Gets the content-available number from the `aps` object\n   *\n   * See https://facebook.github.io/react-native/docs/pushnotificationios.html#getcontentavailable\n   */\n  getContentAvailable(): ContentAvailable {\n    return this._contentAvailable;\n  }\n\n  /**\n   * Gets the badge count number from the `aps` object\n   *\n   * See https://facebook.github.io/react-native/docs/pushnotificationios.html#getbadgecount\n   */\n  getBadgeCount(): ?number {\n    return this._badgeCount;\n  }\n\n  /**\n   * Gets the data object on the notif\n   *\n   * See https://facebook.github.io/react-native/docs/pushnotificationios.html#getdata\n   */\n  getData(): ?Object {\n    return this._data;\n  }\n\n  /**\n   * Gets the thread ID on the notif\n   *\n   * See https://facebook.github.io/react-native/docs/pushnotificationios.html#getthreadid\n   */\n  getThreadID(): ?string {\n    return this._threadID;\n  }\n}\n\nmodule.exports = PushNotificationIOS;\n"]}]}