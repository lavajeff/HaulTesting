{"remainingRequest":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js??ref--5-2!/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Alert/AlertIOS.js","dependencies":[{"path":"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Alert/AlertIOS.js","mtime":1539700108130},{"path":"/Users/jeffrey/HaulTesting/node_modules/cache-loader/dist/cjs.js","mtime":1539652983212},{"path":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js","mtime":1539652983315},{"path":"/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js","mtime":1539615827828}],"contextDependencies":[],"result":["'use strict';var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));(function(){var enterModule=require('react-hot-loader').enterModule;enterModule&&enterModule(module);})();var RCTAlertManager=require('NativeModules').AlertManager;var AlertIOS=function(){function AlertIOS(){(0,_classCallCheck2.default)(this,AlertIOS);}(0,_createClass2.default)(AlertIOS,null,[{key:\"alert\",value:function alert(title,message,callbackOrButtons,type){if(typeof type!=='undefined'){console.warn('AlertIOS.alert() with a 4th \"type\" parameter is deprecated and will be removed. Use AlertIOS.prompt() instead.');this.prompt(title,message,callbackOrButtons,type);return;}this.prompt(title,message,callbackOrButtons,'default');}},{key:\"prompt\",value:function prompt(title,message,callbackOrButtons){var type=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'plain-text';var defaultValue=arguments.length>4?arguments[4]:undefined;var keyboardType=arguments.length>5?arguments[5]:undefined;if(typeof type==='function'){console.warn('You passed a callback function as the \"type\" argument to AlertIOS.prompt(). React Native is '+'assuming  you want to use the deprecated AlertIOS.prompt(title, defaultValue, buttons, callback) '+'signature. The current signature is AlertIOS.prompt(title, message, callbackOrButtons, type, defaultValue, '+'keyboardType) and the old syntax will be removed in a future version.');var callback=type;RCTAlertManager.alertWithArgs({title:title||'',type:'plain-text',defaultValue:message},function(id,value){callback(value);});return;}var callbacks=[];var buttons=[];var cancelButtonKey;var destructiveButtonKey;if(typeof callbackOrButtons==='function'){callbacks=[callbackOrButtons];}else if(callbackOrButtons instanceof Array){callbackOrButtons.forEach(function(btn,index){callbacks[index]=btn.onPress;if(btn.style==='cancel'){cancelButtonKey=String(index);}else if(btn.style==='destructive'){destructiveButtonKey=String(index);}if(btn.text||index<(callbackOrButtons||[]).length-1){var btnDef={};btnDef[index]=btn.text||'';buttons.push(btnDef);}});}RCTAlertManager.alertWithArgs({title:title||'',message:message||undefined,buttons:buttons,type:type||undefined,defaultValue:defaultValue,cancelButtonKey:cancelButtonKey,destructiveButtonKey:destructiveButtonKey,keyboardType:keyboardType},function(id,value){var cb=callbacks[id];cb&&cb(value);});}}]);return AlertIOS;}();module.exports=AlertIOS;;(function(){var reactHotLoader=require('react-hot-loader').default;var leaveModule=require('react-hot-loader').leaveModule;if(!reactHotLoader){return;}reactHotLoader.register(RCTAlertManager,\"RCTAlertManager\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Alert/AlertIOS.js\");reactHotLoader.register(AlertIOS,\"AlertIOS\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Alert/AlertIOS.js\");leaveModule(module);})();;",{"version":3,"sources":["/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Alert/AlertIOS.js"],"names":["RCTAlertManager","require","AlertManager","AlertIOS","title","message","callbackOrButtons","type","console","warn","prompt","defaultValue","keyboardType","callback","alertWithArgs","id","value","callbacks","buttons","cancelButtonKey","destructiveButtonKey","Array","forEach","btn","index","onPress","style","String","text","length","btnDef","push","undefined","cb","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n * @jsdoc\n */\n\n'use strict';\n\nconst RCTAlertManager = require('NativeModules').AlertManager;\n\n/**\n * An Alert button type\n */\nexport type AlertType = $Enum<{\n  /**\n   * Default alert with no inputs\n   */\n  default: string,\n  /**\n   * Plain text input alert\n   */\n  'plain-text': string,\n  /**\n   * Secure text input alert\n   */\n  'secure-text': string,\n  /**\n   * Login and password alert\n   */\n  'login-password': string,\n}>;\n\n/**\n * An Alert button style\n */\nexport type AlertButtonStyle = $Enum<{\n  /**\n   * Default button style\n   */\n  default: string,\n  /**\n   * Cancel button style\n   */\n  cancel: string,\n  /**\n   * Destructive button style\n   */\n  destructive: string,\n}>;\n\n/**\n * Array or buttons\n * @typedef {Array} ButtonsArray\n * @property {string=} text Button label\n * @property {Function=} onPress Callback function when button pressed\n * @property {AlertButtonStyle=} style Button style\n */\nexport type ButtonsArray = Array<{\n  /**\n   * Button label\n   */\n  text?: string,\n  /**\n   * Callback function when button pressed\n   */\n  onPress?: ?Function,\n  /**\n   * Button style\n   */\n  style?: AlertButtonStyle,\n}>;\n\n/**\n * Use `AlertIOS` to display an alert dialog with a message or to create a prompt for user input on iOS. If you don't need to prompt for user input, we recommend using `Alert.alert() for cross-platform support.\n *\n * See http://facebook.github.io/react-native/docs/alertios.html\n */\nclass AlertIOS {\n  /**\n   * Create and display a popup alert.\n   *\n   * See http://facebook.github.io/react-native/docs/alertios.html#alert\n   */\n  static alert(\n    title: ?string,\n    message?: ?string,\n    callbackOrButtons?: ?((() => void) | ButtonsArray),\n    type?: AlertType,\n  ): void {\n    if (typeof type !== 'undefined') {\n      console.warn(\n        'AlertIOS.alert() with a 4th \"type\" parameter is deprecated and will be removed. Use AlertIOS.prompt() instead.',\n      );\n      this.prompt(title, message, callbackOrButtons, type);\n      return;\n    }\n    this.prompt(title, message, callbackOrButtons, 'default');\n  }\n\n  /**\n   * Create and display a prompt to enter some text.\n   *\n   * See http://facebook.github.io/react-native/docs/alertios.html#prompt\n   */\n  static prompt(\n    title: ?string,\n    message?: ?string,\n    callbackOrButtons?: ?(((text: string) => void) | ButtonsArray),\n    type?: ?AlertType = 'plain-text',\n    defaultValue?: string,\n    keyboardType?: string,\n  ): void {\n    if (typeof type === 'function') {\n      console.warn(\n        'You passed a callback function as the \"type\" argument to AlertIOS.prompt(). React Native is ' +\n          'assuming  you want to use the deprecated AlertIOS.prompt(title, defaultValue, buttons, callback) ' +\n          'signature. The current signature is AlertIOS.prompt(title, message, callbackOrButtons, type, defaultValue, ' +\n          'keyboardType) and the old syntax will be removed in a future version.',\n      );\n\n      const callback = type;\n      RCTAlertManager.alertWithArgs(\n        {\n          title: title || '',\n          type: 'plain-text',\n          defaultValue: message,\n        },\n        (id, value) => {\n          callback(value);\n        },\n      );\n      return;\n    }\n\n    let callbacks = [];\n    const buttons = [];\n    let cancelButtonKey;\n    let destructiveButtonKey;\n    if (typeof callbackOrButtons === 'function') {\n      callbacks = [callbackOrButtons];\n    } else if (callbackOrButtons instanceof Array) {\n      callbackOrButtons.forEach((btn, index) => {\n        callbacks[index] = btn.onPress;\n        if (btn.style === 'cancel') {\n          cancelButtonKey = String(index);\n        } else if (btn.style === 'destructive') {\n          destructiveButtonKey = String(index);\n        }\n        if (btn.text || index < (callbackOrButtons || []).length - 1) {\n          const btnDef = {};\n          btnDef[index] = btn.text || '';\n          buttons.push(btnDef);\n        }\n      });\n    }\n\n    RCTAlertManager.alertWithArgs(\n      {\n        title: title || '',\n        message: message || undefined,\n        buttons,\n        type: type || undefined,\n        defaultValue,\n        cancelButtonKey,\n        destructiveButtonKey,\n        keyboardType,\n      },\n      (id, value) => {\n        const cb = callbacks[id];\n        cb && cb(value);\n      },\n    );\n  }\n}\n\nmodule.exports = AlertIOS;\n"]}]}