{"remainingRequest":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js??ref--5-2!/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Experimental/SwipeableRow/SwipeableListViewDataSource.js","dependencies":[{"path":"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Experimental/SwipeableRow/SwipeableListViewDataSource.js","mtime":1539700108130},{"path":"/Users/jeffrey/HaulTesting/node_modules/cache-loader/dist/cjs.js","mtime":1539652983212},{"path":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js","mtime":1539652983315},{"path":"/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js","mtime":1539615827828}],"contextDependencies":[],"result":["'use strict';var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));(function(){var enterModule=require('react-hot-loader').enterModule;enterModule&&enterModule(module);})();var ListViewDataSource=require('ListViewDataSource');var SwipeableListViewDataSource=function(){function SwipeableListViewDataSource(params){var _this=this;(0,_classCallCheck2.default)(this,SwipeableListViewDataSource);this._dataSource=new ListViewDataSource({getRowData:params.getRowData,getSectionHeaderData:params.getSectionHeaderData,rowHasChanged:function rowHasChanged(row1,row2){return row1.id!==_this._previousOpenRowID&&row2.id===_this._openRowID||row1.id===_this._previousOpenRowID&&row2.id!==_this._openRowID||params.rowHasChanged(row1,row2);},sectionHeaderHasChanged:params.sectionHeaderHasChanged});}(0,_createClass2.default)(SwipeableListViewDataSource,[{key:\"cloneWithRowsAndSections\",value:function cloneWithRowsAndSections(dataBlob,sectionIdentities,rowIdentities){this._dataSource=this._dataSource.cloneWithRowsAndSections(dataBlob,sectionIdentities,rowIdentities);this._dataBlob=dataBlob;this.rowIdentities=this._dataSource.rowIdentities;this.sectionIdentities=this._dataSource.sectionIdentities;return this;}},{key:\"getDataSource\",value:function getDataSource(){return this._dataSource;}},{key:\"getOpenRowID\",value:function getOpenRowID(){return this._openRowID;}},{key:\"getFirstRowID\",value:function getFirstRowID(){if(this.rowIdentities){return this.rowIdentities[0]&&this.rowIdentities[0][0];}return Object.keys(this._dataBlob)[0];}},{key:\"getLastRowID\",value:function getLastRowID(){if(this.rowIdentities&&this.rowIdentities.length){var lastSection=this.rowIdentities[this.rowIdentities.length-1];if(lastSection&&lastSection.length){return lastSection[lastSection.length-1];}}return Object.keys(this._dataBlob)[this._dataBlob.length-1];}},{key:\"setOpenRowID\",value:function setOpenRowID(rowID){this._previousOpenRowID=this._openRowID;this._openRowID=rowID;this._dataSource=this._dataSource.cloneWithRowsAndSections(this._dataBlob,this.sectionIdentities,this.rowIdentities);return this;}},{key:\"__reactstandin__regenerateByEval\",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code);}}]);return SwipeableListViewDataSource;}();module.exports=SwipeableListViewDataSource;;(function(){var reactHotLoader=require('react-hot-loader').default;var leaveModule=require('react-hot-loader').leaveModule;if(!reactHotLoader){return;}reactHotLoader.register(SwipeableListViewDataSource,\"SwipeableListViewDataSource\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Experimental/SwipeableRow/SwipeableListViewDataSource.js\");leaveModule(module);})();;",{"version":3,"sources":["/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Experimental/SwipeableRow/SwipeableListViewDataSource.js"],"names":["ListViewDataSource","require","SwipeableListViewDataSource","params","_dataSource","getRowData","getSectionHeaderData","rowHasChanged","row1","row2","id","_previousOpenRowID","_openRowID","sectionHeaderHasChanged","dataBlob","sectionIdentities","rowIdentities","cloneWithRowsAndSections","_dataBlob","Object","keys","length","lastSection","rowID","module","exports"],"mappings":"AASA,a,mXAEA,GAAMA,CAAAA,kBAAkB,CAAGC,OAAO,CAAC,oBAAD,CAAlC,C,GAUMC,CAAAA,2B,YAUJ,qCAAYC,MAAZ,CAA4B,+EAC1B,KAAKC,WAAL,CAAmB,GAAIJ,CAAAA,kBAAJ,CAAuB,CACxCK,UAAU,CAAEF,MAAM,CAACE,UADqB,CAExCC,oBAAoB,CAAEH,MAAM,CAACG,oBAFW,CAGxCC,aAAa,CAAE,uBAACC,IAAD,CAAOC,IAAP,CAAgB,CAK7B,MACGD,CAAAA,IAAI,CAACE,EAAL,GAAY,KAAI,CAACC,kBAAjB,EACCF,IAAI,CAACC,EAAL,GAAY,KAAI,CAACE,UADnB,EAECJ,IAAI,CAACE,EAAL,GAAY,KAAI,CAACC,kBAAjB,EACCF,IAAI,CAACC,EAAL,GAAY,KAAI,CAACE,UAHnB,EAIAT,MAAM,CAACI,aAAP,CAAqBC,IAArB,CAA2BC,IAA3B,CALF,CAOD,CAfuC,CAgBxCI,uBAAuB,CAAEV,MAAM,CAACU,uBAhBQ,CAAvB,CAAnB,CAkBD,C,+HAGCC,Q,CACAC,iB,CACAC,a,CAC6B,CAC7B,KAAKZ,WAAL,CAAmB,KAAKA,WAAL,CAAiBa,wBAAjB,CACjBH,QADiB,CAEjBC,iBAFiB,CAGjBC,aAHiB,CAAnB,CAMA,KAAKE,SAAL,CAAiBJ,QAAjB,CACA,KAAKE,aAAL,CAAqB,KAAKZ,WAAL,CAAiBY,aAAtC,CACA,KAAKD,iBAAL,CAAyB,KAAKX,WAAL,CAAiBW,iBAA1C,CAEA,MAAO,KAAP,CACD,C,qDAGmC,CAClC,MAAO,MAAKX,WAAZ,CACD,C,mDAEuB,CACtB,MAAO,MAAKQ,UAAZ,CACD,C,qDAEwB,CAMvB,GAAI,KAAKI,aAAT,CAAwB,CACtB,MAAO,MAAKA,aAAL,CAAmB,CAAnB,GAAyB,KAAKA,aAAL,CAAmB,CAAnB,EAAsB,CAAtB,CAAhC,CACD,CACD,MAAOG,CAAAA,MAAM,CAACC,IAAP,CAAY,KAAKF,SAAjB,EAA4B,CAA5B,CAAP,CACD,C,mDAEuB,CACtB,GAAI,KAAKF,aAAL,EAAsB,KAAKA,aAAL,CAAmBK,MAA7C,CAAqD,CACnD,GAAMC,CAAAA,WAAW,CAAG,KAAKN,aAAL,CAAmB,KAAKA,aAAL,CAAmBK,MAAnB,CAA4B,CAA/C,CAApB,CACA,GAAIC,WAAW,EAAIA,WAAW,CAACD,MAA/B,CAAuC,CACrC,MAAOC,CAAAA,WAAW,CAACA,WAAW,CAACD,MAAZ,CAAqB,CAAtB,CAAlB,CACD,CACF,CACD,MAAOF,CAAAA,MAAM,CAACC,IAAP,CAAY,KAAKF,SAAjB,EAA4B,KAAKA,SAAL,CAAeG,MAAf,CAAwB,CAApD,CAAP,CACD,C,kDAEYE,K,CAA4C,CACvD,KAAKZ,kBAAL,CAA0B,KAAKC,UAA/B,CACA,KAAKA,UAAL,CAAkBW,KAAlB,CAEA,KAAKnB,WAAL,CAAmB,KAAKA,WAAL,CAAiBa,wBAAjB,CACjB,KAAKC,SADY,CAEjB,KAAKH,iBAFY,CAGjB,KAAKC,aAHY,CAAnB,CAMA,MAAO,KAAP,CACD,C,qKAGHQ,MAAM,CAACC,OAAP,CAAiBvB,2BAAjB,C,gLA9FMA,2B","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\n'use strict';\n\nconst ListViewDataSource = require('ListViewDataSource');\n\n/**\n * Data source wrapper around ListViewDataSource to allow for tracking of\n * which row is swiped open and close opened row(s) when another row is swiped\n * open.\n *\n * See https://github.com/facebook/react-native/pull/5602 for why\n * ListViewDataSource is not subclassed.\n */\nclass SwipeableListViewDataSource {\n  _previousOpenRowID: string;\n  _openRowID: string;\n\n  _dataBlob: any;\n  _dataSource: ListViewDataSource;\n\n  rowIdentities: Array<Array<string>>;\n  sectionIdentities: Array<string>;\n\n  constructor(params: Object) {\n    this._dataSource = new ListViewDataSource({\n      getRowData: params.getRowData,\n      getSectionHeaderData: params.getSectionHeaderData,\n      rowHasChanged: (row1, row2) => {\n        /**\n         * Row needs to be re-rendered if its swiped open/close status is\n         * changed, or its data blob changed.\n         */\n        return (\n          (row1.id !== this._previousOpenRowID &&\n            row2.id === this._openRowID) ||\n          (row1.id === this._previousOpenRowID &&\n            row2.id !== this._openRowID) ||\n          params.rowHasChanged(row1, row2)\n        );\n      },\n      sectionHeaderHasChanged: params.sectionHeaderHasChanged,\n    });\n  }\n\n  cloneWithRowsAndSections(\n    dataBlob: any,\n    sectionIdentities: ?Array<string>,\n    rowIdentities: ?Array<Array<string>>,\n  ): SwipeableListViewDataSource {\n    this._dataSource = this._dataSource.cloneWithRowsAndSections(\n      dataBlob,\n      sectionIdentities,\n      rowIdentities,\n    );\n\n    this._dataBlob = dataBlob;\n    this.rowIdentities = this._dataSource.rowIdentities;\n    this.sectionIdentities = this._dataSource.sectionIdentities;\n\n    return this;\n  }\n\n  // For the actual ListView to use\n  getDataSource(): ListViewDataSource {\n    return this._dataSource;\n  }\n\n  getOpenRowID(): ?string {\n    return this._openRowID;\n  }\n\n  getFirstRowID(): ?string {\n    /**\n     * If rowIdentities is specified, find the first data row from there since\n     * we don't want to attempt to bounce section headers. If unspecified, find\n     * the first data row from _dataBlob.\n     */\n    if (this.rowIdentities) {\n      return this.rowIdentities[0] && this.rowIdentities[0][0];\n    }\n    return Object.keys(this._dataBlob)[0];\n  }\n\n  getLastRowID(): ?string {\n    if (this.rowIdentities && this.rowIdentities.length) {\n      const lastSection = this.rowIdentities[this.rowIdentities.length - 1];\n      if (lastSection && lastSection.length) {\n        return lastSection[lastSection.length - 1];\n      }\n    }\n    return Object.keys(this._dataBlob)[this._dataBlob.length - 1];\n  }\n\n  setOpenRowID(rowID: string): SwipeableListViewDataSource {\n    this._previousOpenRowID = this._openRowID;\n    this._openRowID = rowID;\n\n    this._dataSource = this._dataSource.cloneWithRowsAndSections(\n      this._dataBlob,\n      this.sectionIdentities,\n      this.rowIdentities,\n    );\n\n    return this;\n  }\n}\n\nmodule.exports = SwipeableListViewDataSource;\n"]}]}