{"remainingRequest":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js??ref--5-2!/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Experimental/SwipeableRow/SwipeableListView.js","dependencies":[{"path":"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Experimental/SwipeableRow/SwipeableListView.js","mtime":1539700108130},{"path":"/Users/jeffrey/HaulTesting/node_modules/cache-loader/dist/cjs.js","mtime":1539652983212},{"path":"/Users/jeffrey/HaulTesting/node_modules/thread-loader/dist/cjs.js","mtime":1539652983315},{"path":"/Users/jeffrey/HaulTesting/node_modules/babel-loader/lib/index.js","mtime":1539615827828}],"contextDependencies":[],"result":["'use strict';var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _possibleConstructorReturn2=_interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));var _getPrototypeOf2=_interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _inherits2=_interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));var _jsxFileName=\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Experimental/SwipeableRow/SwipeableListView.js\";(function(){var enterModule=require('react-hot-loader').enterModule;enterModule&&enterModule(module);})();var ListView=require('ListView');var PropTypes=require('prop-types');var React=require('React');var SwipeableListViewDataSource=require('SwipeableListViewDataSource');var SwipeableRow=require('SwipeableRow');var SwipeableListView=function(_React$Component){(0,_inherits2.default)(SwipeableListView,_React$Component);(0,_createClass2.default)(SwipeableListView,null,[{key:\"getNewDataSource\",value:function getNewDataSource(){return new SwipeableListViewDataSource({getRowData:function getRowData(data,sectionID,rowID){return data[sectionID][rowID];},getSectionHeaderData:function getSectionHeaderData(data,sectionID){return data[sectionID];},rowHasChanged:function rowHasChanged(row1,row2){return row1!==row2;},sectionHeaderHasChanged:function sectionHeaderHasChanged(s1,s2){return s1!==s2;}});}}]);function SwipeableListView(props,context){var _this;(0,_classCallCheck2.default)(this,SwipeableListView);_this=(0,_possibleConstructorReturn2.default)(this,(0,_getPrototypeOf2.default)(SwipeableListView).call(this,props,context));_this._listViewRef=null;_this._shouldBounceFirstRowOnMount=false;_this._onScroll=function(e){if(_this.props.dataSource.getOpenRowID()){_this.setState({dataSource:_this.state.dataSource.setOpenRowID(null)});}_this.props.onScroll&&_this.props.onScroll(e);};_this._renderRow=function(rowData,sectionID,rowID){var slideoutView=_this.props.renderQuickActions(rowData,sectionID,rowID);if(!slideoutView){return _this.props.renderRow(rowData,sectionID,rowID);}var shouldBounceOnMount=false;if(_this._shouldBounceFirstRowOnMount){_this._shouldBounceFirstRowOnMount=false;shouldBounceOnMount=rowID===_this.props.dataSource.getFirstRowID();}return React.createElement(SwipeableRow,{slideoutView:slideoutView,isOpen:rowData.id===_this.props.dataSource.getOpenRowID(),maxSwipeDistance:_this._getMaxSwipeDistance(rowData,sectionID,rowID),key:rowID,onOpen:function onOpen(){return _this._onOpen(rowData.id);},onClose:function onClose(){return _this._onClose(rowData.id);},onSwipeEnd:function onSwipeEnd(){return _this._setListViewScrollable(true);},onSwipeStart:function onSwipeStart(){return _this._setListViewScrollable(false);},shouldBounceOnMount:shouldBounceOnMount,__source:{fileName:_jsxFileName,lineNumber:213}},_this.props.renderRow(rowData,sectionID,rowID));};_this._shouldBounceFirstRowOnMount=_this.props.bounceFirstRowOnMount;_this.state={dataSource:_this.props.dataSource};return _this;}(0,_createClass2.default)(SwipeableListView,[{key:\"UNSAFE_componentWillReceiveProps\",value:function UNSAFE_componentWillReceiveProps(nextProps){if(this.state.dataSource.getDataSource()!==nextProps.dataSource.getDataSource()){this.setState({dataSource:nextProps.dataSource});}}},{key:\"render\",value:function render(){var _this2=this;return React.createElement(ListView,(0,_extends2.default)({},this.props,{ref:function ref(_ref){_this2._listViewRef=_ref;},dataSource:this.state.dataSource.getDataSource(),onScroll:this._onScroll,renderRow:this._renderRow,__source:{fileName:_jsxFileName,lineNumber:121}}));}},{key:\"_setListViewScrollable\",value:function _setListViewScrollable(value){if(this._listViewRef&&typeof this._listViewRef.setNativeProps==='function'){this._listViewRef.setNativeProps({scrollEnabled:value});}}},{key:\"getScrollResponder\",value:function getScrollResponder(){if(this._listViewRef&&typeof this._listViewRef.getScrollResponder==='function'){return this._listViewRef.getScrollResponder();}}},{key:\"_getMaxSwipeDistance\",value:function _getMaxSwipeDistance(rowData,sectionID,rowID){if(typeof this.props.maxSwipeDistance==='function'){return this.props.maxSwipeDistance(rowData,sectionID,rowID);}return this.props.maxSwipeDistance;}},{key:\"_onOpen\",value:function _onOpen(rowID){this.setState({dataSource:this.state.dataSource.setOpenRowID(rowID)});}},{key:\"_onClose\",value:function _onClose(rowID){this.setState({dataSource:this.state.dataSource.setOpenRowID(null)});}},{key:\"__reactstandin__regenerateByEval\",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code);}}]);return SwipeableListView;}(React.Component);SwipeableListView.propTypes={bounceFirstRowOnMount:PropTypes.bool.isRequired,dataSource:PropTypes.instanceOf(SwipeableListViewDataSource).isRequired,maxSwipeDistance:PropTypes.oneOfType([PropTypes.number,PropTypes.func]).isRequired,renderRow:PropTypes.func.isRequired,renderQuickActions:PropTypes.func.isRequired};SwipeableListView.defaultProps={bounceFirstRowOnMount:false,renderQuickActions:function renderQuickActions(){return null;}};module.exports=SwipeableListView;;(function(){var reactHotLoader=require('react-hot-loader').default;var leaveModule=require('react-hot-loader').leaveModule;if(!reactHotLoader){return;}reactHotLoader.register(SwipeableListView,\"SwipeableListView\",\"/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Experimental/SwipeableRow/SwipeableListView.js\");leaveModule(module);})();;",{"version":3,"sources":["/Users/jeffrey/HaulTesting/node_modules/react-native/Libraries/Experimental/SwipeableRow/SwipeableListView.js"],"names":["ListView","require","PropTypes","React","SwipeableListViewDataSource","SwipeableRow","SwipeableListView","getRowData","data","sectionID","rowID","getSectionHeaderData","rowHasChanged","row1","row2","sectionHeaderHasChanged","s1","s2","props","context","_listViewRef","_shouldBounceFirstRowOnMount","_onScroll","e","dataSource","getOpenRowID","setState","state","setOpenRowID","onScroll","_renderRow","rowData","slideoutView","renderQuickActions","renderRow","shouldBounceOnMount","getFirstRowID","id","_getMaxSwipeDistance","_onOpen","_onClose","_setListViewScrollable","bounceFirstRowOnMount","nextProps","getDataSource","ref","value","setNativeProps","scrollEnabled","getScrollResponder","maxSwipeDistance","Component","propTypes","bool","isRequired","instanceOf","oneOfType","number","func","defaultProps","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst ListView = require('ListView');\nconst PropTypes = require('prop-types');\nconst React = require('React');\nconst SwipeableListViewDataSource = require('SwipeableListViewDataSource');\nconst SwipeableRow = require('SwipeableRow');\n\ntype DefaultProps = {\n  bounceFirstRowOnMount: boolean,\n  renderQuickActions: Function,\n};\n\ntype Props = {\n  bounceFirstRowOnMount: boolean,\n  dataSource: SwipeableListViewDataSource,\n  maxSwipeDistance:\n    | number\n    | ((rowData: any, sectionID: string, rowID: string) => number),\n  onScroll?: ?Function,\n  renderRow: Function,\n  renderQuickActions: Function,\n};\n\ntype State = {\n  dataSource: Object,\n};\n\n/**\n * A container component that renders multiple SwipeableRow's in a ListView\n * implementation. This is designed to be a drop-in replacement for the\n * standard React Native `ListView`, so use it as if it were a ListView, but\n * with extra props, i.e.\n *\n * let ds = SwipeableListView.getNewDataSource();\n * ds.cloneWithRowsAndSections(dataBlob, ?sectionIDs, ?rowIDs);\n * // ..\n * <SwipeableListView renderRow={..} renderQuickActions={..} {..ListView props} />\n *\n * SwipeableRow can be used independently of this component, but the main\n * benefit of using this component is\n *\n * - It ensures that at most 1 row is swiped open (auto closes others)\n * - It can bounce the 1st row of the list so users know it's swipeable\n * - More to come\n */\nclass SwipeableListView extends React.Component<Props, State> {\n  props: Props;\n  state: State;\n\n  _listViewRef: ?React.Element<any> = null;\n  _shouldBounceFirstRowOnMount: boolean = false;\n\n  static getNewDataSource(): Object {\n    return new SwipeableListViewDataSource({\n      getRowData: (data, sectionID, rowID) => data[sectionID][rowID],\n      getSectionHeaderData: (data, sectionID) => data[sectionID],\n      rowHasChanged: (row1, row2) => row1 !== row2,\n      sectionHeaderHasChanged: (s1, s2) => s1 !== s2,\n    });\n  }\n\n  static propTypes = {\n    /**\n     * To alert the user that swiping is possible, the first row can bounce\n     * on component mount.\n     */\n    bounceFirstRowOnMount: PropTypes.bool.isRequired,\n    /**\n     * Use `SwipeableListView.getNewDataSource()` to get a data source to use,\n     * then use it just like you would a normal ListView data source\n     */\n    dataSource: PropTypes.instanceOf(SwipeableListViewDataSource).isRequired,\n    // Maximum distance to open to after a swipe\n    maxSwipeDistance: PropTypes.oneOfType([PropTypes.number, PropTypes.func])\n      .isRequired,\n    // Callback method to render the swipeable view\n    renderRow: PropTypes.func.isRequired,\n    // Callback method to render the view that will be unveiled on swipe\n    renderQuickActions: PropTypes.func.isRequired,\n  };\n\n  static defaultProps = {\n    bounceFirstRowOnMount: false,\n    renderQuickActions: () => null,\n  };\n\n  constructor(props: Props, context: any): void {\n    super(props, context);\n\n    this._shouldBounceFirstRowOnMount = this.props.bounceFirstRowOnMount;\n    this.state = {\n      dataSource: this.props.dataSource,\n    };\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props): void {\n    if (\n      this.state.dataSource.getDataSource() !==\n      nextProps.dataSource.getDataSource()\n    ) {\n      this.setState({\n        dataSource: nextProps.dataSource,\n      });\n    }\n  }\n\n  render(): React.Node {\n    return (\n      // $FlowFixMe Found when typing ListView\n      <ListView\n        {...this.props}\n        ref={ref => {\n          // $FlowFixMe Found when typing ListView\n          this._listViewRef = ref;\n        }}\n        dataSource={this.state.dataSource.getDataSource()}\n        onScroll={this._onScroll}\n        renderRow={this._renderRow}\n      />\n    );\n  }\n\n  _onScroll = (e): void => {\n    // Close any opens rows on ListView scroll\n    if (this.props.dataSource.getOpenRowID()) {\n      this.setState({\n        dataSource: this.state.dataSource.setOpenRowID(null),\n      });\n    }\n    this.props.onScroll && this.props.onScroll(e);\n  };\n\n  /**\n   * This is a work-around to lock vertical `ListView` scrolling on iOS and\n   * mimic Android behaviour. Locking vertical scrolling when horizontal\n   * scrolling is active allows us to significantly improve framerates\n   * (from high 20s to almost consistently 60 fps)\n   */\n  _setListViewScrollable(value: boolean): void {\n    if (\n      this._listViewRef &&\n      /* $FlowFixMe(>=0.68.0 site=react_native_fb) This comment suppresses an\n      * error found when Flow v0.68 was deployed. To see the error delete this\n      * comment and run Flow. */\n      typeof this._listViewRef.setNativeProps === 'function'\n    ) {\n      this._listViewRef.setNativeProps({\n        scrollEnabled: value,\n      });\n    }\n  }\n\n  // Passing through ListView's getScrollResponder() function\n  getScrollResponder(): ?Object {\n    if (\n      this._listViewRef &&\n      /* $FlowFixMe(>=0.68.0 site=react_native_fb) This comment suppresses an\n      * error found when Flow v0.68 was deployed. To see the error delete this\n      * comment and run Flow. */\n      typeof this._listViewRef.getScrollResponder === 'function'\n    ) {\n      return this._listViewRef.getScrollResponder();\n    }\n  }\n\n  // This enables rows having variable width slideoutView.\n  _getMaxSwipeDistance(\n    rowData: Object,\n    sectionID: string,\n    rowID: string,\n  ): number {\n    if (typeof this.props.maxSwipeDistance === 'function') {\n      return this.props.maxSwipeDistance(rowData, sectionID, rowID);\n    }\n\n    return this.props.maxSwipeDistance;\n  }\n\n  _renderRow = (\n    rowData: Object,\n    sectionID: string,\n    rowID: string,\n  ): React.Element<any> => {\n    const slideoutView = this.props.renderQuickActions(\n      rowData,\n      sectionID,\n      rowID,\n    );\n\n    // If renderQuickActions is unspecified or returns falsey, don't allow swipe\n    if (!slideoutView) {\n      return this.props.renderRow(rowData, sectionID, rowID);\n    }\n\n    let shouldBounceOnMount = false;\n    if (this._shouldBounceFirstRowOnMount) {\n      this._shouldBounceFirstRowOnMount = false;\n      shouldBounceOnMount = rowID === this.props.dataSource.getFirstRowID();\n    }\n\n    return (\n      <SwipeableRow\n        slideoutView={slideoutView}\n        isOpen={rowData.id === this.props.dataSource.getOpenRowID()}\n        maxSwipeDistance={this._getMaxSwipeDistance(rowData, sectionID, rowID)}\n        key={rowID}\n        onOpen={() => this._onOpen(rowData.id)}\n        onClose={() => this._onClose(rowData.id)}\n        onSwipeEnd={() => this._setListViewScrollable(true)}\n        onSwipeStart={() => this._setListViewScrollable(false)}\n        shouldBounceOnMount={shouldBounceOnMount}>\n        {this.props.renderRow(rowData, sectionID, rowID)}\n      </SwipeableRow>\n    );\n  };\n\n  _onOpen(rowID: string): void {\n    this.setState({\n      dataSource: this.state.dataSource.setOpenRowID(rowID),\n    });\n  }\n\n  _onClose(rowID: string): void {\n    this.setState({\n      dataSource: this.state.dataSource.setOpenRowID(null),\n    });\n  }\n}\n\nmodule.exports = SwipeableListView;\n"]}]}